C     **********************************************************   
C     AIR2D - AN AIR FLOW MODEL FOR CALIBRATING AIR PERMEABILITY   
C     =====   == === ==== ===== === =========== === ============   
C   
C               AND PREDICTING PRESSURE AND FLOW DISTRIBUTIONS   
C               === ========== ======== === ==== =============   
C   
C   
C     DEVELOPED BY   -    ARTHUR L. BAEHR   
C                         USGS, 810 BEAR TAVERN RD.   
C                         WEST TRENTON, NJ 08628   
C   
C                    -    CRAIG J. JOSS   
C                         P.O. BOX 943   
C                         BALA CYNWYD, PA 19004   
C   
C     ********************************************   
C   
C1----VERSION 3.1  10NOV1992   
C   
C     PROGRAM NAME ON PERSONAL COMPUTER : AIR2D.FOR   
C                  ON MAIN FRAME        : AIR2D.F77   
C   
C     DATE OF LAST REVISION             : 10/12/94   
C   
C2----NOTES  :   
C   
C     1. THIS PROGRAM HAS A NUMBER OF FEATURES INCLUDING  :   
C        A. HORIZONTAL PERMEABILITY DETERMINATION BASED ON    
C            MINI-PERMEABILITY TEST RESULTS (IE Kr).   
C        B. HORIZONTAL AND VERTICAL PERMEABILITY DETERMINATION   
C            BASED ON FULL-SCALE PERMEABILITY TEST RESULTS   
C            (IE. Kr & Kz).   
C        C. FRICTION FACTOR DETERMINATION FOR AIR FLOW IN PIPES   
C            BASED ON EXPERIMENTAL RESULTS.   
C        D. PREDICTIVE MODE APPLICATIONS WHERE THE USER CAN    
C            APPLY THE MODEL, USING KNOWN PERMEABILITIES, TO   
C            GENERATE PRESSURE DISTRIBUTION OVER DOMAIN AND   
C            FLOW RATES.   
C   
C     2. INPUT DATA FILES NEEDED TO RUN OPTION 1A.   
C        -  TESTxxx  (OPTIONAL)   
C        -  CALIBxxx (OPTIONAL)   
C        -  FRICxxx  (OPTIONAL)   
C        WHERE,   
C           TESTxxx CONTAINS INFORMATION ON TESTS RUN AT   
C            SPECIFIC PROBE LOCATIONS  -  THE xxx IN THE   
C            FILE NAME INDICATES THAT THE FILE NAME IS   
C            SPECIFIED BY THE USER - ALSO NOTE THAT THIS   
C            INFORMATION MAY BE INPUT INTERACTIVELY THUS   
C            AVOIDING THE NEED TO USE A DATA FILE.   
C           CALIBxxx CONTAINS INFORMATION CALIBRATING FLOW   
C            METER SCALE READINGS WITH ACTUAL FLOW RATES   
C            IE. MANUFACTURER'S CALIBRATION CHART  -  THE   
C            xxx IN THE FILE NAME INDICATES THAT THE FILE   
C            NAME IS SPECIFIED BY THE USER  - ALSO NOTE   
C            THAT THIS INFORMATION IS NOT REQUIRED IF THE   
C            FLOW INPUT DIRECTLY AS MASS OR VOLUMETRIC FLOW   
C            IN THE SELECTED UNIT SYSTEM.   
C            FRICxxx CONTAINS REYNOLDS NUMBER VERSUS FRICTION   
C            FACTOR CORRELATIONS  -  THIS FILE MAY BE CREATED   
C            USING OPTION 1C (ABOVE) IN THIS PROGRAM, FROM   
C            ACTUAL FIELD (EXPERIMENTAL) MEASUREMENTS.   
C            ALTERNATIVELY, THE USER MAY USE THE PROGRAM   
C            TO GENERATE THE FRICTION FACTORS FOR PREVAILING   
C            REYNOLDS NUMBERS.  THE PROGRAM USES THEORETICAL   
C            EXPRESSIONS FOR FRICTION FACTORS IN THE LAMINAR,   
C            TRANSITIONAL AND TURBULENT FLOW RANGES.   
C            FINALLY THE PROGRAM WILL ALSO ACCEPT DIRECT INPUT   
C            OF FRICTION FACTOR VALUES CORRESPONDING TO SPECIFIC   
C            TEST CONDITIONS.   
C            THE xxx AGAIN INDICATES THAT THE NAME OF THE FILE   
C            IS SPECIFIED BY THE USER AND THUS MAY BE CHANGED TO   
C            MATCH SPECIFIC DATA SETS. THIS DATA IS ONLY REQUIRED   
C            IN THE CASE OF THE MINI-PERMEABILITY ANALYSES. THE    
C            FULL-SCALE PERMEABILITY TESTS GIVE THE PRESSURE AT   
C            THE PROBE AS OPPOSED TO THE PRESSURE AT THE SURFACE   
C            IN THE MINI-TESTS AND THEREFORE REQUIRE NO CORRECTION.   
C   
C     3. INPUT DATA FILES NEEDED TO RUN OPTION 1B.   
C        -  TESTxxx  (OPTIONAL)   
C        -  CALIBxxx (OPTIONAL)   
C        WHERE,   
C           TESTxxx ALSO CONTAINS INFORMATION ON TESTS RUN   
C            AT SPECIFIC PROBE LOCATIONS.  THE FORMAT OF THE   
C            TESTxxx FILE IS SIMILAR TO OPTION 1A, THE MAJOR   
C            DIFFERENCES BEING AS FOLLOWS  :   
C            - D1 USED IN CALCULATING THE PROBE PRESSURE IN   
C              THE MINI-PERMEABILITY TESTS ARE NOT REQUIRED.   
C            - ADDITIONAL INPUT LINES ARE NECESSARY IN THE   
C              FULL-SCALE TESTS TO SPECIFY THE EXTRA PRESSURE   
C              MEASUREMENTS ASSOCIATED WITH THIS TEST.   
C           CALIBxxx CONTAINS THE SAME INFORMATION AS IS USED   
C            IN CASE A.   
C           FRICxxx IS NOT USED IN THE CASE OF FULL-SCALE   
C            PERMEABILITY TESTS SINCE THE PRESSURE INPUT VALUES   
C            NEED NO FURTHER MODIFICATIONS.  UNLIKE THE MINI-   
C            PERMEABILITY CASE, THE FULL-SCALE TEST RECORDS   
C            PRESSURES AT THE PROBE UNDER STATIONARY (NO FLOW   
C            IN PIPE) CONDITIONS, HENCE NO FRICTION FACTOR   
C            CORRECTION IS REQUIRED.   
C   
C     4. INPUT DATA FILES NEEDED TO RUN OPTION 1C.   
C        -  TESTaxxx  (OPTIONAL), OR,   
C        -  TESTbxxx  (OPTIONAL)   
C        -  CALIBxxx (OPTIONAL)   
C        WHERE,   
C           TESTaxxx CONTAINS INFORMATION FROM FIELD/EXPERIMENTAL   
C            CALIBRATION TESTS ON AIR FLOW IN PIPES.  TESTbxxx   
C            CONTAINS INFORMATION FOR FRICTION FACTOR DETERMINATION   
C            BASED ON COLEBROOK-WHITE & POISEUILLE EQUATIONS. THIS   
C            DATA IS USED TO DETERMINE THE FRICTION FACTOR   
C            RELATIONSHIPS AS A FUNCTIONS OF DIFFERENT REYNOLDS   
C            NUMBERS  -  NOTE THAT THIS INFORMATION MAY BE INPUT   
C            INTERACTIVELY THUS AVOIDING THE NEED TO USE A DATA FILE.   
C           CALIBxxx CONTAINS THE SAME INFORMATION AS IS USED   
C            IN CASE A.   
C   
C     5. INPUT DATA FILES NEEDED TO RUN OPTION 1D.   
C        -  TESTxxx  (OPTIONAL)   
C        -  CALIBxxx (OPTIONAL)   
C        WHERE,   
C           TESTxxx CONTAINS KNOWN FIELD PARAMETERS SUCH AS   
C            PERMEABILITY, WELL DIMENSIONS AND PHYSICAL CONDITIONS.   
C            FOR SPECIFIED FLOW RATES, PRESSURE AND FLOW IN THE   
C            DOMAIN IS PREDICTED.  THE USER CAN SPECIFY THE RANGE   
C            OVER WHICH OUTPUT IS GENERATED.   
C           CALIBxxx CONTAINS THE SAME INFORMATION AS IS USED   
C            IN CASE A.   
C   
C3----SPECIFICATIONS:   
C   
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)   
      PARAMETER(LENM=5000,LENP=10000,LENS=2000)   
      COMMON XV(12*LENM),RD(LENP),ZDA(LENP),PHID(LENP)   
      COMMON XSTOR(23*LENS),ASTORA(LENS)   
      COMMON/UNITS/XU2(7,10) 
      COMMON/IUNIT/IU1(7),IU3(7,10)   
      CHARACTER*12 DATE,WELLNUM,AFLOW,AF1,ASTORA,INFILE,OPVSR,   
     1             OVVSR,OMVSR,OWELL,AOUT,AFRIC,IU3*4,PROJECT*40   
C   
C4a---ASSIGN BASIC INPUT UNIT AND PRINTER UNIT   
C   
C     SET : INBAS = 5  WHEN USING PERSONAL COMPUTER   
C     SET : INBAS = 1  WHEN USING MAIN FRAME   
C     SET : IOUT  = 6  WHEN USING PERSONAL COMPUTER   
C     SET : IOUT  = 1  WHEN USING MAIN FRAME   
C        
      INBAS=5   
      IOUT=6   
C   
C4b---SPECIFY GRAPHICAL OUTPUT SYMBOL   
C   
C     SET : ISYMBL = 92  FOR ARROW VECTOR WHEN USING SURFER   
C   
      ISYMBL = 92   
      IMODE=1   
C   
C5a---ASSIGN UNIT CONVERSIONS   
C   
      CALL UNITSET   
C   
C5b---SETUP PROBLEM   
C   
 300  CONTINUE   
      CALL SETUP(INBAS,IOUT,ISEL1,IMODE,IOUTF,BETA,WAIR,STDATM,PI,   
     1 DX,RG,VAS,TVAS,RER,RERF,NMAX,PROJECT,DATE,WELLNUM,NR,NRR,   
     2 IOP1,IOP2,B1,XK1,XKR,AR,AR1,DECR,DINC,DINJ,IOP5,ZD,ZL,ZB,   
     3 RW,D1,AKS,XMAX,INFILE,ISEL2,NV,AFRIC,AOUT)   
C   
C6----CREATE/MODIFY DATA INPUT FILE   
C   
C6a---SET UP / MODIFY INPUT FILE   
      IF(IMODE.NE.1) THEN   
       DO 18 I=1,NR   
        CALL DATAIN(I,INBAS,IOUT,ISEL1,ISEL2,IMODE,TAIR,TSOIL,TAVE,   
     1  ATM,ATMP,ATMSQ,P3,P3P,Q4P,Q4Q,Q4,QM,AFLOW,AF1,IOP1,AR,AR1,   
     2  WAIR,IOP5,IOPS,ZOBS,RSTRT,DELR,RFAR,DELZ,ZFAR,NPTS,STDATM,   
     3  RG,DINJ,VAS,TVAS,VA,INFILE,OPVSR,OVVSR,OMVSR,OWELL,RE,IQMV,   
     4  RD,ZDA,PHID,LENP,NRR)   
 18    CONTINUE   
C6b----TRANSCRIBE OUTPUT FROM SCRATCH FILE TO INPUT FILE   
       IF(IMODE.EQ.2) THEN   
        CALL TRANS(NR,ISEL1,ISEL2)   
       END IF   
C   
C6d----RETURN TO MAIN MENU   
C   
       IF (ISEL1.GT.0) THEN   
        CLOSE(8)   
        CLOSE(9)   
        CLOSE(10)   
        CLOSE(11)   
        GO TO 300   
       END IF   
      END IF   
C   
C7----IMPLEMENT AIR2D IN CALIBRATION OR PREDICTIVE MODE   
C   
      DO 20 I=1,NR   
C   
C7a----INPUT DATA   
C   
       CALL DATAIN(I,INBAS,IOUT,ISEL1,ISEL2,IMODE,TAIR,TSOIL,TAVE,   
     1 ATM,ATMP,ATMSQ,P3,P3P,Q4P,Q4Q,Q4,QM,AFLOW,AF1,IOP1,AR,AR1,   
     2 WAIR,IOP5,IOPS,ZOBS,RSTRT,DELR,RFAR,DELZ,ZFAR,NPTS,STDATM,   
     3 RG,DINJ,VAS,TVAS,VA,INFILE,OPVSR,OVVSR,OMVSR,OWELL,RE,IQMV,   
     4 RD,ZDA,PHID,LENP,NRR)   
C   
C------NO PRESSURE CORRECTIONS ARE NECESSARY TO PROBE MEASURMENTS    
C      FOR FULL-SCALE TESTS (ISEL1=1) OR PREDICTIVE ANALYSES (ISEL1=4)   
C   
       IF ((ISEL1.NE.1).AND.(ISEL1.NE.4)) THEN   
C   
C7b-----ADJUST FLOW READING AND PRESSURE TO GET BOUNDARY CONDITION   
C       AT TOP OF PROBE   
C   
C-------NOT REQUIRED FOR THEORETICAL EVALUATION OF FRICTION FACTOR   
        IF ((ISEL1.NE.3).OR.(ISEL2.NE.3)) THEN   
         CALL REYN(PI,VA,D1,QM,V1RHO1,RE)   
        END IF   
C   
C7c-----CALCULATE REYNOLDS NUMBER - FRICTION FACTOR CORRELATIONS   
C       FROM FIELD/EXPERIMENTAL DATA   
C   
        IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.2)) THEN   
         CALL PIPEF(IOUTF,FRIK,V1RHO1,XMAX,TAVE,RG,WAIR,ATM,STDATM,   
     1    P3,BETA,D1,RE)   
         GO TO 19   
        END IF   
C   
C7d-----CALCULATE FRICITON FACTORS IN PIPE BY INTERPOLATING BETWEEN   
C       REYNOLDS NUMBER - FRICTION FACTOR CORRELATIONS OR BY   
C       THEORETICAL MEANS   
C   
C-------SET UP ARRAY SIZES   
C   
        IC1=1   
        IC2=IC1+LENM   
        IC3=IC2+LENM   
        IC4=IC3+4*LENM   
        IC5=IC4+LENM   
        IC6=IC5+LENM   
        IC7=IC6+LENM   
        IC8=IC7+LENM   
        CALL FRIKF(XV(IC1),XV(IC2),XV(IC3),XV(IC4),XV(IC5),XV(IC6),   
     1   XV(IC7),XV(IC8),IOUT,IOUTF,INBAS,RE,FRIK,NV,ISEL1,ISEL2,   
     2   AFRIC,D1,AKS,NMAX,RER,I,NR,LENM)   
        IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3)) THEN   
         GO TO 21   
        END IF   
C   
C7e-----SOLVE ODE TO OBTAIN PRESSURE AT PROBE ANALYTICALLY ONLY   
C   
        CALL SLVODE(WAIR,STDATM,RG,D1,DX,XMAX,TAVE,ATM,V1RHO1,   
     1   BETA,NMAX,P3,FRIK,WWW,WWA,DINJ)   
       END IF   
C   
C7f----APPLY AIR FLOW MODEL IN CALIBRATION OR PREDICTIVE MODE   
C   
       CALL POWELL(ISEL1,IMODE,TAVE,ATMSQ,WAIR,RG,VA,WWA,QM,B1,XK1,   
     1  XKR,AR,IOP5,IOPS,ZOBS,RSTRT,DELR,RFAR,DELZ,ZFAR,ZD,ZL,ZB,RW,   
     2  PI,RER,RERF,NMAX,PAR1,PAR2,PAR3,IOP1,IOP2,NPTS,PHIB,CHI,CHI0,   
     3  AVG1,STD1,DINC,DECR,RD,ZDA,PHID,IVR1,IVR2,IVR3,IOUT,DINJ,   
     4  INFILE,INBAS,OPVSR,OVVSR,OMVSR,OWELL,NR,I,LENP,STDATM,ATM,   
     5  ISYMBL)   
C   
C7g----STORE OUTPUT DATA FOR PRINTING   
C   
 19    CONTINUE   
       IF(ISEL1.NE.4) THEN   
        CALL DATSTR(I,TAIR,TSOIL,ATM,ATMP,P3P,AFLOW,AF1,Q4P,Q4Q,   
     1   Q4,QM,RE,FRIK,PWP,WWW,WWA,PAR1,PAR2,PAR3,CHI0,AVG1,STD1,   
     2   IVR1,IVR2,IVR3,XSTOR,ASTORA,LENS,IQMV)   
       END IF   
C   
 21    CONTINUE   
 20   CONTINUE   
C   
C7h----RETURN TO MENU FOR PREDICTIVE SIMULATIONS   
C   
       IF ((ISEL1.EQ.4).OR.((ISEL1.EQ.3).AND.(ISEL2.EQ.3))) THEN   
        CLOSE(8)   
        CLOSE(9)   
        CLOSE(10)   
        CLOSE(11)   
        CLOSE(14)   
        CLOSE(15)   
        CLOSE(16)   
        CLOSE(17)   
        CLOSE(18)   
        GO TO 300   
       END IF   
C   
C   
C7i---WRITE OUTPUT TO SCREEN, DATA FILE OR PRINTER   
C   
      CALL DATOUT(INBAS,IOUT,ISEL1,ISEL2,PROJECT,DATE,WELLNUM,   
     1 AKS,NR,IOP1,IOP2,AR1,XKR,B1,XK1,ZD,ZL,ZB,RW,DINJ,XSTOR,   
     2 ASTORA,AOUT,XMAX,D1,LENS,IQMV)   
      IF (ISEL1.GT.0) THEN   
        CLOSE(8)   
        CLOSE(9)   
        CLOSE(10)   
        CLOSE(11)   
        CLOSE(18)   
       GO TO 300   
      END IF   
      STOP   
      END   
C   
C     ****************** 
      SUBROUTINE UNITSET   
C     ******************   
C   
C1----SPECIFICATIONS :   
C   
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)   
      COMMON/UNITS/XU2(7,10) 
      COMMON/IUNIT/IU1(7),IU3(7,10)   
      CHARACTER*4 IU3   
C   
C2----SET UP UNIT ARRAYS   
C   
C     NOTES :   
C     1. IU1() STORES UNIT SYSTEM SELECTED BY USER   
C        IU1(1)  -  FOR LENGTH UNIT SYSTEM   
C        IU1(2)  -  FOR VOLUME UNIT SYSTEM   
C        IU1(3)  -  FOR TIME UNIT SYSTEM   
C        IU1(4)  -  FOR PRESSURE UNIT SYSTEM   
C        IU1(5)  -  FOR TEMPERATURE UNIT SYSTEM   
C        IU1(6)  -  FOR MASS UNIT SYSTEM   
C        IU1(7)  -  FOR PERMEABILITY UNIT SYSTEM   
C   
C     2. XU2() STORES UNIT CONVERTIONS   
C        XU2(1,1) - XU2(1,10) :  FOR LENGTH UNITS   
C        XU2(2,1) - XU2(2,10) :  FOR VOLUME UNITS   
C        XU2(3,1) - XU2(3,10) :  FOR TIME UNITS    
C        XU2(4,1) - XU2(4,10) :  FOR PRESSURE UNITS   
C        XU2(5,1) - XU2(5,10) :  FOR TEMPERATURE UNITS   
C        XU2(6,1) - XU2(6,10) :  FOR MASS UNITS   
C        XU2(7,1) - XU2(7,10) :  FOR PERMEABILITY UNITS   
C   
C     3. IU3() STORES UNIT DESCRIPTIONS   
C        IU3(1,1) - IU3(1,10) :  FOR LENGTH UNITS   
C        IU3(2,1) - IU3(2,10) :  FOR VOLUME UNITS   
C        IU3(3,1) - IU3(3,10) :  FOR TIME UNITS    
C        IU3(4,1) - IU3(4,10) :  FOR PRESSURE UNITS   
C        IU3(5,1) - IU3(5,10) :  FOR TEMPERATURE UNITS   
C        IU3(6,1) - IU3(6,10) :  FOR MASS UNITS   
C        IU3(7,1) - IU3(7,10) :  FOR PERMEABILITY UNITS   
C   
C2A---DEFAULT ARRAYS TO BLANK FIELDS   
C   
      DO 100 I=1,7   
       IU1(I)=0   
 100  CONTINUE   
      DO 101 I=1,7   
       DO 102 J =1,10   
        XU2(I,J)=0.0   
        IU3(I,J)='    '   
 102   CONTINUE   
 101  CONTINUE   
C   
C2B---SPECIFY CONVERTION FACTORS IN ARRAY XU2(I,J)   
C   
C-----SPECIFY LENGTH CONVERTION FACTORS IN ARRAY XU2(1,x)   
C   
C-----CM TO CM, DIVIDE INPUT BY XU2(1,1)   
      XU2(1,1) = 1.0   
C-----DM TO CM, DIVIDE INPUT BY XU2(1,2)   
      XU2(1,2) = 1.0E-01   
C-----M TO CM, DIVIDE INPUT BY XU2(1,3)   
      XU2(1,3) = 1.0E-02   
C-----IN TO CM, DIVIDE INPUT BY XU2(1,4)   
      XU2(1,4) = 3.937E-01   
C-----FT TO CM, DIVIDE INPUT BY XU2(1,5)   
      XU2(1,5) = 3.281E-02   
C-----YD TO CM, DIVIDE INPUT BY XU2(1,5)   
      XU2(1,6) = 1.0936E-02   
C   
C-----SPECIFY VOLUME CONVERTION FACTORS IN ARRAY XU2(2,x)   
C   
C-----CM^3 TO CM^3, DIVIDE INPUT BY XU2(2,1)   
      XU2(2,1) = 1.0   
C-----LITERS TO CM^3, DIVIDE INPUT BY XU2(2,2)   
      XU2(2,2) = 1.0E-03   
C-----M^3 TO CM^3, DIVIDE INPUT BY XU2(2,3)   
      XU2(2,3) = 1.0E-06   
C-----IN^3 TO CM^3, DIVIDE INPUT BY XU2(2,4)   
      XU2(2,4) = 6.1024E-02   
C-----FT^3 TO CM^3, DIVIDE INPUT BY XU2(2,5)   
      XU2(2,5) = 3.5315E-05   
C-----YD^3 TO CM^3, DIVIDE INPUT BY XU2(2,6)   
      XU2(2,6) = 1.3080E-06   
C-----GAL TO CM^3, DIVIDE INPUT BY XU2(2,7)   
      XU2(2,7) = 2.6417E-04   
C   
C-----SPECIFY TIME CONVERTION FACTORS IN ARRAY XU2(3,x)   
C   
C-----SECONDS TO SECONDS, DIVIDE INPUT BY XU2(3,1)   
      XU2(3,1) = 1.0   
C-----MINUTES TO SECONDS, DIVIDE INPUT BY XU2(3,2)   
      XU2(3,2) = 1.6667E-02   
C-----HOURS TO SECONDS, DIVIDE INPUT BY XU2(3,3)   
      XU2(3,3) = 2.7778E-04   
C-----DAYS TO SECONDS, DIVIDE INPUT BY XU2(3,4)   
      XU2(3,4) = 1.1574E-05   
C-----YEARS TO SECONDS, DIVIDE INPUT BY XU2(3,5)   
      XU2(3,5) = 3.1688E-08   
C   
C-----SPECIFY PRESSURE CONVERTION FACTORS IN ARRAY XU2(4,x)   
C   
C-----ATMOSPHERES TO ATMOSPHERES, DIVIDE INPUT BY XU2(4,1)   
      XU2(4,1) = 1.0   
C-----MM MERCURY TO ATMOSPHERES, DIVIDE INPUT BY XU2(4,2)   
      XU2(4,2) = 760.0   
C-----INCHES OF WATER TO ATMOSPHERES, DIVIDE INPUT BY XU2(4,3)   
      XU2(4,3) = 406.38   
C-----KILOPASCALS TO ATMOSPHERES, DIVIDE INPUT BY XU2(4,4)   
      XU2(4,4) = 101.325   
C-----POUNDS PER SQ INCH TO ATMOSPHERES, DIVIDE INPUT BY XU2(4,5)   
      XU2(4,5) = 14.70   
C   
C-----SPECIFY TEMPERTURE CONVERTION FACTORS IN ARRAY XU2(5,x)   
C   
C-----DEGREES CELSIUS TO DEGREES CELSIUS, SUBRACT XU2(5,1) FROM INPUT   
      XU2(5,1) = 0.0   
C       AND DIVIDE BY XU2(5,6)   
      XU2(5,6) = 1.0   
C-----KELVIN TO DEGREES CELSIUS, SUBTRACT XU2(5,2) FROM INPUT   
      XU2(5,2) = 273.15   
C       AND DIVIDE BY XU2(5,7)   
      XU2(5,7) = 1.0   
C-----DEGREES FAHRENHEIT TO DEGREES CELSIUS, SUBTRACT XU2(5,3)   
      XU2(5,3) = 32.0   
C       AND DIVIDE BY XU2(5,8)   
      XU2(5,8) = 1.8   
C   
C-----SPECIFY MASS CONVERTION FACTORS IN ARRAY XU2(6,x)   
C   
C-----GRAMS TO GRAMS, DIVIDE INPUT BY XU2(6,1)   
      XU2(6,1) = 1.0   
C-----KILOGRAMS TO GRAMS, DIVIDE INPUT BY XU2(6,2)   
      XU2(6,2) = 1.0E-03   
C-----POUNDS TO GRAMS, DIVIDE INPUT BY XU2(6,3)   
      XU2(6,3) = 2.2046E-03   
C   
C-----SPECIFY PERMEABILITY CONVERTION FACTORS IN ARRAY XU2(7,x)   
C   
C-----CM^2 TO CM^2, DIVIDE INPUT BY XU2(7,1)   
      XU2(7,1) = 1.0   
C-----DM^2 TO CM^3, DIVIDE INPUT BY XU2(7,2)   
      XU2(7,2) = 1.0E-02   
C-----M^2 TO CM^2, DIVIDE INPUT BY XU2(7,3)   
      XU2(7,3) = 1.0E-04   
C-----IN^2 TO CM^2, DIVIDE INPUT BY XU2(7,4)   
      XU2(7,4) = 1.5500E-01   
C-----FT^2 TO CM^2, DIVIDE INPUT BY XU2(7,5)   
      XU2(7,5) = 1.0764E-03   
C-----YD^2 TO CM^2, DIVIDE INPUT BY XU2(7,6)   
      XU2(7,6) = 1.1960E-04   
C-----DARCY TO CM^2, DIVIDE INPUT BY XU2(7,7)   
      XU2(7,7) = 1.0E+08   
C   
C2C---SPECIFY UNIT DESCRIPTIONS IN ARRAY IU3(I,J)   
C   
C-----SPECIFY LENGTH DESCRIPTIONS IN ARRAY IU3(1,x)   
C   
      IU3(1,1) = 'cm'   
      IU3(1,2) = 'dm'   
      IU3(1,3) = 'm'   
      IU3(1,4) = 'in'   
      IU3(1,5) = 'ft'   
      IU3(1,6) = 'yd'   
C   
C-----SPECIFY VOLUME DESCRIPTIONS IN ARRAY IU3(2,x)   
C   
      IU3(2,1) = 'cm^3'   
      IU3(2,2) = 'lit'   
      IU3(2,3) = 'm^3'   
      IU3(2,4) = 'in^3'   
      IU3(2,5) = 'ft^3'   
      IU3(2,6) = 'yd^3'   
      IU3(2,7) = 'gal'   
C   
C-----SPECIFY TIME DESCRIPTIONS IN ARRAY IU3(3,x)   
C   
      IU3(3,1) = 'sec'   
      IU3(3,2) = 'min'   
      IU3(3,3) = 'hr'   
      IU3(3,4) = 'day'   
      IU3(3,5) = 'yr'   
C   
C-----SPECIFY PRESSURE DESCRIPTIONS IN ARRAY IU3(4,x)   
C   
      IU3(4,1) = 'atm'   
      IU3(4,2) = 'mmHg'   
      IU3(4,3) = '"H2O'   
      IU3(4,4) = 'kPa'   
      IU3(4,5) = 'psi'   
C   
C-----SPECIFY TEMPERTURE DESCRIPTIONS IN ARRAY IU3(5,x)   
C   
      IU3(5,1) = 'degC'   
      IU3(5,2) = 'K'   
      IU3(5,3) = 'degF'   
C   
C-----SPECIFY MASS DESCRIPTIONS IN ARRAY IU3(6,x)   
C   
      IU3(6,1) = ' g'   
      IU3(6,2) = 'kg'   
      IU3(6,3) = 'lb'   
C   
C-----SPECIFY PERMEABILITY DESCRIPTIONS IN ARRAY IU3(7,x)   
C   
      IU3(7,1) = 'cm^2'   
      IU3(7,2) = 'dm^2'   
      IU3(7,3) = 'm^2'   
      IU3(7,4) = 'in^2'   
      IU3(7,5) = 'ft^2'   
      IU3(7,6) = 'yd^2'   
      IU3(7,7) = 'drcy'   
C   
C-----STORE OVER FLOW LIMIT IN XU2(1,9)   
C   
      XU2(1,9) = 1.0D-300   
      XU2(1,10) = 1.0D+300   
C   
C-----RETURN   
C   
      RETURN   
      END   
C   
C     *****************   
      SUBROUTINE SETUP(INBAS,IOUT,ISEL1,IMODE,IOUTF,BETA,WAIR,STDATM,   
C     *****************   
     1  PI,DX,RG,VAS,TVAS,RER,RERF,NMAX,PROJECT,DATE,WELLNUM,NR,NRR,   
     2  IOP1,IOP2,B1,XK1,XKR,AR,AR1,DECR,DINC,DINJ,IOP5,ZD,ZL,ZB,RW,   
     3  D1,AKS,XMAX,INFILE,ISEL2,NV,AFRIC,AOUT)   
C   
C1----SPECIFICATIONS :   
C   
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)   
      COMMON/UNITS/XU2(7,10) 
      COMMON/IUNIT/IU1(7),IU3(7,10)   
      CHARACTER*12 DATE,WELLNUM,INFILE,AOUT,AFRIC,AVR1,IU3*4   
      CHARACTER*40 PROJECT,APR1   
C-----DEFAULT FILES TO BLANK FIELDS   
      AOUT   = ' '   
      AFRIC  = ' '   
      ISEL1  = 0   
      ISEL2  = 0   
      NRR = 1000   
C2----UNITS   
C   
C3----DEFINE PHYSICAL CONSTANTS REQUIRED IN ANALYSES   
C   
C     NOTES :   
C     1. WHEN MAKING CHANGES MADE TO ANY OF THESE VARIABLES   
C         REMEMBER TO RECOMPILE PROGRAM.   
C   
C-----DENSITY OF AIR IN G/CM^3   
C     RAIR   = 1.29E-03   
C-----AIR PHASE VISCOSITY IN G/CM-SEC AT TVAS   
      VAS    = 1.76E-04   
C-----AIR TEMPERATURE FOR VAS IN K   
      TVAS   = 293.15   
C-----UNIVERSAL GAS CONSTANT IN G-CM^2/SEC^2-MOL-K   
      RG     = 8.314E07   
C-----AVERAGE MOLECULAR WEIGHT OF AIR G/MOL   
      WAIR   = 28.8   
C-----PI - DIMENSIONLESS   
      PI     = 3.14159265   
C-----STANDARD ATMOSPHERE IN UNITS OF G/CM-SEC^2   
      STDATM = 1013200.0   
C-----DIMENSIONLESS CONSTANT   
      BETA   = 1.0   
C-----LENGTH INCREMENT IN CM   
      DX     = 0.5   
C   
C4---MODE OF DATA INPUT FOR PROGRAM APPLICATION   
C   
C     NOTES :   
C     1. IMODE = 1  FOR DIRECT ENTRY   
C        IMODE = 2  FOR INTERACTIVE   
C   
 78   CONTINUE   
C-----DISPLAY PROGRAM NAME   
      WRITE(IOUT,100)   
      WRITE(IOUT,101)   
      IF(IMODE.EQ.1) THEN   
       WRITE(IOUT,102)   
       WRITE(IOUT,103)   
      END IF   
      IF(IMODE.NE.1) THEN   
       IF(IMODE.EQ.2) WRITE(IOUT,104)INFILE   
       IF(IMODE.EQ.3) WRITE(IOUT,98)INFILE   
      END IF   
C-----PROMPT USER FOR SELECTION   
      WRITE(IOUT,111)   
      WRITE(IOUT,112)   
      WRITE(IOUT,113)   
      WRITE(IOUT,114)   
      WRITE(IOUT,115)   
      WRITE(IOUT,116)   
      READ(INBAS,117,IOSTAT=K1,ERR=78)IMODE   
      IF((IMODE.NE.1).AND.(IMODE.NE.2).AND.(IMODE.NE.3).AND.   
     1   (IMODE.NE.4)) THEN   
       IMODE = 0   
       GO TO 78   
      END IF   
C-----END PROGRAM   
      IF(IMODE.EQ.4) THEN   
       STOP   
      END IF   
 100  FORMAT(///////////////,T25,'AIR2D (Version 1.0)')   
 101  FORMAT(T25,'=====  =========== ')   
 102  FORMAT(/,T25,'by   CRAIG JOSS')   
 103  FORMAT(T25,'     ARTHUR BAEHR')   
 104  FORMAT(//,T10,A12,' HAS BEEN MODIFIED',/)   
 98   FORMAT(//,T10,A12,' HAS BEEN CREATED',/)   
 111  FORMAT(/,T10,'SELECT  :')   
 112  FORMAT(/,T10,'1.  TO RUN AIR2D USING AN EXISTING DATA FILE')   
 113  FORMAT(//,T10,'2.  TO MODIFY AN EXISTING DATA FILE')   
 114  FORMAT(/,T10,'3.  TO CREATE A NEW DATA FILE')   
 115  FORMAT(//,T10,'4.  TO END PROGRAM')   
 116  FORMAT(///,T10,'PLEASE SELECT NUMBER  1, 2, 3  OR  4  :  ')   
 117  FORMAT(I1)   
C   
C5----USER SELECTION MENU   
C   
C     NOTES :   
C     1. MENU OPTION FOR PROGRAM APPLICATION SELECTION.   
C         IE. PROMPTS USER TO SELECT OPTION.   
C   
 79   CONTINUE   
      WRITE(IOUT,81)   
      WRITE(IOUT,82)   
      WRITE(IOUT,83)   
      WRITE(IOUT,84)   
      WRITE(IOUT,85)   
      WRITE(IOUT,86)   
      WRITE(IOUT,87)   
C     WRITE(IOUT,88)   
      WRITE(IOUT,89)   
      READ(INBAS,90,IOSTAT=K1,ERR=79)ISEL1   
C-----TEST USER INPUT   
      IF((ISEL1.NE.1).AND.(ISEL1.NE.2).AND.(ISEL1.NE.3).AND.   
     1 (ISEL1.NE.4)) THEN   
       ISEL1 = 0   
       GO TO 79   
      END IF   
C-----END PROGRAM   
      IF(ISEL1.EQ.5) THEN   
       STOP   
      END IF   
 81   FORMAT(///////////////////////////,T25,'AIR2D APPLICATION',   
     1       ' MENU')   
 82   FORMAT(T25,'===== =========== ====')   
 83   FORMAT(///,T10,'SELECT  :')   
 84   FORMAT(//,T10,'1.  TO ANALZE FULL-SCALE PERMEABILITY DATA')   
 85   FORMAT(/,T10,'2.  TO ANALYZE MINI-PERMEABILITY DATA')   
 86   FORMAT(/,T10,'3.  TO EVALUATE PIPE FRICTION FACTOR')   
 87   FORMAT(/,T10,'4.  TO PREDICT PRESSURE AND FLOW IN DOMAIN')   
C88   FORMAT(//,T10,'5.  TO END PROGRAM')   
 89   FORMAT(///,T10,'PLEASE SELECT NUMBER 1, 2, 3,  OR  4  :  ')   
 90   FORMAT(I1)   
C   
C6----FRICTION FACTOR EVALUATION FROM EXPERIMENT OR THEORY   
C   
C     NOTES :   
C     1. INPUT AND MODIFY VALUES OF ISEL2   
C     2. ISEL2 IS REDEFINED TO CORRESPOND WITH ISEL2 INPUT    
C         IN MINI-PERM SECTION (IE. ISEL1=2)   
C   
 91   CONTINUE   
      IF (ISEL1.EQ.3) THEN   
       WRITE(IOUT,93)   
       WRITE(IOUT,94)   
       WRITE(IOUT,95)   
       WRITE(IOUT,96)   
       WRITE(IOUT,97)   
       READ(INBAS,90)ISEL2   
C------TEST USER INPUT   
       IF((ISEL2.EQ.1).OR.(ISEL2.EQ.2)) GO TO 92   
       ISEL2 = 0   
       GO TO 91   
 92    CONTINUE   
       IF (ISEL2.EQ.2) THEN   
        ISEL2 = 3   
       END IF   
       IF (ISEL2.EQ.1) THEN   
        ISEL2 = 2   
       END IF   
      END IF   
 93   FORMAT(///////////,T25,'FRICTION FACTOR EVALUATION')   
 94   FORMAT(///,T10,'SELECT  :')   
 95   FORMAT(/,T10,'1.  FOR FRICTION FACTOR PREDICTIONS BASED',   
     1 ' ON EXPERIMENTAL METHODS')   
 96   FORMAT(/,T10,'2.  FOR FRICTION FACTOR PREDICTIONS BASED',   
     1 ' ON THEORETICAL METHODS')   
 97   FORMAT(///,T10,'PLEASE SELECT NUMBER  1  OR  2  :  ')   
C   
C7----READ IN PERMEABILITY TEST DATA FROM SPECIFIED DATA FILE   
C   
C     NOTES  :   
C     1. DIRECT INPUT FOR    
C        - FULL-SCALE PERMEABILITY TEST (ISEL1 = 1)   
C        - MINI PERMEABILITY TEST (ISEL1 = 2)   
C        - FRICTION FACTOR EVALUATION (ISEL1 = 3)   
C        - PREDICTIVE MODE (ISEL1 = 4)   
C     2. OUTPUT FILE  "AOUT"  STORES :   
C        - Kr & Kv PERMEABILITY ESTMATES FOR ISEL1 = 1   
C        - Kr PERMEABILITY ESTMATES FOR ISEL1 = 2   
C        - FRICTION FACTOR OUTPUT FOR EXPERIMENTAL DETERMINATIONS   
C           (IS NOT USED FOR THEORETICAL PREDICTIONS)   
C        - IS NOT USED FOR ISEL1 = 4 SINCE OUTPUT IS   
C           WRITTEN TO FILE SPECIFIED IN OPVSR, OVVSR & OMVSR   
C     3. INPUT FILE  "AFRIC"  STORES :   
C        - IS NOT USED SINCE PROBE PRESSURES   
C           ARE MEASURED DIRECTLY FOR ISEL1 = 1   
C        - REYNOLDS NUMBER-FRICTION FACTOR CORRELATIONS,   
C           USED TO INTERPOLATE FRICTION FACTORS APPLYING   
C           TO MINI-PERM TEST CONDITIONS FOR ISEL1 = 2   
C           (NOTE IF AFRIC = 'THEORY' THEN COLEBROOK-   
C            WHITE EQN WILL BE USED TO APPROXIMATE   
C            FRICTION FACTORS)   
C        - REYNOLDS NUMBER-FRICTION FACTOR CORRELATIONS   
C           GENERATED FROM EXPERIMENTAL OR THEORETICAL   
C           METHODS FOR ISEL1 = 3   
C        - IS NOT USED FOR ISEL1 = 4   
C     4. DINJ = INJECTION (+1) OR EXTRACTION (-1) FOR    
C         EXPERIMENTAL METHOD (NOTE THAT AKS IS NOT   
C         REQUIRED FOR EXPERIMENTAL METHOD)   
C      - DINJ USED TO STORE AKS FOR THEORETICAL METHOD   
C         (NOTE THAT DINJ IS NOT REQUIRED FOR EXPERIMENTAL   
C          METHOD)   
C   
 401  CONTINUE   
      IF (IMODE.EQ.1) THEN   
       WRITE(IOUT,105)   
      END IF   
      IF (IMODE.EQ.2) THEN   
       WRITE(IOUT,106)   
      END IF   
      IF (IMODE.EQ.3) THEN   
       WRITE(IOUT,107)   
      END IF   
      READ(INBAS,121,IOSTAT=K1,ERR=401)INFILE   
 105  FORMAT(///,T10,'ENTER NAME OF FILE WITH TEST DATA : ')   
 106  FORMAT(///,T10,'ENTER NAME OF DATA FILE TO BE MODIFIED  : ')   
 107  FORMAT(///,T10,'ENTER NAME OF DATA FILE TO BE SET UP  : ')   
      OPEN(UNIT=8,FILE=INFILE,STATUS='UNKNOWN')   
      REWIND 8   
      IF (IMODE.NE.3) THEN   
       IF((ISEL1.NE.4).AND.((ISEL1.NE.3).OR.(ISEL2.NE.3))) THEN   
        READ (8,120,IOSTAT=K1,ERR=402,END=403)PROJECT   
        READ (8,121,IOSTAT=K1,ERR=402,END=403)DATE   
        READ (8,121,IOSTAT=K1,ERR=402,END=403)WELLNUM   
       END IF   
       READ (8,122,IOSTAT=K1,ERR=402,END=403)DINJ,AOUT,AFRIC   
       IF((ISEL1.EQ.2).AND.(AFRIC.EQ.'THEORY')) THEN   
        ISEL2=3   
        NV = 1   
       END IF   
       READ (8,123,IOSTAT=K1,ERR=402,END=403)NR,IOP1,IOP2,IU1(1),   
     1       IU1(2),IU1(3),IU1(4),IU1(5),IU1(6),IU1(7)   
       IF((ISEL1.NE.4).AND.(NR.GT.20)) THEN   
        WRITE(IOUT,108)   
        WRITE(IOUT,109)   
        STOP   
       END IF   
 108   FORMAT(//////,T10,'NUMBER OF FLOW RATES IN INPUT FILE (NR) ',   
     1   'EXCEEDS 10')   
 109   FORMAT(/,T10,'EITHER, REDUCE (NR) TO 10, OR, REDEFINE ',   
     1   'LENS IN PROGRAM')   
       IF(ISEL1.EQ.3) THEN   
        IU1(5)=IU1(3)   
        IU1(6)=IU1(4)   
        IU1(3)=IU1(1)   
        IU1(4)=IU1(2)   
        IU1(1)=IOP1   
        IU1(2)=IOP2   
       END IF   
C------SET UNITS TO DEFAULT SYSTEM IF NO ENTRY MADE   
       IF((IU1(1).LT.2).OR.(IU1(1).GT.6)) IU1(1)=1   
       IF((IU1(2).LT.2).OR.(IU1(2).GT.7)) IU1(2)=1   
       IF((IU1(3).LT.2).OR.(IU1(3).GT.5)) IU1(3)=1   
       IF((IU1(4).LT.2).OR.(IU1(4).GT.5)) IU1(4)=1   
       IF((IU1(5).LT.2).OR.(IU1(5).GT.3)) IU1(5)=1   
       IF((IU1(6).LT.2).OR.(IU1(6).GT.3)) IU1(6)=1   
       IF((IU1(7).LT.2).OR.(IU1(7).GT.7)) IU1(7)=1   
       READ (8,124,IOSTAT=K1,ERR=402,END=403)NMAX,RER,RERF   
       IF (ISEL1.EQ.3) THEN   
        READ (8,128,IOSTAT=K1,ERR=402,END=403)D1,XMAX   
C-------CONVERT INPUT UNITS TO DEFAULT UNITS   
        D1 = D1/XU2(1,IU1(1))   
        XMAX = XMAX/XU2(1,IU1(1))   
        IF (ISEL2.EQ.3) THEN   
         AKS   = DINJ   
         AFRIC = AOUT   
         DINJ  = 1.0   
        END IF   
        GO TO 411   
       END IF   
       READ (8,125,IOSTAT=K1,ERR=402,END=403)B1,XK1   
C------CONVERT INPUT UNITS TO DEFAULT UNITS   
       B1 = B1/XU2(1,IU1(1))   
       XK1 = XK1/XU2(7,IU1(7))   
       READ (8,125,IOSTAT=K1,ERR=402,END=403)AR,XKR   
C------CONVERT INPUT UNITS TO DEFAULT UNITS   
       XKR = XKR/XU2(7,IU1(7))   
       AR1=AR   
       IF (ISEL1.NE.4) THEN   
        READ (8,126,IOSTAT=K1,ERR=402,END=403)DECR,DINC   
       END IF   
       READ (8,127,IOSTAT=K1,ERR=402,END=403)ZD,ZL,ZB,RW,D1,AKS   
C------CONVERT INPUT UNITS TO DEFAULT UNITS   
       ZD = ZD/XU2(1,IU1(1))   
       ZL = ZL/XU2(1,IU1(1))   
       ZB = ZB/XU2(1,IU1(1))   
       RW = RW/XU2(1,IU1(1))   
       D1 = D1/XU2(1,IU1(1))   
       XMAX = (ZD+ZL)/2.0   
 411   CONTINUE   
C------DO NOT PLOT NORMALIZED PRESSURE IN PARAMETER EVALUATION MODE   
       IOP5 = 0   
C------ALWAYS PLOT NORMALIZED PRESSURE IN PREDICTIVE MODE   
       IF (ISEL1.EQ.4) THEN   
        IOP5 = 1   
       END IF   
C   
C------CHECK INPUT DATA   
C   
       IF((DABS(DINJ).GT.1.01).OR.(DABS(DINJ).LT.0.99)) THEN   
        WRITE(IOUT,130)   
 130    FORMAT('ERROR IN SPECIFYING DINJ - MUST BE 1.0 OR -1.0')   
        STOP   
       END IF   
C------CHECK STATUS OF INPUT DATA   
       IF (K1.EQ.0) GO TO 404   
 402   CALL ERRMES(IOUT,INBAS,INFILE,IER1)   
       IF(IER1.EQ.1) GO TO 401   
 403   CALL ENDMES(IOUT,INBAS,INFILE,IER1)   
       IF(IER1.EQ.1) GO TO 401   
 404   CONTINUE   
      END IF   
 120  FORMAT(A40)   
 121  FORMAT(A12)   
 122  FORMAT(F10.6,2A12)   
 123  FORMAT(10I5)   
 124  FORMAT(I10,2E10.3)   
 125  FORMAT(F10.3,E10.3)   
 126  FORMAT(2F10.4)   
 127  FORMAT(5F10.3,F10.6)   
 128  FORMAT(2F10.3)   
C   
C------USER MESSAGE FOR INTERACTIVE MODE   
C   
      IF(IMODE.EQ.2) THEN   
       WRITE(IOUT,63)INFILE   
       WRITE(IOUT,65)   
       WRITE(IOUT,66)   
      END IF   
      IF(IMODE.EQ.3) THEN   
       WRITE(IOUT,64)INFILE   
       WRITE(IOUT,67)   
      END IF   
 63   FORMAT(///,T10,'NOTE  :  WHEN MODIFYING INPUT FILE ',A12)   
 64   FORMAT(///,T10,'NOTE  :  WHEN CREATING INPUT FILE ',A12)   
 65   FORMAT(/,T10,'   a)    PRESS ENTER TO RETAIN DISPLAYED ',   
     1             'VALUE,   OR,')   
 66   FORMAT(/,T10,'   b)    RE-ENTER NEW VALUE TO MODIFY',//)   
 67   FORMAT(/,T19,'ENTER ALL DATA VALUES REQUESTED',//)   
C   
C8---SPECIFY FRICTION FACTOR OUTPUT FILE   
C   
 415  CONTINUE   
      IVAR1 = 0   
      IF ((ISEL1.EQ.3).AND.(AFRIC.EQ.' ')) THEN   
       WRITE(IOUT,151)   
       WRITE(IOUT,152)   
       WRITE(IOUT,153)   
       WRITE(IOUT,154)   
       WRITE(IOUT,155)   
       WRITE(IOUT,156)   
       WRITE(IOUT,157)   
       WRITE(IOUT,158)   
       READ(INBAS,159,IOSTAT=K1,ERR=415) IVAR1   
       IF((IVAR1.NE.1).AND.(IVAR1.NE.2)) IVAR1 = 2   
      END IF   
 151  FORMAT(/////,T10,'AN OPTION EXISTS TO GENERATE A FILE')   
 152  FORMAT(T10,'CONTAINING REYNOLDS NUMBER VS FRICTION')   
 153  FORMAT(T10,'RELATIONSHIPS THAT MAY BE USED DIRECTLY')   
 154  FORMAT(T10,'IN MINI-PERMEABILITY SIMULATIONS.')   
 155  FORMAT(////,T10,'SELECT  :')   
 156  FORMAT(/,T10,'1.  TO GENERATE REYNOLD # VS. FRICTION',   
     1 ' FACTOR FILE')   
 157  FORMAT(/,T10,'2.  TO SKIP THIS OPTION')   
 158  FORMAT(//////,T10,'PLEASE SELECT NUMBER  1  OR  2  :  ')   
 159  FORMAT(I2)   
C-----FOR EDIT, OPTION TO CHANGE NAME FOR FRIC FACTOR OUTPUT FILE   
      IF ((ISEL1.EQ.3).AND.(AFRIC.NE.' ').AND.(IMODE.EQ.2)) THEN   
       AVR1 = AFRIC   
       WRITE(IOUT,160)AVR1   
       READ(INBAS,162)AVR1   
       IF(AVR1.NE.' ')AFRIC = AVR1   
      END IF   
C-----IF SELECTED, SPECIFY FILE NAME FOR DATA OUTPUT   
      IF ((ISEL1.EQ.3).AND.(IVAR1.EQ.1))  THEN   
       WRITE(IOUT,161)   
       READ(INBAS,162)AFRIC   
      END IF   
      IF ((ISEL1.EQ.3).AND.(AFRIC.NE.' ').AND.(IMODE.EQ.1)) THEN   
       IVAR1 = 1   
       OPEN(UNIT=11,FILE=AFRIC)   
       IOUTF = 11   
       WRITE(IOUTF,163) NR   
      END IF   
 160  FORMAT(//,T10,'ENTER NAME OF REYNOLD-FRICTION OUTPUT FILE,',   
     1  '  EG ',A12)   
 161  FORMAT(//,T10,'ENTER NAME OF FILE : ')   
 162  FORMAT(A12)   
 163  FORMAT(I3)   
C-----IF SELECTED, SPECIFY SCREEN FOR DATA OUTPUT   
      IF ((ISEL1.EQ.3).AND.(IVAR1.NE.1).AND.(IMODE.EQ.1)) THEN   
       IOUTF = IOUT   
      END IF   
C   
C9----CHECK FOR SOURCE OF FRICTION FACTOR DATA   
C   
 430  CONTINUE   
      IF ((ISEL1.EQ.2).AND.(AFRIC.EQ.' ')) THEN   
       WRITE(IOUT,171)   
       WRITE(IOUT,172)   
       WRITE(IOUT,173)   
       WRITE(IOUT,174)   
       WRITE(IOUT,175)   
       WRITE(IOUT,176)   
       WRITE(IOUT,178)   
       WRITE(IOUT,179)   
       WRITE(IOUT,180)   
       WRITE(IOUT,181)   
       WRITE(IOUT,182)   
       WRITE(IOUT,183)   
       WRITE(IOUT,184)   
       IF (IMODE.EQ.1) THEN   
        WRITE(IOUT,185)   
       END IF   
       IF (IMODE.NE.1) THEN   
        WRITE(IOUT,189)   
       END IF   
       READ(INBAS,190,IOSTAT=K1,ERR=430)ISEL2   
       IF((ISEL2.EQ.1).OR.(ISEL2.EQ.2).OR.(ISEL2.EQ.3)) GO TO 431   
       ISEL2 = 0   
       GO TO 79   
 431   CONTINUE   
      END IF   
 171  FORMAT(////////////////////////,T25,'FRICTION FACTOR DATA')   
 172  FORMAT(T25,'======== ====== ====')   
 173  FORMAT(/,T10,'IN ORDER TO PERFORM THE ANALYSIS ON DATA ',   
     1 'COLLECTED')   
 174  FORMAT(T10,'FROM MINI-PERMEABILITY TESTS, THE USER MUST INPUT')   
 175  FORMAT(T10,'FRICTION FACTORS FOR EACH FLOW RATE MONITORED.')   
 176  FORMAT(/,T10,'PLEASE SPECIFY  :')   
 178  FORMAT(/,T10,'1.  IF FRICTION FACTORS ARE TO BE SPECIFIED')   
 179  FORMAT(T10,'      INTERACTIVELY FOR EACH FLOW RATE,')   
 180  FORMAT(/,T10,'2.  IF THE NAME OF A FILE (CONTAINING REYNOLDS')   
 181  FORMAT(T10,'      NUMBER VERSUS FRICTION FACTOR CORRELATION')   
 182  FORMAT(T10,'      DATA) IS TO BE SPECIFIED')   
 183  FORMAT(/,T10,'3.  IF FRICTION FACTORS ESTIMATES ARE TO BE ',   
     1         'GENERATED')   
 184  FORMAT(T10,'      USING THEORETICAL RELATIONSHIPS')   
 185  FORMAT(//,T10,'4.  TO RETURN TO MAIN MENU')   
 188  FORMAT(/,T10,'PLEASE SELECT NUMBER  1,  2,  3  OR  4  :  ')   
 189  FORMAT(/,T10,'PLEASE SELECT NUMBER  1,  2,  OR  3  :  ')   
 190  FORMAT(I1)   
C   
C10---SET MARKER TO USE THEORETICAL APPROX TO FRICTION FACTOR   
C   
      IF ((ISEL1.EQ.2).AND.(ISEL2.EQ.3)) THEN   
       AFRIC = 'THEORY'   
       NV = 1   
      END IF   
C   
C11---CHECK FOR PRESENCE OF FRICTION FACTOR DATA FILE   
C   
C-----FOR EDIT, OPTION TO CHANGE NAME FOR FRIC FACTOR OUTPUT FILE   
      IF ((ISEL1.EQ.2).AND.(AFRIC.NE.' ').AND.(IMODE.EQ.2)) THEN   
       AVR1 = AFRIC   
       WRITE(IOUT,195)AVR1   
       READ(INBAS,211)AVR1   
       IF(AVR1.NE.' ')AFRIC = AVR1   
      END IF   
 441  CONTINUE   
      IF ((ISEL1.EQ.2).AND.(ISEL2.EQ.2)) THEN   
       WRITE(IOUT,191)   
       READ(INBAS,192)AFRIC   
      END IF   
      IF ((ISEL1.EQ.2).AND.(AFRIC.NE.' ').AND.   
     1   (AFRIC.NE.'THEORY').AND.(IMODE.EQ.1)) THEN   
       OPEN(UNIT=10,FILE=AFRIC)   
       REWIND 10   
       READ(10,193,IOSTAT=K1,ERR=442,END=443)NV   
       IF (K1.EQ.0) GO TO 444   
 442   CALL ERRMES(IOUT,INBAS,AFRIC,IER1)   
       IF(IER1.EQ.1) GO TO 441   
 443   CALL ENDMES(IOUT,INBAS,AFRIC,IER1)   
       IF(IER1.EQ.1) GO TO 441   
 444   CONTINUE   
      END IF   
 191  FORMAT(//,T10,'ENTER NAME OF THE FRICTION FACTOR DATA FILE :  ')   
 192  FORMAT(A12)   
 193  FORMAT(I3)   
 195  FORMAT(//,T10,'ENTER NAME OF REYNOLD-FRICTION INPUT FILE,',   
     1  '  EG ',A12)   
 210  FORMAT(A40)   
 211  FORMAT(A12)   
 212  FORMAT(I1)   
 213  FORMAT(F20.0)   
 214  FORMAT(I2)   
 215  FORMAT(I10)   
C   
C12---INPUT TEST DATA -  INTERACTIVE OPTION   
C   
      IF (IMODE.NE.1) THEN   
C   
C12a---DEFINE UNIT SYSTEM   
C   
 500   CONTINUE   
       IVR1 = 0   
       WRITE(IOUT,240)IVR1   
 240   FORMAT(' ENTER  0  FOR DEFAULT (CGS) UNITS OR  1  TO CHANGE',   
     1  ' UNITS  EG ',I1)   
       READ(INBAS,212,IOSTAT=K1,ERR=500) IUSEL   
       IF(IUSEL.EQ.1) THEN   
C-------LENGTH UNIT SYSTEM   
 505    CONTINUE   
        IVR1 = 1   
        IF(IMODE.EQ.2) IVR1 = IU1(1)   
        WRITE(IOUT,245)IVR1   
        WRITE(IOUT,246)   
 245    FORMAT(' ENTER SELECTION FOR LENGTH UNITS  EG ',I1)   
 246    FORMAT(' 1 (CM)  2 (DM)  3 (M)  4 (IN)  5 (FT)  6 (YD) : ')   
        READ(INBAS,212,IOSTAT=K1,ERR=505) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
         IU1(1) = IVR1   
        END IF   
        IF((IU1(1).NE.0).AND.(IU1(1).NE.1).AND.(IU1(1).NE.2).AND.   
     1     (IU1(1).NE.3).AND.(IU1(1).NE.4).AND.(IU1(1).NE.5).AND.   
     1     (IU1(1).NE.6)) GO TO 505   
        IF((ISEL1.EQ.3).AND.(ISEL2.EQ.3)) GO TO 539   
C-------VOLUME UNIT SYSTEM   
 510    CONTINUE   
        IVR1 = 1   
        IF(IMODE.EQ.2) IVR1 = IU1(2)   
        WRITE(IOUT,250)IVR1   
        WRITE(IOUT,251)   
 250    FORMAT(' ENTER SELECTION FOR VOLUME UNITS  EG ',I1)   
 251    FORMAT(' 1 (CM^3)  2 (LIT)  3 (M^3)  4 (IN^3)  5 (FT^3) ',   
     1         ' 6 (YD^3)  7 (GAL) : ')   
        READ(INBAS,212,IOSTAT=K1,ERR=510) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
         IU1(2) = IVR1   
        END IF   
        IF((IU1(2).NE.0).AND.(IU1(2).NE.1).AND.(IU1(2).NE.2).AND.   
     1     (IU1(2).NE.3).AND.(IU1(2).NE.4).AND.(IU1(2).NE.5).AND.   
     1     (IU1(2).NE.6).AND.(IU1(2).NE.7)) GO TO 510   
C-------TIME UNIT SYSTEM   
 515    CONTINUE   
        IVR1 = 1   
        IF(IMODE.EQ.2) IVR1 = IU1(3)   
        WRITE(IOUT,255)IVR1   
        WRITE(IOUT,256)   
 255    FORMAT(' ENTER SELECTION FOR TIME UNITS  EG ',I1)   
 256    FORMAT(' 1 (SEC)  2 (MIN)  3 (HR)  4 (DAY)  5 (YR) : ')   
        READ(INBAS,212,IOSTAT=K1,ERR=515) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
         IU1(3) = IVR1   
        END IF   
        IF((IU1(3).NE.0).AND.(IU1(3).NE.1).AND.(IU1(3).NE.2).AND.   
     1     (IU1(3).NE.3).AND.(IU1(3).NE.4).AND.(IU1(3).NE.5))   
     1     GO TO 515   
C-------PRESSURE UNIT SYSTEM   
 520    CONTINUE   
        IVR1 = 1   
        IF(IMODE.EQ.2) IVR1 = IU1(4)   
        WRITE(IOUT,260)IVR1   
        WRITE(IOUT,261)   
 260    FORMAT(' ENTER SELECTION FOR PRESSURE UNITS  EG ',I1)   
 261    FORMAT(' 1 (ATM)  2 (mmHg)  3 ("H20)  4 (KPA)  5 (PSI) : ')   
        READ(INBAS,212,IOSTAT=K1,ERR=520) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
         IU1(4) = IVR1   
        END IF   
        IF((IU1(4).NE.0).AND.(IU1(4).NE.1).AND.(IU1(4).NE.2).AND.   
     1     (IU1(4).NE.3).AND.(IU1(4).NE.4).AND.(IU1(4).NE.5))   
     1     GO TO 520   
C-------TEMPERATURE UNIT SYSTEM   
 525    CONTINUE   
        IVR1 = 1   
        IF(IMODE.EQ.2) IVR1 = IU1(5)   
        WRITE(IOUT,265)IVR1   
        WRITE(IOUT,266)   
 265    FORMAT(' ENTER SELECTION FOR TEMPERATURE UNITS  EG ',I1)   
 266    FORMAT(' 1 (degC)  2 (K)  3 (degF) : ')   
        READ(INBAS,212,IOSTAT=K1,ERR=525) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
         IU1(5) = IVR1   
        END IF   
        IF((IU1(5).NE.0).AND.(IU1(5).NE.1).AND.(IU1(5).NE.2).AND.   
     1     (IU1(5).NE.3)) GO TO 525   
C-------MASS UNIT SYSTEM   
 530    CONTINUE   
        IVR1 = 1   
        IF(IMODE.EQ.2) IVR1 = IU1(6)   
        WRITE(IOUT,270)IVR1   
        WRITE(IOUT,271)   
 270    FORMAT(' ENTER SELECTION FOR MASS UNITS  EG ',I1)   
 271    FORMAT(' 1 (G)  2 (KG)  3 (LB) : ')   
        READ(INBAS,212,IOSTAT=K1,ERR=530) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
         IU1(6) = IVR1   
        END IF   
        IF((IU1(6).NE.0).AND.(IU1(6).NE.1).AND.(IU1(6).NE.2).AND.   
     1     (IU1(6).NE.3)) GO TO 530   
C-------PERMEABILITY UNIT SYSTEM   
        IF(ISEL1.NE.3) THEN   
 535     CONTINUE   
         IVR1 = 1   
         IF(IMODE.EQ.2) IVR1 = IU1(7)   
         WRITE(IOUT,275)IVR1   
         WRITE(IOUT,276)   
 275     FORMAT(' ENTER SELECTION FOR PERMEABILITY UNITS  EG ',I1)   
 276     FORMAT(' 1 (CM^2)  2 (DM^2)  3 (M^2)  4 (IN^2)  5 (FT^2) ',   
     1          ' 6 (YD^2)  7 (DRCY)  : ')   
         READ(INBAS,212,IOSTAT=K1,ERR=535) IVR1   
         IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
          IU1(7) = IVR1   
         END IF   
         IF((IU1(7).NE.0).AND.(IU1(7).NE.1).AND.(IU1(7).NE.2).AND.   
     1      (IU1(7).NE.3).AND.(IU1(7).NE.4).AND.(IU1(7).NE.5).AND.   
     1      (IU1(7).NE.6).AND.(IU1(7).NE.7)) GO TO 535   
        END IF   
       END IF   
C------SET UNITS TO DEFAULT SYSTEM IF NO ENTRY MADE   
 539   CONTINUE   
       IF((IU1(1).LT.2).OR.(IU1(1).GT.6)) IU1(1)=1   
       IF((IU1(2).LT.2).OR.(IU1(2).GT.7)) IU1(2)=1   
       IF((IU1(3).LT.2).OR.(IU1(3).GT.5)) IU1(3)=1   
       IF((IU1(4).LT.2).OR.(IU1(4).GT.5)) IU1(4)=1   
       IF((IU1(5).LT.2).OR.(IU1(5).GT.3)) IU1(5)=1   
       IF((IU1(6).LT.2).OR.(IU1(6).GT.3)) IU1(6)=1   
       IF((IU1(7).LT.2).OR.(IU1(7).GT.7)) IU1(7)=1   
C   
C12b---READ IN OUTPUT FILE NAME   
C   
       IF((ISEL1.NE.4).AND.((ISEL1.NE.3).OR.(ISEL2.NE.3))) THEN   
 445    CONTINUE   
        AVR1='AIR2D.OUT'   
        IF(IMODE.EQ.2) AVR1 = AOUT   
        WRITE(IOUT,119)AVR1   
 119    FORMAT(' ENTER NAME OF OUTPUT FILE  EG ',A12)   
        READ(INBAS,211,IOSTAT=K1,ERR=445) AVR1   
        IF(((IMODE.EQ.2).AND.(AVR1.NE.' ' )).OR.(IMODE.EQ.3)) THEN   
         AOUT = AVR1   
        END IF   
C   
C12c----READ IN PROJECT TITLE, DATE, LOCATION   
C   
C-------PROJECT NAME   
 450    CONTINUE   
        APR1 = 'VENTING PROJECT #1'   
        IF(IMODE.EQ.2) APR1 = PROJECT   
        WRITE(IOUT,220)APR1   
 220    FORMAT(' ENTER PROJECT NAME/TITLE  EG ',A40)   
        READ(INBAS,210,IOSTAT=K1,ERR=450) APR1   
        IF(((IMODE.EQ.2).AND.(APR1.NE.' ' )).OR.(IMODE.EQ.3)) THEN   
         PROJECT = APR1   
        END IF   
C-------PROJECT DATE   
 455    CONTINUE   
        AVR1 = '02/02/1992'   
        IF(IMODE.EQ.2) AVR1 = DATE   
        WRITE(IOUT,225) AVR1   
 225    FORMAT(' ENTER PROJECT DATE  EG ',A12)   
        READ(INBAS,211,IOSTAT=K1,ERR=455) AVR1   
        IF(((IMODE.EQ.2).AND.(AVR1.NE.' ' )).OR.(IMODE.EQ.3)) THEN   
         DATE = AVR1   
        END IF   
C-------WELL NUMBER   
        IF (ISEL1.NE.3) THEN   
 460     CONTINUE   
         AVR1 = 'VW-10'   
         IF(IMODE.EQ.2) AVR1 = WELLNUM   
         WRITE(IOUT,230) AVR1   
 230     FORMAT(' ENTER WELL NUMBER  EG ',A12)   
         READ(INBAS,211,IOSTAT=K1,ERR=460) AVR1   
         IF(((IMODE.EQ.2).AND.(AVR1.NE.' ' )).OR.(IMODE.EQ.3)) THEN   
          WELLNUM = AVR1   
         END IF   
        END IF   
C-------PIPE NUMBER   
        IF ((ISEL1.EQ.3).AND.(ISEL2.NE.3)) THEN   
 465     CONTINUE   
         AVR1 = 'PIPE #1'   
         IF(IMODE.EQ.2) AVR1 = WELLNUM   
         WRITE(IOUT,235) AVR1   
 235     FORMAT(' ENTER PIPE IDENTIFICATION NUMBER  EG ',A12)   
         READ(INBAS,211,IOSTAT=K1,ERR=465) AVR1   
         IF(((IMODE.EQ.2).AND.(AVR1.NE.' ' )).OR.(IMODE.EQ.3)) THEN   
          WELLNUM = AVR1   
         END IF   
        END IF   
       END IF   
C   
C12d---OPERATIONAL PARAMETERS   
C   
C------RELATIVE CLOSURE ERROR FOR CALIBRATION MODE   
       IF (ISEL1.NE.4) THEN   
 555    CONTINUE   
        XV1=1.0E-05   
        IF(IMODE.EQ.2)XV1=RER   
        WRITE(IOUT,295)XV1   
 295    FORMAT(' ENTER RELATIVE ERROR FOR CLOSURE  EG',E10.3,' ')   
        READ(INBAS,213,IOSTAT=K1,ERR=555) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         RER=XV1   
        END IF   
       END IF   
C------RELATIVE CLOSURE ERROR FOR PREDICTIVE MODE   
       IF (ISEL1.EQ.4) THEN   
 560    CONTINUE   
        XV1=1.0E-05   
        IF(IMODE.EQ.2)XV1=RER   
        WRITE(IOUT,300)XV1   
 300    FORMAT(' ENTER RELATIVE CLOSURE ERROR FOR PRESSURE',   
     1         '  EG',E10.3,' ')   
        READ(INBAS,213,IOSTAT=K1,ERR=560) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         RER=XV1   
        END IF   
 561    CONTINUE   
        XV1=1.0E-03   
        IF(IMODE.EQ.2)XV1=RERF   
        WRITE(IOUT,301)XV1   
 301    FORMAT(' ENTER RELATIVE CLOSURE ERROR FOR FLOW',   
     1         '  EG',E10.3,' ')   
        READ(INBAS,213,IOSTAT=K1,ERR=561) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         RERF=XV1   
        END IF   
       END IF   
C------MAXIMUM NUMBER OF ITERATIONS   
 565   CONTINUE   
       IVR1 = 10000000   
       IF(IMODE.EQ.2) IVR1 = NMAX   
       WRITE(IOUT,305)IVR1   
 305   FORMAT(' ENTER MAXIMUM ALLOWABLE ITERATIONS  EG',I10)   
       READ(INBAS,215,IOSTAT=K1,ERR=430) IVR1   
       IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
        NMAX = IVR1   
       END IF   
C   
C12e---FLOW INFORMATION   
C   
C------INJECTION OR WITHDRAWAL   
       IF((ISEL1.NE.3).OR.(ISEL2.NE.3)) THEN   
 570    CONTINUE   
        XV1 = -1.0   
        IF(IMODE.EQ.2) XV1 = DINJ   
        WRITE(IOUT,310)XV1   
 310    FORMAT(' ENTER  -1.0  FOR MASS WITHDRAWAL OR  1.0  FOR ',   
     1         'INJECTION  EG  ',F4.1,' ')   
        READ(INBAS,213,IOSTAT=K1,ERR=570) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          DINJ=XV1   
        END IF   
        IF((DABS(DINJ).GT.1.01).OR.(DABS(DINJ).LT.0.99)) GO TO 570   
       END IF   
C------NUMBER OF FLOW RATE VARIATIONS   
 575   CONTINUE   
       IVR1 = 3   
       IF(IMODE.EQ.2) IVR1 = NR   
       WRITE(IOUT,315)IVR1   
 315   FORMAT(' SPECIFY NUMBER OF VARIATIONS IN FLOW RATES  EG',I2)   
       READ(INBAS,193,IOSTAT=K1,ERR=575) IVR1   
       IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
       IF(IVR1.GT.NR) NRR = NR   
        NR = IVR1   
       END IF   
       IF (NR.LE.0) THEN   
        WRITE(IOUT,316)NR   
 316    FORMAT(////,' NR MUST AN INTEGER GREATER THAN ZERO')   
        GO TO 575   
       END IF   
       IF((ISEL1.NE.4).AND.(NR.GT.10)) THEN   
        WRITE(IOUT,108)   
        WRITE(IOUT,109)   
        STOP   
       END IF   
C   
C12d---PIPE PARAMETERS   
C   
C------PIPE LENGTH   
       IF ((ISEL1.EQ.3).AND.(ISEL2.NE.3)) THEN   
 540    CONTINUE   
        XV1=80.0*XU2(1,IU1(1))   
        IF(IMODE.EQ.2)XV1=XMAX*XU2(1,IU1(1))   
        WRITE(IOUT,280)IU3(1,IU1(1)),XV1   
 280    FORMAT(' ENTER TUBE LENGTH IN ',A2,'  EG',F10.3,' ')   
        READ(INBAS,213,IOSTAT=K1,ERR=540) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         XMAX=XV1   
        END IF   
       END IF   
C------INTERNAL PIPE DIAMETER   
       IF ((ISEL1.EQ.2).OR.(ISEL1.EQ.3)) THEN   
 545    CONTINUE   
        XV1=0.396*XU2(1,IU1(1))   
        IF(IMODE.EQ.2)XV1=D1*XU2(1,IU1(1))   
        WRITE(IOUT,285)IU3(1,IU1(1)),XV1   
 285    FORMAT(' ENTER INTERNAL DIAMETER OF TUBE IN ',A2,   
     1  '  EG',F10.3,' ')   
        READ(INBAS,213,IOSTAT=K1,ERR=545) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         D1=XV1   
        END IF   
C-------PIPE ROUGHNESS   
        IF (ISEL2.EQ.3) THEN   
 550     CONTINUE   
         XV1=0.0   
         IF(IMODE.EQ.2)XV1=AKS   
         WRITE(IOUT,290)XV1   
 290     FORMAT(' ENTER RELATIVE ROUGHNESS OF PIPE  EG',F10.6)   
         READ(INBAS,213,IOSTAT=K1,ERR=550) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1        (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          AKS=XV1   
         END IF   
        END IF   
       END IF   
C   
C12f---DEFINE ISOPTROPY IN DOMAIN   
C   
C------ISOTROPIC / ANISOTROPIC DOMAIN   
       IF(ISEL1.NE.3) THEN   
        IF(ISEL1.EQ.2) THEN   
         WRITE(IOUT,320)   
 320     FORMAT(' NOTE, FOR MINI-PERMEABILITY SIMULATIONS, DOMAIN',   
     1          ' IS ASSUMED TO BE ISOTROPIC ',/)   
        END IF   
        IF(ISEL1.NE.2) THEN   
 580     CONTINUE   
         IVR1 = 1   
         IF(IMODE.EQ.2) IVR1=IOP1   
         WRITE(IOUT,321)IVR1   
 321     FORMAT(' ENTER  1  IF THE DOMAIN IS ISOTROPIC OR  2  ',   
     1          'IF ANISOTROPIC  EG ',I1,' ')   
         READ(INBAS,212,IOSTAT=K1,ERR=580) IVR1   
         IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
          IOP1 = IVR1   
         END IF   
         IF((IOP1.NE.1).AND.(IOP1.NE.2)) GO TO 580   
        END IF   
C-------ISOTROPIC DOMAIN FOR MINI-PERMEABILITY TEST   
        IF (ISEL1.EQ.2) IOP1=1   
C-------ANISOTROPY RATIO   
        IF(IOP1.EQ.1) AR=1.0   
        IF(IOP1.EQ.2) THEN   
 585     CONTINUE   
         XV1=1.5   
         IF(IMODE.EQ.2)XV1=AR   
         IF (ISEL1.NE.4) THEN   
          WRITE(IOUT,325)XV1   
 325      FORMAT(' ENTER ESTIMATE OF ANISOTROPY RATIO kr/kz',   
     1           '  EG',F7.3,' ')   
         END IF   
         IF (ISEL1.EQ.4) THEN   
          WRITE(IOUT,326)XV1   
 326      FORMAT(' ENTER ANISOTROPY RATIO kr/kz  EG',F7.3,' ')   
         END IF   
         READ(INBAS,213,IOSTAT=K1,ERR=585) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1        (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
           AR=XV1   
         END IF   
        END IF   
C-------RECORD ESTIMATE OF ANISOTROPY RATIO   
        AR1=AR   
C   
C12g----DEFINE GEOMETRY AND PERMEABILITY OF DOMAIN   
C   
C-------PRESENCE OR ABSENCE OF A CONFINING UNIT   
 590    CONTINUE   
        IVR1 = 1   
        IVR2 = 1   
        IF(IMODE.EQ.2) THEN   
         IVR1=IOP2   
         IVR2=IOP2   
        END IF   
        IF(IVR1.GT.2) THEN   
         IVR1=2   
         IVR2=2   
        END IF   
        WRITE(IOUT,330)IVR1   
 330    FORMAT(' ENTER  1  FOR DOMAIN OPEN TO ATMOSPHERE OR  2  FOR',   
     1  ' CONFINED DOMAIN  EG ',I1,' ')   
        READ(INBAS,212,IOSTAT=K1,ERR=590) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
          IVR2 = IVR1   
        END IF   
        IF((IVR2.NE.1).AND.(IVR2.NE.2)) GO TO 590   
        IF(IVR2.EQ.1) THEN   
         IOP2=1   
         WRITE(IOUT,334)   
 334     FORMAT(' NOTE, ANALYTICAL SOLUTION FOR DOMAIN OPEN TO',   
     1          ' ATMOSPHERE WILL BE USED ',/)   
        END IF   
C-------ANALYTICAL SOLUTION   
        IF(IVR2.EQ.2) THEN   
 595     CONTINUE   
         IVR1 = 2   
         IF(IMODE.EQ.2) IVR1 = IOP2   
         WRITE(IOUT,335)IVR1   
 335     FORMAT(' ENTER  2  FOR RIGOROUS SOLUTION OR  3  FOR ',   
     1   'HANTUSH SOLUTION  EG ',I1,' ')   
         READ(INBAS,212,IOSTAT=K1,ERR=595) IVR1   
         IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
          IOP2 = IVR1   
         END IF   
         IF((IOP2.NE.2).AND.(IOP2.NE.3)) GO TO 595   
C--------THICKNESS OF UPPER CONFINING UNIT   
 600     CONTINUE   
         XV1 = 20.0*XU2(1,IU1(1))   
         IF(IMODE.EQ.2)XV1=B1*XU2(1,IU1(1))   
         IF(ISEL1.NE.4) THEN   
          WRITE(IOUT,340)IU3(1,IU1(1)),XV1   
 340      FORMAT(' ENTER ESTIMATE OF UPPER CONFINING UNIT THICKNESS',   
     1      ' IN ',A2,'  EG',F10.3,' ')   
         END IF   
         IF(ISEL1.EQ.4) THEN   
          WRITE(IOUT,341)IU3(1,IU1(1)),XV1   
 341      FORMAT(' ENTER THICKNESS OF UPPER CONFINING UNIT IN ',A2,   
     1    '  EG',F10.3,' ')   
         END IF   
         READ(INBAS,213,IOSTAT=K1,ERR=600) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1        (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          B1=XV1   
         END IF   
C--------PERMEABILITY OF UPPER CONFINING UNIT   
 605     CONTINUE   
         XV1 = 1.0E-10*XU2(7,IU1(7))   
         IF(IMODE.EQ.2)XV1=XK1*XU2(7,IU1(7))   
         IF (ISEL1.NE.4) THEN   
          WRITE(IOUT,345)IU3(7,IU1(7)),XV1   
 345      FORMAT(' ENTER ESTIMATE OF PERMEABILITY OF UPPER CONFINING',   
     1    ' UNIT IN ',A4,'  EG',E10.3,' ')   
         END IF   
         IF (ISEL1.EQ.4) THEN   
          WRITE(IOUT,346)IU3(7,IU1(7)),XV1   
 346      FORMAT(' ENTER PERMEABILITY OF UPPER CONFINING UNIT IN ',A4,   
     1    '  EG',E10.3,' ')   
         END IF   
         READ(INBAS,213,IOSTAT=K1,ERR=605) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-20).OR.   
     1        (XV1.GE.1.0E-20))).OR.(IMODE.EQ.3)) THEN   
          XK1=XV1   
         END IF   
        END IF   
C-------PERMEABILITY OF DOMAIN   
 610    CONTINUE   
        XV1 = 1.0E-08*XU2(7,IU1(7))   
        IF(IMODE.EQ.2)XV1=XKR*XU2(7,IU1(7))   
        IF ((IOP1.EQ.1).AND.(ISEL1.NE.4)) THEN   
         WRITE(IOUT,350)IU3(7,IU1(7)),XV1   
 350     FORMAT(' ENTER ESTIMATE OF PERMEABILITY OF',   
     1          ' DOMAIN IN ',  A4,'  EG',E10.3,' ')   
        END IF   
        IF ((IOP1.NE.1).AND.(ISEL1.NE.4)) THEN   
         WRITE(IOUT,351)IU3(7,IU1(7)),XV1   
 351     FORMAT(' ENTER ESTIMATE OF HORIZONTAL PERMEABILITY',   
     1          ' OF DOMAIN IN ',A4,'  EG',E10.3,' ')   
        END IF   
        IF ((IOP1.EQ.1).AND.(ISEL1.EQ.4)) THEN   
         WRITE(IOUT,352)IU3(7,IU1(7)),XV1   
 352     FORMAT(' ENTER PERMEABILITY OF DOMAIN IN ',A4,   
     1          '  EG',E10.3,' ')   
        END IF   
        IF ((IOP1.NE.1).AND.(ISEL1.EQ.4)) THEN   
         WRITE(IOUT,353)IU3(7,IU1(7)),XV1   
 353     FORMAT(' ENTER HORIZONTAL PERMEABILITY OF DOMAIN IN ',   
     1          A4,'  EG',E10.3,' ')   
        END IF   
        READ(INBAS,213,IOSTAT=K1,ERR=610) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-20).OR.   
     1       (XV1.GE.1.0E-20))).OR.(IMODE.EQ.3)) THEN   
         XKR=XV1   
        END IF   
C   
C12h----DEFINE PROGRAM OPERATIONAL FACTORS   
C   
C-------DECREMENT FACTOR   
        IF (ISEL1.NE.4) THEN   
 615     CONTINUE   
         XV1 = 0.99   
         IF(IMODE.EQ.2)XV1=DECR   
         WRITE(IOUT,355)XV1   
 355     FORMAT(' ENTER DECREMENT FACTOR FOR PARAMETER SEARCH ',   
     1    ' EG',F7.4,' ')   
         READ(INBAS,213,IOSTAT=K1,ERR=615) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1        (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          DECR=XV1   
         END IF   
C--------INCREMENT FACTOR   
 620     CONTINUE   
         XV1 = 1.01   
         IF(IMODE.EQ.2)XV1=DINC   
         WRITE(IOUT,360)XV1   
 360     FORMAT(' ENTER INCREMENT FACTOR FOR PARAMETER SEARCH ',   
     1    ' EG',F7.4,' ')   
         READ(INBAS,213,IOSTAT=K1,ERR=620) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1        (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          DINC=XV1   
         END IF   
        END IF   
C   
C12i----PRESSURE/FLOW PLOT   
C   
C-------DO NOT PLOT NORMALIZED PRESSURE IN PARAMETER EVALUATION MODE   
        IOP5 = 0   
C-------ALWAYS PLOT NORMALIZED PRESSURE IN PREDICTIVE MODE   
        IF (ISEL1.EQ.4) THEN   
         IOP5 = 1   
        END IF   
C   
C4g-----HANTUSH PARAMETERS   
C   
C       NOTES :   
C       1. GEOMETRIC DATA CORRESPONDING TO HANTUSH WELL   
C           DIMENSIONS   
C       2. Z = 0 CORRESPONDS TO LOWER FACE OF UPPER CONFINING   
C                UNIT IN DOMAIN   
C       3. R = 0 CORRESPONDS TO CENTER LINE OF WELL   
C       4. REQUIRED DIMENSIONS ARE,   
C          ZD - DISTANCE TO TOP OF SCREEN FROM SURFACE     CM   
C          ZL - DISTANCE TO BOTTOM OF SCREEN FROM SURFACE  CM   
C          ZB - DISTANCE TO BOTTOM OF DOMAIN FROM SURFACE  CM   
C          RW - RADIUS OF WELL OR BACKFILLED HOLE          CM   
C   
C-------DISTANCE TO TOP OF SCREEN   
 625    CONTINUE   
        XV1 = 180.0*XU2(1,IU1(1))   
        IF(IMODE.EQ.2)XV1=ZD*XU2(1,IU1(1))   
        WRITE(IOUT,365)IU3(1,IU1(1)),XV1   
 365    FORMAT(' ENTER DEPTH TO TOP OF SCREEN IN ',A2,   
     1         '  EG',F10.3,' ')   
        READ(INBAS,213,IOSTAT=K1,ERR=625) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         ZD=XV1   
        END IF   
C-------DISTANCE TO BOTTOM OF SCREEN   
 630    CONTINUE   
        XV1 = 225.0*XU2(1,IU1(1))   
        IF(IMODE.EQ.2)XV1=ZL*XU2(1,IU1(1))   
        WRITE(IOUT,370)IU3(1,IU1(1)),XV1   
 370    FORMAT(' ENTER DEPTH TO BOTTOM OF SCREEN IN ',A2,   
     1    '  EG',F10.3,' ')   
        READ(INBAS,213,IOSTAT=K1,ERR=630) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         ZL=XV1   
        END IF   
        XMAX = (ZD+ZL)/2.0   
C-------DEPTH OF DOMAIN   
 635    CONTINUE   
        XV1 = 300.0*XU2(1,IU1(1))   
        IF(IMODE.EQ.2)XV1=ZB*XU2(1,IU1(1))   
        WRITE(IOUT,375)IU3(1,IU1(1)),XV1   
 375    FORMAT(' ENTER DEPTH OF DOMAIN IN ',A2,'  EG',F10.3,' ')   
        READ(INBAS,213,IOSTAT=K1,ERR=635) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         ZB=XV1   
        END IF   
C-------EFFECTIVE WELL RADIUS   
 640    CONTINUE   
        XV1 = 10.0*XU2(1,IU1(1))   
        IF(IMODE.EQ.2)XV1=RW*XU2(1,IU1(1))   
        WRITE(IOUT,380)IU3(1,IU1(1)),XV1   
 380    FORMAT(' ENTER EFFECTIVE WELL RADIUS IN ',A2,'  EG',   
     1        F10.3,' ')   
        READ(INBAS,213,IOSTAT=K1,ERR=640) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         RW=XV1   
        END IF   
       END IF   
      END IF   
C   
C13---OPEN SCRATCH FILE FOR EDITING OPTION   
C   
      IF(IMODE.EQ.2) THEN   
       OPEN(UNIT=15,STATUS='SCRATCH')   
      END IF   
C   
C14---SET UP DATA INPUT FILES   
C   
      IF(IMODE.NE.1) THEN   
       IF(IMODE.EQ.2) THEN   
        IOUTC=15   
       END IF   
       IF(IMODE.EQ.3) THEN   
        IOUTC=8   
        REWIND 8   
       END IF   
C------FULL SCALE PERMEABILITY OUTPUT   
       IF(ISEL1.EQ.1) THEN   
        WRITE(IOUTC,120)PROJECT   
        WRITE(IOUTC,121)DATE   
        WRITE(IOUTC,121)WELLNUM   
        WRITE(IOUTC,122)DINJ,AOUT   
        WRITE(IOUTC,123)NR,IOP1,IOP2,IU1(1),IU1(2),IU1(3),IU1(4),   
     1   IU1(5),IU1(6),IU1(7)   
        WRITE(IOUTC,124)NMAX,RER   
        IF(IMODE.EQ.2) WRITE(IOUTC,125)B1*XU2(1,IU1(1)),   
     1     XK1*XU2(7,IU1(7))   
        IF(IMODE.EQ.3) WRITE(IOUTC,125)B1,XK1   
        IF(IMODE.EQ.2) WRITE(IOUTC,125)AR,XKR*XU2(7,IU1(7))   
        IF(IMODE.EQ.3) WRITE(IOUTC,125)AR,XKR   
        WRITE(IOUTC,126)DECR,DINC   
        IF(IMODE.EQ.2) WRITE(IOUTC,127)ZD*XU2(1,IU1(1)),   
     1     ZL*XU2(1,IU1(1)),ZB*XU2(1,IU1(1)),RW*XU2(1,IU1(1))   
        IF(IMODE.EQ.3) WRITE(IOUTC,127)ZD,ZL,ZB,RW   
       END IF   
C------MINI-PERMEABILITY OUTPUT   
       IF(ISEL1.EQ.2) THEN   
        WRITE(IOUTC,120)PROJECT   
        WRITE(IOUTC,121)DATE   
        WRITE(IOUTC,121)WELLNUM   
        WRITE(IOUTC,122)DINJ,AOUT,AFRIC   
        WRITE(IOUTC,123)NR,IOP1,IOP2,IU1(1),IU1(2),IU1(3),IU1(4),   
     1   IU1(5),IU1(6),IU1(7)   
        WRITE(IOUTC,124)NMAX,RER   
        IF(IMODE.EQ.2) WRITE(IOUTC,125)B1*XU2(1,IU1(1)),   
     1     XK1*XU2(7,IU1(7))   
        IF(IMODE.EQ.3) WRITE(IOUTC,125)B1,XK1   
        IF(IMODE.EQ.2) WRITE(IOUTC,125)AR,XKR*XU2(7,IU1(7))   
        IF(IMODE.EQ.3) WRITE(IOUTC,125)AR,XKR   
        WRITE(IOUTC,126)DECR,DINC   
        IF(IMODE.EQ.2) WRITE(IOUTC,127)ZD*XU2(1,IU1(1)),   
     1     ZL*XU2(1,IU1(1)),ZB*XU2(1,IU1(1)),RW*XU2(1,IU1(1)),   
     1     D1*XU2(1,IU1(1)),AKS   
        IF(IMODE.EQ.3) WRITE(IOUTC,127)ZD,ZL,ZB,RW,D1,AKS   
       END IF   
C------FRICTION FACTOR FROM EXPERIMENTAL   
       IF((ISEL1.EQ.3).AND.(ISEL2.EQ.2)) THEN   
        WRITE(IOUTC,120)PROJECT   
        WRITE(IOUTC,121)DATE   
        WRITE(IOUTC,121)WELLNUM   
        WRITE(IOUTC,122)DINJ,AOUT,AFRIC   
        WRITE(IOUTC,123)NR,IU1(1),IU1(2),IU1(3),IU1(4),IU1(5),IU1(6)   
        WRITE(IOUTC,124)NMAX,RER   
        IF(IMODE.EQ.2) WRITE(IOUTC,128)D1*XU2(1,IU1(1)),   
     1     XMAX*XU2(1,IU1(1))   
        IF(IMODE.EQ.3) WRITE(IOUTC,128)D1,XMAX   
       END IF   
C------FRICTION FACTOR FROM THEORETICAL   
       IF((ISEL1.EQ.3).AND.(ISEL2.EQ.3)) THEN   
        WRITE(IOUTC,122)AKS,AFRIC   
        WRITE(IOUTC,123)NR,IU1(1)   
        WRITE(IOUTC,124)NMAX,RER   
        IF(IMODE.EQ.2) WRITE(IOUTC,128)D1*XU2(1,IU1(1))   
        IF(IMODE.EQ.3) WRITE(IOUTC,128)D1   
       END IF   
C------PRESSURE AND FLOW PREDICTIONS   
       IF(ISEL1.EQ.4) THEN   
        WRITE(IOUTC,122)DINJ   
        WRITE(IOUTC,123)NR,IOP1,IOP2,IU1(1),IU1(2),IU1(3),IU1(4),   
     1   IU1(5),IU1(6),IU1(7)   
        WRITE(IOUTC,124)NMAX,RER,RERF   
        IF(IMODE.EQ.2) WRITE(IOUTC,125)B1*XU2(1,IU1(1)),   
     1     XK1*XU2(7,IU1(7))   
        IF(IMODE.EQ.3) WRITE(IOUTC,125)B1,XK1   
        IF(IMODE.EQ.2) WRITE(IOUTC,125)AR,XKR*XU2(7,IU1(7))   
        IF(IMODE.EQ.3) WRITE(IOUTC,125)AR,XKR   
        IF(IMODE.EQ.2) WRITE(IOUTC,127)ZD*XU2(1,IU1(1)),   
     1     ZL*XU2(1,IU1(1)),ZB*XU2(1,IU1(1)),RW*XU2(1,IU1(1))   
        IF(IMODE.EQ.3) WRITE(IOUTC,127)ZD,ZL,ZB,RW   
       END IF   
      END IF   
C   
C-----END   
C   
      RETURN   
      END   
C   
C     *****************   
      SUBROUTINE DATAIN(IC,INBAS,IOUT,ISEL1,ISEL2,IMODE,TAIR,TSOIL,   
C     *****************   
     1 TAVE,ATM,ATMP,ATMSQ,P3,P3P,Q4P,Q4Q,Q4,QM,AFLOW,AF1,IOP1,AR,   
     2 AR1,WAIR,IOP5,IOPS,ZOBS,RSTRT,DELR,RFAR,DELZ,ZFAR,NPTS,   
     3 STDATM,RG,DINJ,VAS,TVAS,VA,INFILE,OPVSR,OVVSR,OMVSR,OWELL,   
     4 RE,IQMV,RD,ZDA,PHID,LENP,NRR)   
C   
C1----SPECIFICATIONS:   
C   
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)   
      COMMON/UNITS/XU2(7,10) 
      COMMON/IUNIT/IU1(7),IU3(7,10)   
      DIMENSION RD(LENP),ZDA(LENP),PHID(LENP)   
      CHARACTER*12 AFLOW,AF1,INFILE,OPVSR,OVVSR,OMVSR,   
     1             OWELL,IU3*4,AVR1*12   
C-----INTIALIZE FILE OUTPUT NAMES   
      AFLOW = ' '   
      OPVSR  = ' '   
      OVVSR  = ' '   
      OMVSR  = ' '   
      OWELL  = ' '   
C   
C2----NOTES :   
C   
C     A. NOTES ON MINI-PERMEABILITY INPUT :   
C        ----- -- ---- ------------ -----   
C     1. A SINGLE LINE OF DATA IS INPUT FROM TESTxxx WITH   
C         EACH LOOP PASS IN THE MAIN CALL PROGRAM (IE I=1,NR).   
C     2. EACH LINE CORRESPONDS TO FLOW DATA AND PHYSICAL   
C         MEASUREMENTS TAKEN AT THE TIME OF THE TEST.   
C     3. IN ADDITION TO THE INFORMATION INPUT IN THE SETUP   
C         SUBROUTINE FROM TESTxxx, THERE SHOULD BE A TOTAL OF NR   
C         DATA LINES INPUT IN DATAIN, ONE LINE CORRESPONDING TO   
C         EACH FLOW RATE USED IN THE MINI-PERMEABILITY TEST.   
C   
C     B. NOTES ON FULL-SCALE PERMEABILITY INPUT :   
C        ----- -- ---- ----- ------------ -----   
C     1. A SINGLE LINE OF DATA IS INPUT AT THIS POINT IN THE   
C         PROGRAM, FOR EACH LOOP PASS IN THE MAIN CALL PROGRAM   
C         (IE I=1,NR). LATER, IN THE SUBROUTINE POWELL, SEVERAL   
C         ADDITIONAL LINES OF DATA ARE INPUT WHICH REPRESENT THE   
C         PROBE PRESSURE MEASUREMENTS FOR THE FULL SCALE TESTS.   
C     2. AS IN THE MINI-PERMEABILITY ANALYSIS, THE DATA LINE   
C         INPUT HERE CORRESPONDS TO FLOW DATA AND PHYSICAL   
C         MEASUREMENTS TAKEN AT THE TIME OF THE TEST.   
C     3. THE DEFERMENT OF PRESSURE INPUT AT THE PROBES TO THE   
C         SUBROUTINE POWELL IS LARGELY DUE TO THE FACT THAT NO   
C         FURTHER PROCESSING OF THE INPUT DATA FOR FRICTION   
C         LOSSES IS REQUIRED.  THE INPUT PRESSURES REPRESENT   
C         ACTUAL PROBE PRESSURES MEASURED UNDER STATIC CONDITIONS   
C         (AS OPPOSED TO SURFACE PRESSURES INPUT FOR THE MINI-   
C         PERMEABILITY TEST).   
C     4. THERE SHOULD BE NR SETS OF DATA LINES, ONE SET CORRESPONDING   
C         TO EACH FLOW RATE USED IN THE FULL-SCALE PERMEABILITY TEST.   
C   
C     C. NOTES ON FRICTION FACTOR INPUT :   
C        ----- -- -------- ------ -----   
C     1. FRICTION FACTOR INPUT (OPTION  3) DEPENDS ON THE PROGRAM   
C         APPLICATION, NAMELY :   
C         - EXPERIMENTAL EVALUATION OF FRICTION FACTOR   
C         - THEORETICAL EVALUATION OF FRICTION FACTOR   
C     2. INPUT FOR EXPERIMENTAL EVALUATION RESEMBLES THE INPUT   
C         FOR MINI-PERMEABILITY DATA. A SINGLE LINE OF DATA IS   
C         INPUT FROM TESTxxx WITH EACH LOOP PASS IN THE MAIN CALL   
C         PROGRAM (IE I=1,NR). EACH LINE CORRESPONDS TO FLOW DATA   
C         AND PHYSICAL MEASUREMENTS TAKEN AT THE TIME OF THE TEST.   
C     3. INPUT FOR THEORETICAL EVALUATION SIMPLY COMPRISES VALUES   
C         OF REYNOLDS NUMBERS FROM WHICH FRICTION FACTORS ARE TO BE   
C         DETERMINED.    
C     4. FOR BOTH TYPES OF ANALYSIS, THERE SHOULD BE NR LINESS OF   
C         DATA, ONE LINE CORRESPONDING TO EACH FLOW RATE OR REYNOLDS   
C         NUMBER USED TO EVALUATE THE FRICTION FACTORS.   
C   
C     D. NOTES ON PREDICTIVE MODE INPUT :   
C        ----- -- ---------- ---- -----   
C     1. THREE LINES OF DATA ARE INPUT FROM TESTxxx WITH   
C         EACH LOOP PASS IN THE MAIN CALL PROGRAM (IE I=1,NR).   
C     2. THE FIRST LINE INCLUDES A MASS FLOW RATE SPECIFIED BY THE    
C         USER ALONG WITH PHYSICAL PROPERTIES DESCRIBING THE TEST   
C         CONDITIONS.   
C     3. THE SECOND LINE DEFINES THE NATURE OF OUTPUT AND THE   
C         OUTPUT FILE NAMES.   
C     4. THE THIRD LINE DEFINES THE RANGE FOR WHICH OUTPUT SHOULD   
C         BE GENERATED.   
C     5. IN ADDITION TO THE INFORMATION INPUT IN THE SETUP   
C         SUBROUTINE FROM TESTxxx, THERE SHOULD BE A TOTAL OF 3xNR   
C         DATA LINES INPUT IN DATAIN, ONE LINE CORRESPONDING TO   
C         EACH MASS FLOW RATE SPECIFIED BY THE USER.   
C   
C     E. NOTES ON FLOW INPUT :   
C        ----- -- ---- -----   
C     1. IF AFLOW = ' ', THEN DATA ENTRY (Q4) REPRESENTS FLOW RATES   
C         IN THE UNIT SYSTEM SPECIFIED BY THE USER AND CORRECTED FOR   
C         NON STANDARD PRESSURE AND TEMPERATURE CONDITIONS.   
C     2. IF AFLOW = 'CALIBCP1' (OR SOME OTHER NAME FOR A DATA FILE    
C         CONTAINING CALIBRATION DATA FOR FLOW METER SCALE READINGS   
C         TO ACTUAL FLOWS IN THE SPECIFIED UNIT SYSTEM),  THEN DATA   
C         ENTRY (Q4) REPRESENTS FLOW SCALE READINGS TAKEN DIRECTLY   
C         FROM THE FLOW METER (IE. UNDER PREVAILING CONDITIONS).   
C     3. IN ALL INSTANCES, FLOW METER CALIBRATION DATA FILES   
C         (EG. CALIBCP1) SHOULD PROVIDE CORRELATIONS BETWEEN FLOW   
C         METER SCALE READINGS AND FLOW RATES IN THE SPECIFIED UNIT   
C         SYSTEM AND MUST BE SET UP IN ASCENDING ORDER.   
C   
C3----INPUT TEST DATA - DIRECT ENTRY   
C   
      IF ((IMODE.NE.3).AND.(IC.LE.NRR)) THEN   
C   
C3a----FULL-SCALE PERMEABILITY TEST INPUT   
C   
       IF (ISEL1.EQ.1) THEN   
        READ(8,101,IOSTAT=K1,ERR=402,END=403) NPTS,TAIR,TSOIL,   
     1      ATM,P3,Q4,AFLOW   
C-------CONVERT INPUT UNITS TO DEFAULT UNITS   
        TAIR  = (TAIR  - XU2(5,IU1(5)))/XU2(5,(IU1(5)+5))   
        TSOIL = (TSOIL - XU2(5,IU1(5)))/XU2(5,(IU1(5)+5))   
        ATM   = ATM/XU2(4,IU1(4))   
        P3    = P3/XU2(4,IU1(4))   
C-------Q4 MAY EITHER REPRESENT :   
C           - MEASURED MASS FLOW RATE   
C           - MEASURED VOLUMETRIC FLOW RATE   
C       FOR MASS FLOW RATE, P3 = 0   
C           - FOR AFLOW =  ' '  ***UNITS IN MASS/TIME***   
C           - FOR AFLOW <> ' '  ***DIMENSIONLESS SCALE READING***   
C       FOR VOLUMETRIC FLOW RATE, P3 <> 0   
C           - FOR AFLOW =  ' '  ***UNITS IN VOL/TIME***   
C           - FOR AFLOW <> ' '  ***DIMENSIONLESS SCALE READING***   
C   
C-------Q4 AS A MASS FLOW RATE   
        QM = 0.0   
        IF ((P3.GT.-1.0E-05).AND.(P3.LT.1.0E-05)) THEN   
         IQMV=1   
C--------DO NOT CHANGE IF SCALE READING   
         IF ((AFLOW.EQ.' ').OR.(AFLOW.EQ.'NONE')) THEN   
          Q4 = Q4*XU2(3,IU1(3))/XU2(6,IU1(6))   
          QM = Q4   
         END IF   
        END IF   
C-------Q4 AS A VOLUMETRIC FLOW RATE   
        IF ((P3.LE.-1.0E-05).OR.(P3.GE.1.0E-05)) THEN   
         IQMV=0   
C--------DO NOT CHANGE IF SCALE READING   
         IF ((AFLOW.EQ.' ').OR.(AFLOW.EQ.'NONE')) THEN   
          Q4 = Q4*XU2(3,IU1(3))/XU2(2,IU1(2))   
         END IF   
        END IF   
        IF (NPTS.EQ.1) THEN   
         IOP1=1   
        END IF   
        IF (IOP1.EQ.1) THEN   
         AR=1.0   
         AR1=1.0   
        END IF   
       END IF   
C   
C3b----MINI-PERMEABILITY TEST INPUT   
C   
       IF (ISEL1.EQ.2) THEN   
        READ(8,100,IOSTAT=K1,ERR=402,END=403) TAIR,TSOIL,ATM,P3,   
     1   Q4,IQMV,AFLOW   
C-------CONVERT INPUT UNITS TO DEFAULT UNITS   
        TAIR  = (TAIR  - XU2(5,IU1(5)))/XU2(5,(IU1(5)+5))   
        TSOIL = (TSOIL - XU2(5,IU1(5)))/XU2(5,(IU1(5)+5))   
        ATM   = ATM/XU2(4,IU1(4))   
        P3    = P3/XU2(4,IU1(4))   
C-------Q4 MAY EITHER REPRESENT :   
C           - MEASURED MASS FLOW RATE (IQMV=1)   
C           - MEASURED VOLUMETRIC FLOW RATE (IQMV=0)   
C       FOR MASS FLOW RATE, P3 <> 0   
C           - FOR AFLOW =  ' '  ***UNITS IN MASS/TIME***   
C           - FOR AFLOW <> ' '  ***DIMENSIONLESS SCALE READING***   
C       FOR VOLUMETRIC FLOW RATE, P3 <> 0   
C           - FOR AFLOW =  ' '  ***UNITS IN VOL/TIME***   
C           - FOR AFLOW <> ' '  ***DIMENSIONLESS SCALE READING***   
C   
C-------Q4 AS A MASS FLOW RATE   
        QM = 0.0   
        IF (IQMV.EQ.1) THEN   
C--------DO NOT CHANGE IF SCALE READING   
         IF ((AFLOW.EQ.' ').OR.(AFLOW.EQ.'NONE')) THEN   
          Q4 = Q4*XU2(3,IU1(3))/XU2(6,IU1(6))   
          QM = Q4   
         END IF   
        END IF   
C-------Q4 AS A VOLUMETRIC FLOW RATE   
        IF (IQMV.NE.1) THEN   
         IQMV=0   
C--------DO NOT CHANGE IF SCALE READING   
         IF ((AFLOW.EQ.' ').OR.(AFLOW.EQ.'NONE')) THEN   
          Q4 = Q4*XU2(3,IU1(3))/XU2(2,IU1(2))   
         END IF   
        END IF   
        NPTS = 1   
       END IF   
C   
C3c----FRICTION FACTOR CALIBRATION INPUT   
C   
C      NOTES :   
C      1. IN THE EXPERIMENTAL CASE (ISEL2=2)   
C         - P3 IS THE PRESSURE DROP OVER THE LENGTH OF PIPE   
C           IN UNITS SPECIFIED BY USER   
C      2. IN THE THEORETICAL CASE (ISEL2=3)   
C         - INPUT REYNOLDS NUMBERS DIRECTLY   
C   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.2)) THEN   
        READ(8,102,IOSTAT=K1,ERR=402,END=403) TAIR,ATM,P3,Q4,   
     1        IQMV,AFLOW   
        TAIR  = (TAIR - XU2(5,IU1(5)))/XU2(5,(IU1(5)+5))   
        ATM   = ATM/XU2(4,IU1(4))   
        P3    = P3/XU2(4,IU1(4))   
C-------Q4 MAY EITHER REPRESENT :   
C           - MEASURED MASS FLOW RATE (IQMV=1)   
C           - MEASURED VOLUMETRIC FLOW RATE (IQMV=0)   
C   
C       FOR MASS FLOW RATE, P3 <> 0   
C           - FOR AFLOW =  ' '  ***UNITS IN MASS/TIME***   
C           - FOR AFLOW <> ' '  ***DIMENSIONLESS SCALE READING***   
C       FOR VOLUMETRIC FLOW RATE, P3 <> 0   
C           - FOR AFLOW =  ' '  ***UNITS IN VOL/TIME***   
C           - FOR AFLOW <> ' '  ***DIMENSIONLESS SCALE READING***   
C-------Q4 AS A MASS FLOW RATE   
        QM = 0.0   
        IF (IQMV.EQ.1) THEN   
         IF ((AFLOW.EQ.' ').OR.(AFLOW.EQ.'NONE')) THEN   
          Q4 = Q4*XU2(3,IU1(3))/XU2(6,IU1(6))   
          QM = Q4   
         END IF   
        END IF   
C-------Q4 AS A VOLUMETRIC FLOW RATE   
        IF (IQMV.NE.1) THEN   
         IQMV=0   
         IF ((AFLOW.EQ.' ').OR.(AFLOW.EQ.'NONE')) THEN   
          Q4 = Q4*XU2(3,IU1(3))/XU2(2,IU1(2))   
         END IF   
        END IF   
        NPTS = 1   
        TSOIL = TAIR   
       END IF   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3)) THEN   
        READ(8,103,IOSTAT=K1,ERR=402,END=403) RE   
        NPTS = 1   
        IF(IMODE.EQ.1) RETURN   
       END IF   
       IF (AFLOW.EQ.' ') THEN   
        AFLOW = 'NONE'   
       END IF   
C   
C3d----PREDICTIVE MODE   
C   
       IF (ISEL1.EQ.4) THEN   
        READ(8,103,IOSTAT=K1,ERR=402,END=403) TAIR,ATM,QM   
C-------CONVERT INPUT UNITS TO DEFAULT UNITS   
        TAIR  = (TAIR - XU2(5,IU1(5)))/XU2(5,(IU1(5)+5))   
        ATM   = ATM/XU2(4,IU1(4))   
        QM    = QM*XU2(3,IU1(3))/XU2(6,IU1(6))   
        READ(8,104,IOSTAT=K1,ERR=402,END=403)IOPS,OPVSR,OVVSR,   
     1       OMVSR,OWELL   
        READ(8,105,IOSTAT=K1,ERR=402,END=403)ZOBS,RSTRT,DELR,   
     1       RFAR,DELZ,ZFAR   
C-------CONVERT INPUT UNITS TO DEFAULT UNITS   
        ZOBS  = ZOBS/XU2(1,IU1(1))   
        RSTRT = RSTRT/XU2(1,IU1(1))   
        DELR  = DELR/XU2(1,IU1(1))   
        RFAR  = RFAR/XU2(1,IU1(1))   
        DELZ  = DELZ/XU2(1,IU1(1))   
        ZFAR  = ZFAR/XU2(1,IU1(1))   
        IF(IOPS.EQ.2) THEN   
         ZFAR = RFAR   
         DELZ = DELR   
         RFAR = RSTRT   
        END IF   
        TSOIL=TAIR   
        AFLOW = 'NONE'   
        IQMV  = 1   
       END IF   
       IF (K1.EQ.0) GO TO 404   
 402   CALL ERRMES(IOUT,INBAS,INFILE,IER1)   
       IF(IER1.EQ.1) THEN   
        WRITE(IOUT,116)   
        WRITE(IOUT,117)   
        STOP   
       END IF   
 403   CALL ENDMES(IOUT,INBAS,INFILE,IER1)   
       IF(IER1.EQ.1) THEN   
         WRITE(IOUT,116)   
         WRITE(IOUT,117)   
         STOP   
       END IF   
 404   CONTINUE   
      END IF   
C-----FORMATS FOR DIRECT ENTRY   
C 100  FORMAT(3F10.3,F10.6,F10.3,I2,A12)
 100  FORMAT(5F10.3,I2,A12)  
 101  FORMAT(I2,F8.3,4F10.3,A12)   
 102  FORMAT(4F10.3,I2,A12)   
 103  FORMAT(3F10.3)   
 104  FORMAT(I5,4A12)   
 105  FORMAT(6F10.3)   
 106  FORMAT(2F10.3,F10.5)   
C-----FORMATS FOR INTERACTIVE ENTRY   
 110  FORMAT(A40)   
 111  FORMAT(A12)   
 112  FORMAT(I1)   
 113  FORMAT(F20.0)   
 114  FORMAT(I3)   
 115  FORMAT(I10)   
 116  FORMAT(//////////,T10,'ERROR READING FLOW DATA LINES IN ',   
     1 A12)   
 117  FORMAT(//,T10,'CHECK DATA FILE AND RE-RUN PROGRAM')   
C   
C4----INPUT TEST DATA -  INTERACTIVELY   
C   
      IF (IMODE.NE.1) THEN   
C   
C------OUTPUT DATA SET #   
C   
       WRITE(IOUT,424)IC   
 424   FORMAT(//,' INPUT FIELD MEASUREMENTS FOR FLOW RATE # ',I2,/)   
C   
C4a----DEFINE GENERAL TEST PARAMETERS   
C   
C------NUMBER OF PROBES IN FULL SCALE TEST   
       IF (ISEL1.NE.1) THEN   
        NPTS = 1   
       END IF   
       IF (ISEL1.EQ.1) THEN   
 425    CONTINUE   
        IVR1 = 3   
        IF(IMODE.EQ.2) IVR1 = NPTS   
        WRITE(IOUT,125)IVR1   
 125    FORMAT(' ENTER NUMBER OF PROBES USED TO MEASURE PRESSURE',   
     1  '  EG',I3)   
        READ(INBAS,114,IOSTAT=K1,ERR=425) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
         NPTS = IVR1   
        END IF   
C-------DOMAIN ASSUMED TO BE ISOTROPIC FOR ONE CALIBRATION POINT   
        IF(NPTS.EQ.1) IOP1 = 1   
       END IF   
C------DOMAIN ASSUMED TO BE ISOTROPIC FOR MINI-PERMEABILITY ANALYSIS   
       IF(ISEL1.EQ.2) IOP1 = 1   
C------REYNOLDS NUMBER   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3)) THEN   
 430    CONTINUE   
        XV1=2000.0   
        IF(IMODE.EQ.2) XV1 = RE   
        WRITE(IOUT,130)XV1   
 130    FORMAT(' ENTER REYNOLDS NUMBER  EG',F10.3)   
        READ(INBAS,113,IOSTAT=K1,ERR=430) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         RE=XV1   
        END IF   
        IOP5=0   
        IF(IMODE.EQ.2) WRITE(15,103)RE   
        IF(IMODE.EQ.3) WRITE(8,103)RE   
        RETURN   
       END IF   
C   
C4b----PHYSYCAL PARAMETERS   
C   
C------AIR TEMPERATURE AT SURFACE   
 435   CONTINUE   
       XV1=15.0*XU2(5,(IU1(5)+5))+XU2(5,IU1(5))   
       IF(IMODE.EQ.2) XV1 = TAIR*XU2(5,(IU1(5)+5))+XU2(5,IU1(5))   
       WRITE(IOUT,135)IU3(5,IU1(5)),XV1   
 135   FORMAT(' ENTER TEMP OF AIR AT SURFACE IN ',A4,'  EG',   
     1         F10.3,' ')   
       READ(INBAS,113,IOSTAT=K1,ERR=435) XV1   
       IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1      (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
        TAIR = XV1   
       END IF   
       IF (ISEL1.EQ.3) THEN   
        TSOIL = TAIR   
        GO TO 445   
       END IF   
       IF (ISEL1.EQ.4) THEN   
        TSOIL = TAIR   
        IVAR=1   
        AFLOW = 'NONE'   
        GO TO 445   
       END IF   
C------AIR TEMPERATURE OF SOIL   
 440   CONTINUE   
       XV1=10.0*XU2(5,(IU1(5)+5))+XU2(5,IU1(5))   
       IF(IMODE.EQ.2) XV1 = TSOIL*XU2(5,(IU1(5)+5))+XU2(5,IU1(5))   
       WRITE(IOUT,140)IU3(5,IU1(5)),XV1   
 140   FORMAT(' ENTER TEMP OF AIR AT SCREEN IN ',A4,'  EG',   
     1          F10.3,' ')   
       READ(INBAS,113,IOSTAT=K1,ERR=440) XV1   
       IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1      (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
        TSOIL = XV1   
       END IF   
C------PREVAILING ATMOSPHERIC PRESSURE   
 445   CONTINUE   
       XV1=1.0*XU2(4,IU1(4))   
       IF(IMODE.EQ.2) XV1 = ATM*XU2(4,IU1(4))   
       WRITE(IOUT,145)IU3(4,IU1(4)),XV1   
 145   FORMAT(' ENTER PREVAILING ATMOSPHERIC PRESSURE IN ',A4,   
     1  '  EG',F10.3,' ')   
       READ(INBAS,113,IOSTAT=K1,ERR=445) XV1   
       IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1      (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
        ATM = XV1   
       END IF   
C   
C4c----PREDICTIVE MODE PARAMETERS   
C   
C------MASS FLOW RATE THRO WELL FOR PREDICTIVE MODE   
       IF(ISEL1.EQ.4) THEN   
 450    CONTINUE   
        IQMV = 1   
        XV1 = 1.0*XU2(6,IU1(6))/XU2(3,IU1(3))   
        IF(IMODE.EQ.2) XV1 = QM*XU2(6,IU1(6))/XU2(3,IU1(3))   
        WRITE(IOUT,150)IU3(6,IU1(6)),IU3(3,IU1(3)),XV1   
 150    FORMAT(' ENTER MASS FLOW RATE THROUGH WELL IN ',A2,'/',A3,   
     1   '  EG',F10.3,' ')   
        READ(INBAS,113,IOSTAT=K1,ERR=450) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1      (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         QM = XV1   
        END IF   
       END IF   
C------OUTPUT OPTIONS FOR PREDICTIVE MODE   
       IF(IOP5.EQ.1) THEN   
 455    CONTINUE   
        IVR1 = 1   
        IF(IMODE.EQ.2) IVR1 = IOPS   
        WRITE(IOUT,155)IVR1   
 155    FORMAT(' ENTER  1  FOR HORIZONTAL   2  FOR VERTICAL OR  3',   
     1          '  FOR 2-D SECTION OUTPUT  EG ',I1,' ')   
        READ(INBAS,112,IOSTAT=K1,ERR=455) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
         IOPS = IVR1   
        END IF   
        IF((IOPS.NE.1).AND.(IOPS.NE.2).AND.(IOPS.NE.3)) GO TO 455   
C-------OUTPUT FILE NAME FOR PRESSURE PREDICTIONS   
 456    CONTINUE   
        AVR1 = 'PVSR.OUT'   
        IF(IMODE.EQ.2) AVR1 = OPVSR   
        WRITE(IOUT,156) AVR1   
 156    FORMAT(' ENTER NAME FOR PRESSURE OUTPUT FILE  EG ',A12)   
        READ(INBAS,111,IOSTAT=K1,ERR=456) AVR1   
        IF(((IMODE.EQ.2).AND.(AVR1.NE.' ' )).OR.(IMODE.EQ.3)) THEN   
         OPVSR = AVR1   
        END IF   
C-------OUTPUT FILE NAME FOR VOLUMETRIC FLOW PREDICTIONS   
 457    CONTINUE   
        AVR1 = 'VVSR.OUT'   
        IF(IMODE.EQ.2) AVR1 = OVVSR   
        WRITE(IOUT,157) AVR1   
 157    FORMAT(' ENTER NAME FOR VOLUMETRIC FLOW OUTPUT FILE  EG ',   
     1           A12)   
        READ(INBAS,111,IOSTAT=K1,ERR=457) AVR1   
        IF(((IMODE.EQ.2).AND.(AVR1.NE.' ' )).OR.(IMODE.EQ.3)) THEN   
         OVVSR = AVR1   
        END IF   
C-------OUTPUT FILE NAME FOR MASS FLOW PREDICTIONS   
 458    CONTINUE   
        AVR1 = 'MVSR.OUT'   
        IF(IMODE.EQ.2) AVR1 = OMVSR   
        WRITE(IOUT,158) AVR1   
 158    FORMAT(' ENTER NAME FOR MASS FLOW OUTPUT FILE  EG ',A12)   
        READ(INBAS,111,IOSTAT=K1,ERR=458) AVR1   
        IF(((IMODE.EQ.2).AND.(AVR1.NE.' ' )).OR.(IMODE.EQ.3)) THEN   
         OMVSR = AVR1   
        END IF   
C-------OUTPUT FILE NAME FOR WELL OUTPUT   
 459    CONTINUE   
        AVR1 = 'WELL.OUT'   
        IF(IMODE.EQ.2) AVR1 = OWELL   
        WRITE(IOUT,159) AVR1   
 159    FORMAT(' ENTER NAME FOR WELL OUTPUT FILE  EG ',A12)   
        READ(INBAS,111,IOSTAT=K1,ERR=459) AVR1   
        IF(((IMODE.EQ.2).AND.(AVR1.NE.' ' )).OR.(IMODE.EQ.3)) THEN   
         OWELL = AVR1   
        END IF   
C-------INPUT ZOBS   
 460    CONTINUE   
        XV1 = 150.0*XU2(1,IU1(1))   
        IF(IMODE.EQ.2) XV1 = ZOBS*XU2(1,IU1(1))   
        IF(IOPS.EQ.1) THEN   
         WRITE(IOUT,160)IU3(1,IU1(1)),XV1   
 160    FORMAT(' SPECIFY DEPTH TO ZONE OF INTEREST IN ',A2,   
     1          '  EG',F10.3,' ')   
        END IF   
        IF((IOPS.EQ.2).OR.(IOPS.EQ.3)) THEN   
         WRITE(IOUT,161)IU3(1,IU1(1)),XV1   
 161     FORMAT(' SPECIFY DEPTH TO TOP OF ZONE OF INTEREST IN ',A2,   
     1         '  EG',F10.3,' ')   
        END IF   
        READ(INBAS,113,IOSTAT=K1,ERR=460) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1      (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         ZOBS = XV1   
        END IF   
C-------INPUT RSTRT   
 465    CONTINUE   
        XV1 = 10.0*XU2(1,IU1(1))   
        IF(IMODE.EQ.2) XV1 = RSTRT*XU2(1,IU1(1))   
        IF(IOPS.EQ.2) THEN   
         WRITE(IOUT,165)IU3(1,IU1(1)),XV1   
 165     FORMAT(' ENTER RADIAL DISTANCE TO ZONE OF INTEREST IN ',   
     1       A2,'  EG',F10.3,' ')   
        END IF   
        IF((IOPS.EQ.1).OR.(IOPS.EQ.3)) THEN   
         WRITE(IOUT,166)IU3(1,IU1(1)),XV1   
 166     FORMAT(' ENTER RADIAL DISTANCE TO START OF ZONE OF ',   
     1          'INTEREST IN ',A2,'  EG',F10.3,' ')   
        END IF   
        READ(INBAS,113,IOSTAT=K1,ERR=465) XV1   
        IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1      (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
         RSTRT = XV1   
        END IF   
C-------INPUT DELR   
        IF(IOPS.NE.2) THEN   
 470     CONTINUE   
         XV1 = 20.0*XU2(1,IU1(1))   
         IF(IMODE.EQ.2) XV1 = DELR*XU2(1,IU1(1))   
         WRITE(IOUT,170)IU3(1,IU1(1)),XV1   
 170     FORMAT(' SPECIFY RADIAL INCREMENT FOR OUTPUT IN ',A2,   
     1    '  EG',F10.3,' ')   
         READ(INBAS,113,IOSTAT=K1,ERR=470) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          DELR = XV1   
         END IF   
        END IF   
C-------INPUT RFAR   
 475    CONTINUE   
        IF(IOPS.EQ.2) THEN   
         RFAR = RSTRT   
        END IF   
        IF(IOPS.NE.2) THEN   
         XV1 = 500.0*XU2(1,IU1(1))   
         IF(IMODE.EQ.2) XV1 = RFAR*XU2(1,IU1(1))   
         WRITE(IOUT,175)IU3(1,IU1(1)),XV1   
 175     FORMAT(' ENTER RADIAL DISTANCE TO LIMIT FOR ZONE OF ',   
     1     'INTEREST IN ',A2,'  EG',F10.3,' ')   
         READ(INBAS,113,IOSTAT=K1,ERR=475) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          RFAR = XV1   
         END IF   
        END IF   
C-------INPUT DELZ   
 485    CONTINUE   
        IF(IOPS.NE.1) THEN   
         XV1 = 20.0*XU2(1,IU1(1))   
         IF(IMODE.EQ.2) XV1 = DELZ*XU2(1,IU1(1))   
         WRITE(IOUT,185)IU3(1,IU1(1)),XV1   
 185     FORMAT(' SPECIFY VERTICAL INCREMENT FOR OUTPUT IN ',A2,   
     1    '  EG',F10.3,' ')   
         READ(INBAS,113,IOSTAT=K1,ERR=485) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          DELZ = XV1   
         END IF   
        END IF   
C-------INPUT ZFAR   
 480    CONTINUE   
        IF(IOPS.EQ.1) THEN   
         ZFAR = ZOBS   
        END IF   
        IF(IOPS.NE.1) THEN   
         XV1 = 250.0*XU2(1,IU1(1))   
         IF(IMODE.EQ.2) XV1 = ZFAR*XU2(1,IU1(1))   
         WRITE(IOUT,180)IU3(1,IU1(1)),XV1   
 180     FORMAT(' SPECIFY DEPTH TO BOTTOM OF ZONE OF INTEREST IN ',   
     1       A2,'  EG',F10.3,' ')   
         READ(INBAS,113,IOSTAT=K1,ERR=480) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          ZFAR = XV1   
         END IF   
        END IF   
       END IF   
       IF(ISEL1.NE.4) THEN   
C   
C4d-----CALIBRATION MODE PARAMETERS   
C   
C-------SYSTEM PRESSURE   
C       IF(ISEL1.NE.1) THEN   
 490     CONTINUE   
         XV1 = 0.95*XU2(4,IU1(4))   
         IF(IMODE.EQ.2) XV1=P3*XU2(4,IU1(4))   
         WRITE(IOUT,190)IU3(4,IU1(4)),XV1   
 190     FORMAT(' ENTER SYSTEM PRESSURE AT SURFACE IN ',A4,'  EG',   
     1            F10.3,' ')   
         READ(INBAS,113,IOSTAT=K1,ERR=490) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          P3 = XV1   
         END IF   
C       END IF   
C-------Q4 MAY EITHER REPRESENT :   
C           - MEASURED MASS FLOW RATE   (IQMV = 1)   
C           - MEASURED VOLUMETRIC FLOW RATE   (IQMV = 0)   
C       FOR MASS FLOW RATE, P3 = 0 (FULL SCALE) AND P <> 0 (MINI)   
C           - FOR AFLOW =  ' '  ***UNITS IN MASS/TIME***   
C           - FOR AFLOW <> ' '  ***DIMENSIONLESS SCALE READING***   
C       FOR VOLUMETRIC FLOW RATE, P3 <> 0   
C           - FOR AFLOW =  ' '  ***UNITS IN VOL/TIME***   
C           - FOR AFLOW <> ' '  ***DIMENSIONLESS SCALE READING***   
 495    CONTINUE   
        IVR1 = 1   
        IF(IMODE.EQ.2) IVR1 = IQMV+1   
        WRITE(IOUT,195) IVR1   
 195    FORMAT(' ENTER  1  FOR VOLUMETRIC FLOW OR  2  FOR MASS FLOW ',   
     1          ' EG  ',I1)   
        READ(INBAS,112,IOSTAT=K1,ERR=495) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
         IQMV = IVR1-1   
        END IF   
        IF((IQMV.NE.0).AND.(IQMV.NE.1)) GO TO 495   
C-------SCALE OR FLOW INPUT READING   
 500    CONTINUE   
        IF(AFLOW.NE.' ') THEN   
         IVAR = 0   
         IVR1 = 1   
        END IF   
        IF(AFLOW.EQ.' ') THEN   
         IVAR = 1   
         IVR1 = 2   
        END IF   
        WRITE(IOUT,200)IVR1   
 200    FORMAT(' ENTER  1  FOR SCALE/METER READING OR  2  FOR FLOW',   
     1    ' RATE  EG  ',I1)   
        READ(INBAS,112,IOSTAT=K1,ERR=500) IVR1   
        IF(((IMODE.EQ.2).AND.(IVR1.NE.0)).OR.(IMODE.EQ.3)) THEN   
         IVAR = IVR1-1   
        END IF   
        IF((IVAR.NE.0).AND.(IVAR.NE.1)) GO TO 500   
C-------SCALE FLOW FILE NAME   
        IF (IVAR.EQ.0) THEN   
 505     CONTINUE   
         AVR1 = 'CALIBGM1.CPS'   
         IF(IMODE.EQ.2) AVR1 = AFLOW   
         WRITE(IOUT,205)AVR1   
 205     FORMAT(' ENTER NAME OF FILE WITH FLOW METER CALIBRATION',   
     1    ' DATA EG ',A12)   
         READ(INBAS,111,IOSTAT=K1,ERR=505) AVR1   
         IF(((IMODE.EQ.2).AND.(AVR1.NE.' ' )).OR.(IMODE.EQ.3)) THEN   
          AFLOW = AVR1   
         END IF   
C--------SCALE INPUT VALUE   
 510     CONTINUE   
         XV1 = 50.0   
         IF(IMODE.EQ.2) XV1=Q4   
         WRITE(IOUT,210)XV1   
 210     FORMAT(' ENTER FIELD SCALE READING  EG',F10.3)   
         READ(INBAS,113,IOSTAT=K1,ERR=510) XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
          Q4 = XV1   
         END IF   
        END IF   
C-------FLOW RATE INPUT   
        IF (IVAR.NE.0) THEN   
 515     CONTINUE   
         AFLOW = 'NONE'   
         QM=0.0   
C--------Q4 AS A MASS FLOW RATE   
         IF(IQMV.EQ.1) THEN   
          XV1 = 1.0*XU2(6,IU1(6))/XU2(3,IU1(3))   
          IF(IMODE.EQ.2) XV1=Q4*XU2(6,IU1(6))/XU2(3,IU1(3))   
          WRITE(IOUT,215)IU3(6,IU1(6)),IU3(3,IU1(3)),XV1   
 215      FORMAT(' ENTER MASS FLOW RATE IN ',A2,'/',A3,   
     1    '  EG',F10.3,' ')   
          READ(INBAS,113,IOSTAT=K1,ERR=515) XV1   
          IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1        (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
           Q4 = XV1   
          END IF   
          QM = Q4   
         END IF   
C--------Q4 AS A VOLUMETRIC FLOW RATE   
         IF(IQMV.NE.1) THEN   
          XV1 = 1666.67*XU2(2,IU1(2))/XU2(3,IU1(3))   
          IF(IMODE.EQ.2) XV1=Q4*XU2(6,IU1(6))/XU2(3,IU1(3))   
          WRITE(IOUT,220)IU3(2,IU1(2)),IU3(3,IU1(3)),XV1   
 220      FORMAT(' ENTER VOLUMETRIC FLOW RATE IN ',A4,'/',A3,   
     1    ' EG',F10.3,' ')   
          READ(INBAS,113,IOSTAT=K1,ERR=515) XV1   
          IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1        (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
           Q4 = XV1   
          END IF   
         END IF   
        END IF   
       END IF   
C4f----ENTER PRESSURE MEASUREMENTS FOR FULL SCALE TEST   
       IF (ISEL1.EQ.1) THEN   
C   
C-------INPUT RADIUS, DEPTH AND OBSERVED PRESSURE   
C   
 525    CONTINUE   
        IF(IMODE.EQ.2) THEN   
         DO 25 J=1,NPTS   
          READ(8,106,IOSTAT=K1,ERR=527,END=528)RD(J),ZDA(J),PHID(J)   
          RD(J)=RD(J)/XU2(1,IU1(1))   
          ZDA(J)=ZDA(J)/XU2(1,IU1(1))   
          PHID(J)=PHID(J)/XU2(4,IU1(4))   
 25      CONTINUE   
         IF (K1.EQ.0) GO TO 530   
 527     CALL ERRMES(IOUT,INBAS,INFILE,IER1)   
         IF(IER1.EQ.1) GO TO 525   
 528     CALL ENDMES(IOUT,INBAS,INFILE,IER1)   
         IF(IER1.EQ.1) GO TO 525   
        END IF   
C   
C-------MODIFY RADIUS, DEPTH AND OBSERVED PRESSURE   
C   
 530    CONTINUE   
        DO 26 J = 1,NPTS   
C--------RADIAL DISTANCE   
         XV1=50.0*XU2(1,IU1(1))   
         IF(IMODE.EQ.2)XV1=RD(J)*XU2(1,IU1(1))   
         WRITE(IOUT,230)IC,IU3(1,IU1(1)),J,XV1   
 230     FORMAT(/,' FOR FLOW RATE ',I2,', ENTER RADIAL DISTANCE',   
     1          ' IN ',A2,' AT LOCATION ',I2,'  EG',F10.3)   
         READ (INBAS,113,IOSTAT=K1,ERR=530)XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
           RD(J) = XV1   
         END IF   
C--------DEPTH   
         XV1=100.0*XU2(1,IU1(1))   
         IF(IMODE.EQ.2)XV1=ZDA(J)*XU2(1,IU1(1))   
         WRITE(IOUT,235)IC,IU3(1,IU1(1)),J,XV1   
 235     FORMAT(' FOR FLOW RATE ',I2,', ENTER DEPTH IN ',A2,   
     1          ' AT LOCATION ',I2,'  EG',F10.3)   
         READ (INBAS,113,IOSTAT=K1,ERR=530)XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
           ZDA(J) = XV1   
         END IF   
C--------PRESSURE MEASUREMENT   
         XV1=0.9*XU2(4,IU1(4))   
         IF(IMODE.EQ.2)XV1=PHID(J)*XU2(4,IU1(4))   
         WRITE(IOUT,240)IC,IU3(4,IU1(4)),J,XV1   
 240     FORMAT(' FOR FLOW RATE ',I2,', ENTER MEASURED PRESSURE',   
     1      ' IN ',A4,' AT LOCATION ',I2,'  EG',F10.5)   
         READ (INBAS,113,IOSTAT=K1,ERR=530)XV1   
         IF(((IMODE.EQ.2).AND.((XV1.LE.-1.0E-10).OR.   
     1       (XV1.GE.1.0E-10))).OR.(IMODE.EQ.3)) THEN   
           PHID(J) = XV1   
         END IF   
 26     CONTINUE   
       END IF   
C   
C4g----WRITE DATA TO OUTPUT FILES   
C   
C------WRITE TO SCRATCH FILE   
       IF(IMODE.EQ.2) IOUTC=15   
C------WRITE TO INPUT FILE   
       IF(IMODE.EQ.3) IOUTC=8   
C------OUTPUT FOR FULL SCALE PERMEABILITY - FILE MODIFIED   
       IF ((ISEL1.EQ.1).AND.(IMODE.EQ.2)) THEN   
        TAIRO = TAIR*XU2(5,(IU1(5)+5))+XU2(5,IU1(5))   
        TSOILO= TSOIL*XU2(5,(IU1(5)+5))+XU2(5,IU1(5))   
        ATMO  = ATM*XU2(4,IU1(4))   
        P3O   = P3*XU2(4,IU1(4))   
C-------SCALE READING   
        IF(IVAR.EQ.0) Q4O = Q4   
C-------VOLUMETRIC FLOW   
        IF((IQMV.EQ.0).AND.(IVAR.EQ.1)) Q4O = Q4*XU2(2,IU1(2))/   
     1       XU2(3,IU1(3))   
C-------MASS FLOW   
        IF((IQMV.EQ.1).AND.(IVAR.EQ.1)) Q4O = Q4*XU2(6,IU1(6))/   
     1       XU2(3,IU1(3))   
        WRITE(IOUTC,101) NPTS,TAIRO,TSOILO,ATMO,P3O,Q4O,AFLOW   
        DO 27 J = 1,NPTS   
         WRITE(IOUTC,106)RD(J)*XU2(1,IU1(1)),ZDA(J)*XU2(1,IU1(1)),   
     1         PHID(J)*XU2(4,IU1(4))   
 27     CONTINUE   
       END IF   
C------OUTPUT FOR FULL SCALE PERMEABILITY - FILE CREATED   
       IF ((ISEL1.EQ.1).AND.(IMODE.EQ.3)) THEN   
        WRITE(IOUTC,101) NPTS,TAIR,TSOIL,ATM,P3,Q4,AFLOW   
        DO 28 J = 1,NPTS   
         WRITE(IOUTC,106)RD(J),ZDA(J),PHID(J)   
 28     CONTINUE   
       END IF   
C------OUTPUT FOR MINI-PERMEABILITY - FILE MODIFIED   
       IF ((ISEL1.EQ.2).AND.(IMODE.EQ.2)) THEN   
        TAIRO = TAIR*XU2(5,(IU1(5)+5))+XU2(5,IU1(5))   
        TSOILO= TSOIL*XU2(5,(IU1(5)+5))+XU2(5,IU1(5))   
        ATMO  = ATM*XU2(4,IU1(4))   
        P3O   = P3*XU2(4,IU1(4))   
C-------SCALE READING   
        IF(IVAR.EQ.0) Q4O = Q4   
C-------VOLUMETRIC FLOW   
        IF((IQMV.EQ.0).AND.(IVAR.EQ.1)) Q4O = Q4*XU2(2,IU1(2))/   
     1       XU2(3,IU1(3))   
C-------MASS FLOW   
        IF((IQMV.EQ.1).AND.(IVAR.EQ.1)) Q4O = Q4*XU2(6,IU1(6))/   
     1       XU2(3,IU1(3))   
        WRITE(IOUTC,100) TAIRO,TSOILO,ATMO,P3O,Q4O,IQMV,AFLOW   
       END IF   
C------OUTPUT FOR MINI-PERMEABILITY - FILE CREATED   
       IF ((ISEL1.EQ.2).AND.(IMODE.EQ.3)) THEN   
        WRITE(IOUTC,100) TAIR,TSOIL,ATM,P3,Q4,IQMV,AFLOW   
       END IF   
C------OUTPUT FOR FRICTION FACTOR - EXPERIMENTAL -FILE MODIFIED   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.2).AND.(IMODE.EQ.2)) THEN   
        TAIRO = TAIR*XU2(5,(IU1(5)+5))+XU2(5,IU1(5))   
        ATMO  = ATM*XU2(4,IU1(4))   
        P3O   = P3*XU2(4,IU1(4))   
C-------SCALE READING   
        IF(IVAR.EQ.0) Q4O = Q4   
C-------VOLUMETRIC FLOW   
        IF((IQMV.EQ.0).AND.(IVAR.EQ.1)) Q4O = Q4*XU2(2,IU1(2))/   
     1       XU2(3,IU1(3))   
C-------MASS FLOW   
        IF((IQMV.EQ.1).AND.(IVAR.EQ.1)) Q4O = Q4*XU2(6,IU1(6))/   
     1       XU2(3,IU1(3))   
        WRITE(IOUTC,102) TAIRO,ATMO,P3O,Q4O,IQMV,AFLOW   
       END IF   
C------OUTPUT FOR FRICTION FACTOR - EXPERIMENTAL -FILE CREATED   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.2).AND.(IMODE.EQ.3)) THEN   
        WRITE(IOUTC,102) TAIR,ATM,P3,Q4,IQMV,AFLOW   
       END IF   
C------OUTPUT FOR FRICTION FACTOR - THEORETICAL   
C------NO UNIT DEPENDANT PARAMETERS   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3)) THEN   
        WRITE(IOUTC,103) RE   
       END IF   
C------OUTPUT FOR PREDICTIVE MODE - FILE MODIFIED   
       IF ((ISEL1.EQ.4).AND.(IMODE.EQ.2)) THEN   
        TAIRO = TAIR*XU2(5,(IU1(5)+5))+XU2(5,IU1(5))   
        ATMO  = ATM*XU2(4,IU1(4))   
        QMO   = QM*XU2(6,IU1(6))/XU2(3,IU1(3))   
        WRITE(IOUTC,103) TAIRO,ATMO,QMO   
        WRITE(IOUTC,104) IOPS,OPVSR,OVVSR,OMVSR,OWELL   
        IF(IOPS.EQ.1) THEN   
         WRITE(IOUTC,105) ZOBS*XU2(1,IU1(1)),RSTRT*XU2(1,IU1(1)),   
     1    DELR*XU2(1,IU1(1)),RFAR*XU2(1,IU1(1))   
        END IF   
        IF(IOPS.EQ.2) THEN   
         WRITE(IOUTC,105) ZOBS*XU2(1,IU1(1)),RFAR*XU2(1,IU1(1)),   
     1         DELZ*XU2(1,IU1(1)),ZFAR*XU2(1,IU1(1))   
        END IF   
        IF(IOPS.EQ.3) THEN   
         WRITE(IOUTC,105) ZOBS*XU2(1,IU1(1)),RSTRT*XU2(1,IU1(1)),   
     1   DELR*XU2(1,IU1(1)),RFAR*XU2(1,IU1(1)),DELZ*XU2(1,IU1(1)),   
     2   ZFAR*XU2(1,IU1(1))   
        END IF   
       END IF   
C------OUTPUT FOR PREDICTIVE MODE - FILE CREATED   
       IF ((ISEL1.EQ.4).AND.(IMODE.EQ.3)) THEN   
        WRITE(IOUTC,103) TAIR,ATM,QM   
        WRITE(IOUTC,104) IOPS,OPVSR,OVVSR,OMVSR,OWELL   
        IF(IOPS.EQ.1) THEN   
         WRITE(IOUTC,105) ZOBS,RSTRT,DELR,RFAR   
        END IF   
        IF(IOPS.EQ.2) THEN   
         WRITE(IOUTC,105) ZOBS,RFAR,DELZ,ZFAR   
        END IF   
        IF(IOPS.EQ.3) THEN   
         WRITE(IOUTC,105) ZOBS,RSTRT,DELR,RFAR,DELZ,ZFAR   
        END IF   
       END IF   
      RETURN   
      END IF   
C   
C5----CONVERT FIELD SCALE READINGS TO AIR FLOW IN SPECIFIED UNITS   
C             AT PREVAILING CONDITIONS   
C   
      Q4P = 0.0   
      PFM = 0.0   
      TFM = 0.0   
      IF (AFLOW.NE.'NONE') THEN   
       IF (IMODE.EQ.1) THEN   
        OPEN(UNIT=9,FILE=AFLOW)   
       END IF   
       REWIND 9   
       READ(9,111)AF1   
       READ(9,*)VAR1,VAR2   
       IF((Q4.LT.VAR1).OR.(Q4.GT.VAR2)) THEN   
        WRITE(IOUT,250)   
 250    FORMAT(T5,'SPECIFIED SCALE READING LIES OUTSIDE OF',   
     1    ' CALIBRATED RANGE')   
        STOP   
       END IF   
       READ(9,*)PFM,TFM   
C------CONVERT INPUT UNITS TO DEFAULT UNITS   
       PFM = PFM/XU2(4,IU1(4))   
       TFM = (TFM - XU2(5,IU1(5)))/XU2(5,(IU1(5)+5))   
       Q4P = Q4   
       READ(9,*) ICRN   
       READ(9,*) SCALE1,FLOW1   
       ICTR=0   
       DO 30 I=2,ICRN   
        READ(9,*) SCALE2,FLOW2   
        IF((Q4.LT.SCALE2).AND.(Q4.GE.SCALE1).AND.(ICTR.EQ.0)) THEN   
         Q4=FLOW1+(FLOW2-FLOW1)*(Q4-SCALE1)/(SCALE2-SCALE1)   
         ICTR=1   
        END IF   
        SCALE1=SCALE2   
        FLOW1=FLOW2   
 30    CONTINUE   
C------CONVERT INPUT TO DEFAULT UNITS   
       QM=0.0   
C------Q4 AS A MASS FLOW RATE   
       IF(IQMV.EQ.1) THEN   
        Q4 = Q4*XU2(3,IU1(3))/XU2(6,IU1(6))   
        QM = Q4   
       END IF   
C------Q4 AS A VOLUMETRIC FLOW RATE   
       IF(IQMV.NE.1) THEN   
        Q4 = Q4*XU2(3,IU1(3))/XU2(2,IU1(2))   
       END IF   
      END IF   
C   
C6----DATA CONVERTION TO APPROPRIATE UNITS   
C   
C6a---CONVERT CELCIUS TO KELVIN   
C   
 449  CONTINUE   
      TFM  = TFM + 273.15   
      TAIR = TAIR + 273.15   
      TSOIL= TSOIL + 273.15   
      TAVE = (TAIR+TSOIL)/2.0   
C   
C6b---RECORD INPUT VALUE FOR Q4   
C   
      Q4Q = Q4   
C   
C6c---RECORD INPUT VALUE FOR ATMOSPHERIC PRESSURE   
C   
C     NOTES :   
C     1. ATMP RECORDS THE PREVAILING ATMOSPHERIC PRESSURE IN   
C         UNITS OF ATMOSPHERES   
C     2. ATM IS THE PREVAILING ATMOSPHERIC PRESSURE IN UNITS    
C         OF ATMOSPHERES.   
C     3. ATMSQ IS THE PREVAILING ATMOSPHERIC PRESSURE SQUARED   
C         IN UNITS OF (G/CM/S**2)**2   
C        ATMSQ IS USED TO NORMALIZE PRESSURE VALUES IN DOMAIN   
C   
      ATMP = ATM   
      ATMSQ=(ATM*STDATM)**2   
C   
C6d---STANDARDIZE MANOMETER PRESSURE   
C   
C     NOTES :   
C   
C     FOR FULL-SCALE PERMEABILITY APPLICATIONS  :   
C     1. P3 IS THE PRESSURE IN THE WELL IN ATMOSPHERES.   
C     2. P3 IS USED TO DETERMINE THE MASS FLOW RATE, QM,   
C         OUT OF THE WELL. QM IS THEN USED IN AIR FLOW MODEL.   
C     3. NOTE THAT IF Q4 IS INPUT DIRECTLY AS A MASS FLOW   
C         RATE (IE. IQMV=1), NO INPUT IS REQUIRED FOR P3   
C         (IE. P3 =0)   
C     3. P3P RECORDS THE INITIAL INPUT VALUE OF THE SYSTEM   
C         PRESSURE (IN UNITS OF ATMOSPHERES) FOR PURPOSES OF   
C         OUTPUT.   
C   
C     FOR MINI-PERMEABILITY APPLICATIONS  :   
C     1. P3 IS INPUT AS THE PRESSURE DEVIATION FROM ATMOSPHERIC   
C         PRESSURE (IN UNITS OF ATMOSPHERES).   
C     2. P3P RECORDS SYSTEM PRESSURE.   
C     3. P3 IS REDEFINED TO GIVE PRESSURE IN CLOSED SYSTEM AT   
C         SURFACE (IN UNITS OF ATMOSPHERES).   
C     4. TO ACCOMPLISH THIS, PRESSURE DEVIATIONS MUST BE ADDED   
C        (FLOW INJECTION) OR SUBTRACTED (FLOW WITHDRAWAL) FROM   
C         THE SYSTEM, RECALL,   
C          DINJ = -1.0 FOR MASS WITHDRAWAL   
C          DINJ = +1.0 FOR MASS INJECTION   
C     5. RECALL CONVERSION FACTORS ARE AS FOLLOWS,   
C          1 ATMOSPHERE = 406.38 " WATER = 760 mmHg   
C                       = 1013200 G/CM/SEC**2   
C     6. CONCEPTUALLY, P3 CAN BE THOUGHT OF AS THE FRACTION OF   
C        THE STANDARD PRESSURE - THIS CONVENTION IS REQUIRED FOR   
C        PIPE FLOW ANALYSIS IN WHICH PROBE PRESSURE IS DETERMINED   
C        (SUBSEQUENT APPLICATIONS OF PROBE PRESSURE IN THE AIR   
C        FLOW MODEL (SUBROUTINE POWELL) REQUIRE THAT THE PROBE    
C        PRESSURE BE NORMALIZED TO THE PREVAILING ATMOSPHERIC   
C        PRESSURE)   
C   
      IF (((ISEL1.EQ.2).OR.((ISEL1.EQ.3).AND.(ISEL2.EQ.2))).AND.   
     1     (P3.LT.0.25)) THEN   
       P3  = ATM+DINJ*P3   
      END IF   
      P3P  = P3   
C   
C7----ROTAMETER FLOW ADJUSTMENT TO CORRECT INPUT FOR NON-STANDARD   
C     P AND T   
C   
C     NOTES :   
C   
C     FOR FULL-SCALE PERMEABILITY APPLICATIONS  :   
C     1. FLOW AT WELL, Q4, IS INPUT IN L/MIN AND HAS BEEN   
C         CORRECTED FOR ANY NON-STANDARD P & T EFFECTS BY   
C         THE USER.  NO FURTHER PROCESSING IS NECESSARY.   
C   
C     FOR MINI-PERMEABILITY APPLICATIONS  :   
C     1. CALIBRATION CHARTS FOR ROTAMETER FLOW METERS APPLY AT   
C         STANDARD TEMPERATURE AND PRESSURES. SOMETIMES FLOW   
C         INPUT IS ENTERED IN TERMS OF NON-STANDARD CONDITIONS.   
C         HENCE PRESSURE (P) & TEMPERATURE (T) ADJUSTMENTS MUST   
C         BE MADE TO DETERMINE ACTUAL FLOWS UNDER THE PREVAILING   
C         CONDITIONS.    
C     2. THE CORRECTION FACTOR BELOW APPLIES ONLY TO ROTAMETER   
C         (VOLUMETRIC) FLOW MEASUREMENTS.  INPUT VARIABLE, IFM,   
C         READ FROM THE INSTRUMENT CALIBRATION DATA FILE,   
C         DETERMINES WHETHER OR NOT TO APPLY THE CORRECTION FACTOR   
C         (IE. IF IFM=1 APPLY CORRECTION FACTOR ELSE SKIP).   
C     3. WHEN FLOW RATES ARE INPUT DIRECTLY, IT IS ASSUMED THAT   
C         ANY REQUIRED ADJUSTMENTS TO THE MEASURED FLOWS HAS   
C         BEEN PERFORMED PRIOR TO ENTRY.   
C   
      IF ((AFLOW.NE.'NONE').AND.(PFM.GT.0.01).AND.(IQMV.NE.1)) THEN   
       U1 = PFM   
       U2 = U1/P3   
       U3 = U2*(TAVE/TFM)   
       U4 = 1.0/U3   
       Q4 = U3*DSQRT(U4)*Q4   
      END IF   
C   
C8---DETERMINE MASS FLOW RATE   
C   
C-----CONVERT P3 TO CGS UNITS   
      P3=P3*STDATM   
      IF((ISEL1.NE.4).AND.(IQMV.NE.1)) THEN   
       RHO4=(WAIR*P3)/(RG*TAVE)   
       QM=RHO4*Q4   
      END IF   
C   
C9----DETERMINE AIR VISCOSITY AT PREVAILING TEMPERATURE   
C   
      VA=VAS*DSQRT(TAVE/TVAS)   
C   
C   
      RETURN   
      END   
C   
C     ****************   
      SUBROUTINE TRANS(NR,ISEL1,ISEL2)   
C     ****************   
C   
C1---NOTES :   
C    1. THIS SUBROUTINE RE-WRITES DATA STORED TEMPORARILY   
C        IN UNIT 15 TO INPUT DATA FILE   
C   
C2---SPECIFICATION   
C   
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)   
      CHARACTER*12 DATE,WELLNUM,AOUT,AFLOW,OPVSR,OVVSR,OMVSR,OWELL,   
     1             AFRIC   
      CHARACTER*40 PROJECT   
C   
C3---FORMAT STATEMENTS   
C   
C 100  FORMAT(3F10.3,F10.6,F10.3,I2,A12)
 100  FORMAT(5F10.3,I2,A12)   
 101  FORMAT(I2,F8.3,4F10.3,A12)   
 102  FORMAT(4F10.3,I2,A12)   
 103  FORMAT(3F10.3)   
 104  FORMAT(I5,4A12)   
 105  FORMAT(6F10.3)   
 106  FORMAT(2F10.3,F10.5)   
 120  FORMAT(A40)   
 121  FORMAT(A12)   
 122  FORMAT(F10.6,2A12)   
 123  FORMAT(10I5)   
 124  FORMAT(I10,2E10.3)   
 125  FORMAT(F10.3,E10.3)   
 126  FORMAT(2F10.4)   
 127  FORMAT(5F10.3,F10.6)   
 128  FORMAT(2F10.3)   
C   
C4----READ AND WRITE DATA TO OUTPUT FILES   
C   
C4a---READ AND OUTPUT FOR FULL SCALE PERMEABILITY   
C   
       IF (ISEL1.EQ.1) THEN   
C-------SKIP TO RELEVANT LOCATION IN DATA FILE   
        REWIND 15   
        REWIND 8   
        READ(15,120)PROJECT   
        READ(15,121)DATE   
        READ(15,121)WELLNUM   
        READ(15,122)DINJ,AOUT   
        READ(15,123)I1,I2,I3,I4,I5,I6,I7,I8,I9,I0   
        READ(15,124)NMAX,RER   
        READ(15,125)B1,XK1   
        READ(15,125)AR,XKR   
        READ(15,126)DECR,DINC   
        READ(15,127)ZD,ZL,ZB,RW   
        WRITE(8,120)PROJECT   
        WRITE(8,121)DATE   
        WRITE(8,121)WELLNUM   
        WRITE(8,122)DINJ,AOUT   
        WRITE(8,123)I1,I2,I3,I4,I5,I6,I7,I8,I9,I0   
        WRITE(8,124)NMAX,RER   
        WRITE(8,125)B1,XK1   
        WRITE(8,125)AR,XKR   
        WRITE(8,126)DECR,DINC   
        WRITE(8,127)ZD,ZL,ZB,RW   
        DO 20 I=1,NR   
         READ(15,101) NPTS,TAIR,TSOIL,ATM,P3,Q4,AFLOW   
         WRITE(8,101) NPTS,TAIR,TSOIL,ATM,P3,Q4,AFLOW   
         DO 21 J = 1,NPTS   
          READ(15,106)XV1,XV2,XV3   
          WRITE(8,106)XV1,XV2,XV3   
 21      CONTINUE   
 20     CONTINUE   
       END IF   
C   
C4b---READ AND OUTPUT FOR MINI-PERMEABILITY   
C   
       IF (ISEL1.EQ.2) THEN   
C-------SKIP TO RELEVANT LOCATION IN DATA FILE   
        REWIND 15   
        REWIND 8   
        READ(15,120)PROJECT   
        READ(15,121)DATE   
        READ(15,121)WELLNUM   
        READ(15,122)DINJ,AOUT,AFRIC   
        READ(15,123)I1,I2,I3,I4,I5,I6,I7,I8,I9,I0   
        READ(15,124)NMAX,RER   
        READ(15,125)B1,XK1   
        READ(15,125)AR,XKR   
        READ(15,126)DECR,DINC   
        READ(15,127)ZD,ZL,ZB,RW,D1,AKS   
        WRITE(8,120)PROJECT   
        WRITE(8,121)DATE   
        WRITE(8,121)WELLNUM   
        WRITE(8,122)DINJ,AOUT,AFRIC   
        WRITE(8,123)I1,I2,I3,I4,I5,I6,I7,I8,I9,I0   
        WRITE(8,124)NMAX,RER   
        WRITE(8,125)B1,XK1   
        WRITE(8,125)AR,XKR   
        WRITE(8,126)DECR,DINC   
        WRITE(8,127)ZD,ZL,ZB,RW,D1,AKS   
        DO 25 I=1,NR   
         READ(15,100) TAIR,TSOIL,ATM,P3,Q4,IQMV,AFLOW   
         WRITE(8,100) TAIR,TSOIL,ATM,P3,Q4,IQMV,AFLOW   
 25     CONTINUE   
       END IF   
C   
C4c----OUTPUT FOR FRICTION FACTOR - EXPERIMENTAL   
C   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.2)) THEN   
C-------SKIP TO RELEVANT LOCATION IN DATA FILE   
        REWIND 15   
        REWIND 8   
        READ(15,120)PROJECT   
        READ(15,121)DATE   
        READ(15,121)WELLNUM   
        READ(15,122)DINJ,AOUT,AFRIC   
        READ(15,123)I1,I2,I3,I4,I5,I6,I7   
        READ(15,124)NMAX,RER   
        READ(15,128)D1,XMAX   
        WRITE(8,120)PROJECT   
        WRITE(8,121)DATE   
        WRITE(8,121)WELLNUM   
        WRITE(8,122)DINJ,AOUT,AFRIC   
        WRITE(8,123)I1,I2,I3,I4,I5,I6,I7   
        WRITE(8,124)NMAX,RER   
        WRITE(8,128)D1,XMAX   
        DO 30 I=1,NR   
         READ(15,102) TAIR,ATM,P3,Q4,IQMV,AFLOW   
         WRITE(8,102) TAIR,ATM,P3,Q4,IQMV,AFLOW   
 30     CONTINUE   
       END IF   
C   
C4d----OUTPUT FOR FRICTION FACTOR - THEORETICAL   
C   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3)) THEN   
C-------SKIP TO RELEVANT LOCATION IN DATA FILE   
        REWIND 15   
        REWIND 8   
        READ(15,122)AKS,AFRIC   
        READ(15,123)NR,I1   
        READ(15,124)NMAX,RER   
        READ(15,128)D1   
        WRITE(8,122)AKS,AFRIC   
        WRITE(8,123)NR,I1   
        WRITE(8,124)NMAX,RER   
        WRITE(8,128)D1   
        DO 35 I=1,NR   
         READ(15,103) RE   
         WRITE(8,103) RE   
 35     CONTINUE   
       END IF   
C   
C4e----OUTPUT FOR PREDICTIVE MODE   
C   
       IF (ISEL1.EQ.4) THEN   
C-------SKIP TO RELEVANT LOCATION IN DATA FILE   
        REWIND 15   
        REWIND 8   
        READ(15,122)DINJ   
        READ(15,123)I1,I2,I3,I4,I5,I6,I7,I8,I9,I0   
        READ(15,124)NMAX,RER,RERF   
        READ(15,125)B1,XK1   
        READ(15,125)AR,XKR   
        READ(15,127)ZD,ZL,ZB,RW   
        WRITE(8,122)DINJ   
        WRITE(8,123)I1,I2,I3,I4,I5,I6,I7,I8,I9,I0   
        WRITE(8,124)NMAX,RER,RERF   
        WRITE(8,125)B1,XK1   
        WRITE(8,125)AR,XKR   
        WRITE(8,127)ZD,ZL,ZB,RW   
        DO 40 I=1,NR   
         READ(15,103) TAIR,ATM,Q4   
         WRITE(8,103) TAIR,ATM,Q4   
         READ(15,104) IOPS,OPVSR,OVVSR,OMVSR,OWELL   
         WRITE(8,104) IOPS,OPVSR,OVVSR,OMVSR,OWELL   
         IF(IOPS.EQ.1) THEN   
          READ(15,105) ZOBS,RSTRT,DELR,RFAR   
          WRITE(8,105) ZOBS,RSTRT,DELR,RFAR   
          END IF   
         IF(IOPS.EQ.2) THEN   
          READ(15,105) ZOBS,RFAR,DELZ,ZFAR   
          WRITE(8,105) ZOBS,RFAR,DELZ,ZFAR   
         END IF   
         IF(IOPS.EQ.3) THEN   
          READ(15,105) ZOBS,RSTRT,DELR,RFAR,DELZ,ZFAR   
          WRITE(8,105) ZOBS,RSTRT,DELR,RFAR,DELZ,ZFAR   
         END IF   
 40     CONTINUE   
       END IF   
C   
C5------CLOSE SCRATCH FILE UNIT 15 TO SAVE DISK SPACE   
        CLOSE(15)   
C   
C6----END   
C   
      RETURN   
      END   
C   
C     ***************   
      SUBROUTINE REYN(PI,VA,D1,QM,V1RHO1,RE)   
C     ***************   
C   
C1---NOTES :   
C    1. THIS SUBROUTINE DETERMINES THE REYNOLDS NUMBER   
C        FOR AIR FLOW THROUGH THE WELL / PIPE.   
C   
C2---SPECIFICATION   
C   
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)   
C   
C3---GET PRODUCT OF VELOCITY AND DENSITY AT TOP OF PROBE   
C   
      A1=PI*(D1/2.0)*(D1/2.0)   
      V1RHO1=QM/A1   
C   
C4----REYNOLDS NUMBER   
C   
      RE=V1RHO1*D1/VA   
C   
      RETURN   
      END   
C   
C     ****************   
      SUBROUTINE PIPEF(IOUTF,FRIK,V1RHO1,XMAX,TAVE,RG,WAIR,ATM,   
C     ****************   
     1  STDATM,P3,BETA,D1,RE)   
C   
C1----NOTES :   
C     1. SUBROUTINE CALCULATES FRICTION FACTORS FOR AIR FLOW    
C         IN PIPES FROM FIELD/EXPERIMENTAL CALIBRATION TESTS.   
C     2. REYNOLDS NUMBER - FRICTION FACTOR CORRELATIONS ARE   
C         REQUIRED IN MINI-PERMEABILITY SIMULATIONS TO OBTAIN   
C         PRESSURE AT THE PROBE FROM SURFACE PRESSURE   
C         MEASUREMENTS.   
C   
C2----SPECIFICATION   
C   
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)   
C   
C3----FRICTION FACTOR CALCULATIONS   
C   
      PATM = ATM*STDATM   
      U1   = V1RHO1*V1RHO1   
      U2   = RG*TAVE/WAIR   
      U2   = 1.0/U2   
C     U3   = PATM*PATM-P3*P3   
      U3   = P3*P3-PATM*PATM   
      PBS  = (PATM*PATM+P3*P3)/2.0   
      U4   = BETA/PBS   
      FRIK = (D1/XMAX)*(U4-U2/U1)*U3   
C   
C4----OUTPUT REYNOLDS NUMBER VS FRICTION FACTOR CORRELATIONS   
C      TO FILE (IF SPECIFIED)   
C   
C     NOTES :   
C     1. SINCE SENSITIVITY OF FLOW MEASUREMENTS IN LAMINAR   
C         FLOW REGIME ARE GENERALLY POOR, USE PIPE FLOW   
C         EQUATION TO PREDICT FRICITON FACTOR.   
C     2. IN TRANSITION AND TURBULENT FLOW REGIMES, ACTUAL   
C         MEASUREMENTS ARE USUALLY PREFERABLE.   
C   
C      IF(RE.LE.2000.0) THEN   
C       FRIK = 64.0/RE   
C      END IF   
      IF(IOUTF.EQ.11) WRITE(IOUTF,101) RE,FRIK   
 101  FORMAT(F10.2,F10.6)   
      RETURN   
      END   
C   
C     ****************   
      SUBROUTINE FRIKF(RENO,FXN,SMATRIX,S,A,B,C,H,IOUT,IOUTF,INBAS,   
C     ****************   
     1 RE,FRIK,NV,ISEL1,ISEL2,AFRIC,D1,AKS,NMAX,RER,ICT,NR,LENM)   
C   
C1----NOTES :   
C     1. THIS SUBROUTINE OBTAINS FRICTION FACTORS FOR   
C         THE PREVAILING REYNOLDS NUMBER BY ONE OF   
C         THREE METHODS, NAMELY BY :   
C         a. PROMPTING USER FOR FRICTION FACTOR INPUT   
C         b. CALCULATING FRICTION FACTORS FROM THEORETICAL    
C             RELATIONSHIPS SUCH AS THE COLEBROOK-WHITE   
C             EQUATION FOR TURBULENT FLOW, OR,   
C         c. INTERPOLATES BETWEEN DISCRETE REYNOLDS NUMBER-   
C             FRICTION FACTOR CORRELATIONS OBTAINED FROM   
C             FIELD EXPERIMENTS. THE PROGRAM FITS A CUBIC   
C             SPLINE INTERPOLATING POLYNOMIAL THROUGH THE   
C             FIELD DATA SETS AND USES IT TO PREDICT FRICTION   
C             FACTOR VALUES FALLING BETWEEN THE DISCRETE   
C             MEASUREMENTS.   
C     2. NOTE THAT THE SUBROUTINE PIPEF MAY BE USED TO   
C         GENERATE REYNOLDS NUMBER FRICTION FACTOR   
C         RELATIONSHIPS FROM EXPERIMENTAL FIELD DATA.   
C   
C2----SPECIFICATIONS :   
C   
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)   
      DIMENSION RENO(LENM),FXN(LENM),SMATRIX(0:LENM,4),S(LENM),   
     1    A(LENM),B(LENM),C(LENM),H(LENM)   
      CHARACTER*12 AFRIC,AVAR,AV1   
 101  FORMAT(F10.2,F10.6)   
 102  FORMAT(T10,F10.2,F10.6)   
C   
C3----OPTION 1 : FRICTION FACTOR SPECIFIED BY USER   
C   
 421  CONTINUE   
      IF(ISEL1.NE.3) THEN   
       IF((ISEL2.EQ.1).OR.(NV.LT.1)) THEN   
        WRITE(IOUT,120)RE   
        WRITE(IOUT,121)   
        READ(INBAS,122,IOSTAT=K1,ERR=421)FRIK   
        RETURN   
       END IF   
      END IF   
 120  FORMAT(///,T5,'REYNOLDS NUMBER FOR SPECIFIED FLOW IS : ',F7.1)   
 121  FORMAT(/,T5,'INPUT CORRESPONDING FRICTION FACTOR : ')   
 122  FORMAT(F20.0)   
C   
C4----OPTION 2 : FRICTION FACTOR DETERMINED THEORETICALLY   
C   
C4a---CHECK FOR LAMINAR FLOW CONDITIONS   
C     NOTES :   
C     1. THEORETICAL FRICTION FACTOR ESTIMATES IN THE    
C         LAMINAR FLOW REGIME "OVERWRITE" ANY VALUES   
C         THAT MAY BE OBTAINED FROM INTERPOLATING BETWEEN   
C         EXPERIMENTAL RELATIONSHIPS.   
C     2. POISEUILLE EQUATION IS USED TO PREDICT FRICTION   
C         FACTOR IN LAMINAR REGION.   
C   
C-----OUTPUT MESSAGE TO SCREEN
      IF((ISEL1.EQ.3).AND.(ISEL2.EQ.3).AND.(ICT.EQ.1)) THEN   
       WRITE(IOUT,105)   
       WRITE(IOUT,106)   
      END IF   
 105  FORMAT(///////////////////////////,T13,'REYNOLDS    FRICTION')   
 106  FORMAT(T13,' NUMBER     FACTOR',//)   
      DRE=DABS(RE)
C1    IF(DRE.LE.2000.0) THEN
C2    IF((DRE.LE.2000.0).AND.(AFRIC.EQ.'THEORY')) THEN   
      IF((DRE.LE.2000.0).AND.(ISEL2.EQ.3)) THEN   
       FRIK=64.0/DRE   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3).AND.(IOUTF.EQ.11)) THEN   
        WRITE(IOUTF,101) RE,FRIK   
        WRITE(IOUT,102) RE,FRIK   
       END IF   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3).AND.(IOUTF.EQ.IOUT)) THEN   
        WRITE(IOUTF,102) RE,FRIK   
       END IF   
C   
C-----PAUSE OUTPUT DISPLAY ON SCREEN FOR LAST ITERATION   
C   
       IF((ISEL1.EQ.3).AND.(ISEL2.EQ.3).AND.(ICT.EQ.NR)) THEN   
        WRITE(IOUT,207)   
        READ(INBAS,208) AVAR   
       END IF   
 207   FORMAT(////,T10,'Press  ENTER  to Continue')   
 208   FORMAT(A12)   
       RETURN   
      END IF   
C   
C-----CHECK IF THEORETICAL OPTION SELECTED   
C   
      IF(ISEL2.EQ.3) THEN   
C   
C4b---CHECK FOR TRANSITIONAL FLOW CONDITIONS   
C     NOTES :   
C     1. FRICTION FACTOR IS ESTIMATED FROM A STRAIGHT   
C         LINE FITTED BETWEEN FRICTION FACTOR VALUES   
C         AT RE=2,000 (LAMINAR FLOW CONDITION)   
C         AND RE=4,000 (TURBULENT FLOW CONDITION)   
C     2. PROCEDURE IS AS FOLLOWS :   
C        - DETERMINE FRICTION FACTOR AT RE = 4,000 FROM   
C           COLEBROOK-WHITE EQUATION   
C        - DETERMINE FRICTION FACTOR AT RE = 2,000 FROM   
C           POISEUILLE EQUATION   
C        - DETERMINE GRADIENT OF STRAIGHT LINE BETWEEN   
C           TWO POINTS   
C        - INTERPOLATE LINEARLY TO GET FRICTION FACTOR   
C------DEFINE RELATIVE ROUGHNESS OF TUBE   
C   
       W1 = AKS/(3.7*D1)   
C   
C------FRIK AT RE = 4000   
C   
       IF ((RE.GT.2000.0).AND.(RE.LT.4000.0)) THEN   
        FRIK4 = 0.04   
        DO 40 I = 1,NMAX   
         W2 = 2.51/(4000*(FRIK4)**0.5)   
         W3 = -2.0*DLOG10(W1+W2)   
         W4 = (1.0/W3)**2   
         IF (FRIK4.GT.W4) THEN   
          FRIK4 = FRIK4 - RER   
         END IF   
         IF (FRIK4.LT.W4) THEN   
          FRIK4 = FRIK4 + RER   
         END IF   
         IF (DABS((W4-FRIK4)).LE.RER) GO TO 45   
 40     CONTINUE   
 45     CONTINUE   
C   
C------FRIK AT RE = 2000   
C   
        FRIK2 = 64.0/2000.0   
C   
C------GRADIENT OF STRAIGHT LINE   
C   
        FGRAD = (FRIK4-FRIK2)/2000.0   
C   
C------FRICTION FACTOR IN TRANSIENT REGION   
C   
        W5   = RE-2000.0   
        FRIK = FGRAD*W5+FRIK2   
        IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3).AND.(IOUTF.EQ.11)) THEN   
         WRITE(IOUTF,101) RE,FRIK   
         WRITE(IOUT,102) RE,FRIK   
        END IF   
        IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3).AND.(IOUTF.EQ.IOUT)) THEN   
         WRITE(IOUTF,102) RE,FRIK   
        END IF   
C   
C-------PAUSE OUTPUT DISPLAY ON SCREEN FOR LAST ITERATION   
C   
        IF((ISEL1.EQ.3).AND.(ISEL2.EQ.3).AND.(ICT.EQ.NR)) THEN   
         WRITE(IOUT,207)   
         READ(INBAS,208) AVAR   
        END IF
        RETURN   
       END IF   
C   
C4c---CHECK FOR TURBULENT FLOW CONDITIONS   
C   
C     NOTES :   
C      1. FRICTION FACTOR AT SPECIFIED RE IS ESTIMATED   
C          FROM THE COLEBROOK-WHITE EQUATION   
C   
       IF (RE.GE.4000.0) THEN   
        FRIK = 0.0375   
        DO 41 I = 1,NMAX   
         W2 = 2.51/(RE*(FRIK)**0.5)   
         W3 = -2.0*DLOG10(W1 + W2)   
         W4 = (1.0/W3)**2   
         IF (FRIK.GT.W4) THEN   
          FRIK = FRIK - RER   
         END IF   
         IF (FRIK.LT.W4) THEN   
          FRIK = FRIK + RER   
         END IF   
         IF (DABS((W4-FRIK)).LE.RER) GO TO 46   
 41     CONTINUE   
       END IF   
 46    CONTINUE   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3).AND.(IOUTF.EQ.11)) THEN   
        WRITE(IOUTF,101) RE,FRIK   
        WRITE(IOUT,102) RE,FRIK   
       END IF   
       IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.3).AND.(IOUTF.EQ.IOUT)) THEN   
        WRITE(IOUTF,102) RE,FRIK   
       END IF   
C   
C------PAUSE OUTPUT DISPLAY ON SCREEN FOR LAST ITERATION   
C   
       IF((ISEL1.EQ.3).AND.(ISEL2.EQ.3).AND.(ICT.EQ.NR)) THEN   
        WRITE(IOUT,207)   
        READ(INBAS,208) AVAR   
       END IF 
       RETURN   
      END IF   
C   
C5----OPTION 3 : FRICTION FACTOR DETERMINED BY INTERPOLATING   
C                BETWEEN EXPERIMENTALLY DETERMINED REYNOLDS   
C                NUMBER-FRICTION FACTOR CORRELATIONS.   
C     NOTES:   
C     1. THIS METHOD USES THE REYNOLDS NUMBER-FRICTION   
C         FACTOR RELATIONSHIPS DETERMINED EXPERIMENTALLY   
C         FROM FIELD TESTS   
C     2. A CUBIC SPLINE IS FITTED THROUGH THE DISCRETE POINTS   
C     3. THE SPLINE ALOGORITHM ASSUMES LINEAR END CONDITIONS    
C              NAMELY :  S(0) = S(N) = 0   
C   
C5a---CHECK ARRAY SIZE   
C   
      IF (NV.GT.LENM) THEN   
       WRITE(IOUT,99)LENM,NV   
 99    FORMAT(///,T5,'REDIMENSION LENM IN MAIN FROM ',I3,' TO ',   
     1         I3)   
       STOP   
      END IF   
 401  CONTINUE   
      REWIND 10   
      READ(10,*)NV   
      DO 20 I=1,NV   
       READ(10,*,IOSTAT=K1,ERR=402,END=403) RENO(I),FXN(I)   
       IF (K1.EQ.0) GO TO 404   
 402   CALL ERRMES(IOUT,INBAS,AFRIC,IER1)   
       IF(IER1.EQ.1) GO TO 401   
 403   CALL ENDMES(IOUT,INBAS,AFRIC,IER1)   
       IF(IER1.EQ.1) GO TO 401   
 404   CONTINUE   
 20   CONTINUE   
C   
C5b---COMPUTE FOR THE NV-2 ROWS   
C   
      NM2=NV-2   
      NM1=NV-1   
      DX1=RENO(2)-RENO(1)   
      DY1=(FXN(2)-FXN(1))/DX1*6.0   
      DO 21 I=1,NM2   
          DX2=RENO(I+2)-RENO(I+1)   
          DY2=(FXN(I+2)-FXN(I+1))/DX2*6.0   
          SMATRIX(I,1)=DX1   
          SMATRIX(I,2)=2.0*(DX1+DX2)   
          SMATRIX(I,3)=DX2   
          SMATRIX(I,4)=DY2-DY1   
          DX1=DX2   
          DY1=DY2   
 21   CONTINUE   
      IFIRST=2   
      LAST=NM2   
C   
C5c---SOLUTION OF THE TRIDIAGONAL SYSTEM   
C   
      DO 22 I=IFIRST,LAST   
          SMATRIX(I,1)=SMATRIX(I,1)/SMATRIX(I-1,2)   
          SMATRIX(I,2)=SMATRIX(I,2)-SMATRIX(I,1)*SMATRIX(I-1,3)   
          SMATRIX(I,4)=SMATRIX(I,4)-SMATRIX(I,1)*SMATRIX(I-1,4)   
 22   CONTINUE   
C   
C5d---BACK SUBSTITUTION   
C   
      SMATRIX(LAST,4)=SMATRIX(LAST,4)/SMATRIX(LAST,2)   
      DO 23 J=LAST-1,IFIRST-1,-1   
           SMATRIX(J,4)=(SMATRIX(J,4)-SMATRIX(J,3)*SMATRIX(J+1,4))   
     1/SMATRIX(J,2)   
 23   CONTINUE   
C   
C5e---SUBSTITUTE VALUES INTO S VECTOR   
C   
C     NOTE :   
C     1. LINEAR END CONDITIONS ARE ASSUMED (eg. S(1) = S(N) = 0)   
C          
      DO 24 I=IFIRST-1,LAST   
          S(I+1)=SMATRIX(I,4)   
 24   CONTINUE   
      S(1)=0.0   
      S(NV)=0.0   
C   
C5f---DETERMINE COEFFICIENTS OF POLYNOMIALS   
C   
      DO 25 I=1,NV-1   
      H(I)=RENO(I+1)-RENO(I)   
      A(I)=(S(I+1)-S(I))/(6.0*H(I))   
      B(I)=S(I)/2.0   
      C(I)=((FXN(I+1)-FXN(I))/H(I))-((2.0*H(I)*S(I)+H(I)*S(I+1))   
     */6.0)   
 25   CONTINUE   
C   
C5g---DETERMINE FRICTION FACTOR FROM REYNOLDS NUMBER   
C   
      FRIK=SEVAL(NV,RE,RENO,FXN,A,B,C,LENM)   
      RETURN   
      END   
C 
C     ************** 
      FUNCTION SEVAL(NV,RE,RENO,FXN,A,B,C,LENM) 
C     ************** 
C 
C1----NOTES : 
C     1. THE CUBIC SPLINE HAS THE FORM  : 
C 
C        FRIK = FXN(I)+C(I)*(RE-RENO(I))+B(I)*(RE-RENO(I))**2 
C                         +A(I)*(RE-RENO(I))**3 
C 
C        WHERE, RENO(I).LT.RE.LT.RENO(I+1) 
C        IF     RE.LT.RENO(1)  THEN I=1 IS USED 
C                           ELSE I=N IS USED 
C2---SPECIFICATION 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C 
C3----EVALUATE SPLINE AT REQUIRED VALUE 
C 
      DIMENSION RENO(LENM),FXN(LENM),A(LENM),B(LENM),C(LENM) 
      SAVE IL 
      IL=1 
       IF (IL.GE.NV) THEN 
        THEN IL=1 
       END IF 
       IF (RE.GE.RENO(NV)) THEN 
        DXX=RE-RENO(NV-1) 
        SEVAL=FXN(NV-1)+DXX*(C(NV-1)+DXX*(B(NV-1)+DXX*A(NV-1))) 
        RETURN 
       END IF 
       IF (RE.GE.RENO(IL)) THEN 
        IF (RE.LE.RENO(IL+1)) THEN 
         DXX=RE-RENO(IL) 
         SEVAL=FXN(IL)+DXX*(C(IL)+DXX*(B(IL)+DXX*A(IL))) 
         RETURN 
        END IF 
       END IF 
       IL=1 
       J=NV+1 
 19    K=(IL+J)/2 
       IF(RE.LT.RENO(K)) THEN 
        J=K 
       ELSE 
        IL=K 
       END IF 
       IF(J.GT.IL+1) THEN 
        GOTO 19 
       ELSE 
        DXX=RE-RENO(IL) 
        SEVAL=FXN(IL)+DXX*(C(IL)+DXX*(B(IL)+DXX*A(IL))) 
        RETURN 
       END IF 
      END 
C 
C     ***************** 
      SUBROUTINE SLVODE(WAIR,STDATM,RG,D1,DX,XMAX,TAVE,ATM,V1RHO1, 
C     ***************** 
     1  BETA,NMAX,P3,FRIK,WWW,WWA,DINJ) 
C 
C1----NOTES : 
C     1. SOLVODE IS USED TO CALCULATE THE PRESSURE AT THE PROBE 
C         BASED ON SURFACE PRESSURE MEASUREMENTS OBTAINED IN THE 
C         MINI-PERMEABILITY TESTS. 
C     2. THE MODULE CORRECTS THE MEASUREMENTS FOR PRESSURE LOSSES 
C         IN THE PIPE DUE TO FRICTION. 
C     3. NUMERICAL SOLUTIONS OF PIPE PRESSURE VERSUS DEPTH ARE 
C         OUTPUT IN THE FILE PVSV (AVAILABLE BUT NOT DEFAULT). 
C     4. ANALYTICAL SOLUTIONS OF PIPE PRESSURE VERSUS DEPTH ARE 
C         OUTPUT IN THE FILE PANAL (AVAILABLE BUT NOT DEFAULT). 
C 
C2----SPECIFICATIONS : 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C     OPEN(UNIT=12,FILE='PVSV') 
C     OPEN(UNIT=13,FILE='PANAL') 
C 
C3----GET PARAMETERS FOR APPROXIMATING ANALYTICAL SOLUTION 
C 
      U1  = V1RHO1*V1RHO1 
      U2  = RG*TAVE/WAIR 
      U3  = FRIK/D1 
      U4  = U1*BETA 
      U5  = U1*U2*U3 
      IF(DINJ.GT.(0.0)) THEN 
       U5 = -U5 
      END IF 
      XB  = XMAX/2.0 
      PBS = P3*P3 + U5*XB 
      U5  = -(U1*U2*U3)/(U4*U2/PBS-1.0) 
      IF(DINJ.GT.(0.0)) THEN 
       U5 = -U5 
      END IF 
      PBS = P3*P3 + U5*XB 
      P3S = P3*P3 
C 
C4----SOLVE ODE BY HUEN'S METHOD 
C 
C     Y0 = P3*P3 
      X1 = 0.0 
      DO 31 IX=1,NMAX 
       X0 = X1 
       X1 = X0+DX 
C 
C5----HEUN'S ALGORITHM  (ONLY FOR NUMERICAL EVALUATION) 
C 
C      V1 = U1*U2*(U3-U4/DSQRT(Y0)) 
C      Y  = Y0+DX*V1 
C      V2 = U1*U2*(U3-U4/DSQRT(Y)) 
C      V3 = (V1+V2)/2.0 
C      Y  = Y0+V3*DX 
C 
C6----PRESSURE AT PROBE 
C 
C------NUMERICAL EVALUATION 
C      NOTE - REMOVE Cs FROM SECTION C5, C2 AND BELOW TO USE WWW 
C      WWW = Y**0.5/(ATM*STDATM) 
C------DUMMY ARGUMENT 
       WWW = 0.0 
C------ANALYTICAL PER DOCUMENTATION 
       WWA = (P3S+U5*X1)**0.5/(ATM*STDATM) 
C------ANALYTICAL MODIFIED 
C      NOTE - WWB PROVIDES BETTER CORRELATION TO WWW THAN WWA 
C      WWB = (P3S+U1*U2*U3*X1)**0.5/(ATM*STDATM) 
C 
C------USE TO COMPARE PRESSURE DROP IN PIPE USING ABOVE METHODS 
C      WRITE(12,100) X1,WWW*ATM 
C      WRITE(13,100) X1,WWA*ATM 
C      WRITE(13,100) X1,WWB*ATM 
C 
C7----NOTES : 
C     1. THE PIPEFLOW SOLUTION USES PRESSURES NORMALIZED IN 
C         TERMS OF STANDARD PRESSURE (IE. 1 ATM = 760 mmHg) 
C         TO DETERMINE PROBE PRESSURES (WWW AND WWA). 
C         IN OTHER WORDS, ACTUAL PRESSURE MEASUREMENTS ARE 
C         USED DIRECTLY SIMPLY BY CONVERTING UNITS ACCORDING 
C         TO THE FOLLOWING  : 
C          1 ATMOSPHERE = 406.38 " WATER = 760 mmHg 
C                       = 1013308 G/CM/SEC**2 
C     2. IN APPLYING THE PROBE PRESSURE TO THE AIR FLOW MODEL 
C         (IN SUBROUTINE POWELL), THE PROBE PRESSURE MUST BE 
C         NORMALIZED TO THE PREVAILING ATMOSPHERIC PRESSURE. 
C         THIS REQUIRES THAT WWA AND WWW BE DIVIDED BY ATM  
C         AS IS DONE ABOVE. 
C     3. IN WRITING OUT THE PROBE PRESSURE, WWA IS MULTIPLIED 
C         BY ATM TO RETURN THE NORMALIZED VALUE TO THE STANDARD 
C         VALUE (SEE SUBROUTINE DATASTOR). 
C 
       IF(X1.GT.(XMAX-.0001)) RETURN 
C      Y0 = Y 
  31  CONTINUE 
 100  FORMAT(2E15.6)  
      RETURN 
      END 
C 
C     ***************** 
      SUBROUTINE POWELL(ISEL1,IMODE,TAVE,ATMSQ,WAIR,RG,VA,WWA, 
C     ***************** 
     1 QM,B1,XK1,XKR,AR,IOP5,IOPS,ZOBS,RSTRT,DELR,RFAR,DELZ,ZFAR, 
     2 ZD,ZL,ZB,RW,PI,RER,RERF,NMAX,PAR1,PAR2,PAR3,IOP1,IOP2,NPTS, 
     3 PHIB,CHI,CHI0,AVG1,STD1,DINC,DECR,RD,ZDA,PHID,IVR1,IVR2,IVR3, 
     4 IOUT,DINJ,INFILE,INBAS,OPVSR,OVVSR,OMVSR,OWELL,NR,I,LENP, 
     5 STDATM,ATM,ISYMBL) 
C 
C1----NOTES  : 
C 
C     1. THIS MODULE IMPLEMENTS THE ANALYTICAL AIR FLOW MODELS 
C         FROM THE PAPER OF BAEHR & HULT (1990). 
C     2. THE MODELS MAY BE USED IN A PARAMETER DETERMINATION MODE 
C         OR IN A PREDICTIVE MODE. 
C     3. IN THE PARAMETER DETERMINATION MODE, AIR PERMEABILITY MAY 
C         BE ESTIMATED BY CALIBRATING THE MODELS WITH FIELD DATA 
C         USING A LEAST SQUARE FIT. 
C     4. IN THE PREDICTIVE MODE, THE MODEL IS USED TO ESTIMATE  
C         PNEUMATIC PRESSURE DISTRIBUTION BASED ON KNOWN 
C         PERMEABILITY VALUES. 
C 
C2----SPECIFICATIONS: 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      DIMENSION RD(LENP),ZDA(LENP),PHID(LENP) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      CHARACTER*12 INFILE,OPVSR,OVVSR,OMVSR,OWELL,IU3*4 
C 
C-----SET LIMIT FOR ITERATIONS 
C 
      ZMAX=DBLE(NMAX) 
C 
C-----TEST FOR PREDICTIVE MODE SELECTION 
C 
      IF(ISEL1.EQ.4) THEN 
       GO TO 451 
      END IF 
C 
C-----TEST MEMORY ALLOCATION 
C 
      IF(NPTS.GT.LENP) THEN 
       WRITE (IOUT,280)NPTS 
       STOP 
 280   FORMAT(////,T10,'REDIMENSION LENP IN MAIN PROGRAM TO',I3) 
      END IF 
C 
C3----DEFINE PRESSURE PARAMETERS & PROBE LOCATIONS 
C 
C     NOTES  : 
C 
C     1. INPUT THE FOLLOWING PARAMETERS  : 
C        RD(I)   - RADIAL DISTANCE OF PROBE I FROM WELL 
C        ZDA(I)  - DEPTH OF PROBE I FROM SURFACE/CONFINING UNIT 
C        U1      - NORMALIZED PRESSURE (Pobs/Patm) AT PROBE BASED 
C                  ON MEASUREMENTS (FULL-SCALE PERMEABILITY TEST) 
C                  OR CALCULATIONS (FOR MINI-PERMEABILITY TEST). 
C        PHID(I) - U1 * U1 = NORMALIZED PRESSURE SQUARED 
C 
C 
C3a---FOR MINI-PERMEABILITY TEST 
C 
C     NOTES : 
C     1. FOR MINI-PERMEABILITY TESTS, ONLY ONE PRESSURE VALUE  
C         WILL BE AVAILABLE FOR EACH FLOW RATE.  THE PRESSURE 
C         VALUE USED WILL BE THAT OF THE PROBE PRESSURE 
C         CALCULATED FROM THE SURFACE PRESSURE MEASURMENT AND 
C         CORRECTED FOR FRICTION LOSSES IN THE PIPE 
C         (IE. IN MODULE SOLVODE). 
C     2. NOTE THAT THE MINI-PERMEABILITY PROBE PRESSURE, WWA 
C         WAS NORMALIZED IN MODULE SOLVODE AND SO NO FURTHER 
C         PROCESSING IS NECESSARY FOR USE IN THE AIR FLOW MODELS. 
C     3. IT WILL BE ASSUMED THAT THE CALCULATED PRESSURE ACTS 
C         AT THE MID HEIGHT OF THE WELL SCREEN (ZDA) AND AT A 
C         RADIAL DISTANCE (RD) EQUAL TO 1.0001 * THE EFFECTIVE 
C         WELL RADIUS (RW). 
C 
      IF (ISEL1.EQ.2) THEN 
       RD(1)=RW*1.0001 
       ZDA(1)=(ZD+ZL)/2.0 
C------WWA IS THE NORMALIZED PRESSURE AT THE WELL-SOIL INTERFACE 
       PHID(1)=WWA*WWA 
      END IF 
C 
C3b---FOR FULL-SCALE PERMEABILITY TEST 
C 
C     NOTES :  
C     1. FOR FULL-SCALE PERMEABILITY TESTS, SEVERAL PRESSURE 
C         MEASUREMENTS MAY BE AVAILABLE FOR EACH FLOW RATE. 
C         SINCE THE MEASUREMENTS ARE TAKEN UNDER STATIC 
C         CONDITIONS, (IE NO FLOW IN PROBE & PIPE), THE  
C         RECORDED PRESSURE VALUES DO NOT REQUIRE CORRECTION 
C         FOR PRESSURE LOSSES DUE TO PIPE FLOW. 
C     2. HOWEVER, PRESSURE CORRECTIONS MUST BE MADE TO ACCOUNT 
C         FOR THE STATIC AIR COLUMN IN THE TUBE. 
C         I.E P1 = P2 EXP((W G Z)/RT) 
C         AIR2D PERFORMS STATIC HEAD CORRECTION INCORPORATING 
C         UNIT ADJUSTMENTS. 
C     3. ALSO, AIR FLOW MODELS USE NORMALIZED PRESSURE 
C         I.E. P/Patm 
C         AIR2D TAKES PRESSURE INPUT AND NORMALIZES INPUT 
C         VALUES BY DIVIDING THROUGH BY ATM (I.E. THE PREVAILING 
C         PRESSURE IN ATMOSPHERES). 
C         HENCE, PRESSURE INPUT AT MONITORING PROBES SHOULD BE 
C         UNCORRECTED VALUES IN UNITS OF ATMOSPHERES. 
C     4. AIR2D ASSUMES THAT THE MEASURED PRESSURES ACT AT THE 
C         MID-HEIGHTS OF THE PROBES (ZDA) AND AT A DISTANCE (RD)  
C         EQUAL TO THE RADIUS TO THE PROBE FROM THE CENTER LINE 
C         OF THE WELL. 
C 
      IF (ISEL1.EQ.1) THEN 
C 
C3b1--INPUT DATA FOR IMODE=2 (INTERACTIVE MODE) 
C 
       ISEL3=0 
       IF (IMODE.EQ.2) THEN 
        WRITE(IOUT,200) 
        WRITE(IOUT,201)IU3(1,IU1(1)) 
        WRITE(IOUT,202)IU3(1,IU1(1)) 
        WRITE(IOUT,203)IU3(4,IU1(4)) 
        WRITE(IOUT,204) 
        WRITE(IOUT,205) 
        WRITE(IOUT,206) 
 420    CONTINUE 
        WRITE(IOUT,207) 
        READ(INBAS,208,IOSTAT=K1,ERR=420)ISEL3 
        IF((ISEL3.EQ.1).OR.(ISEL3.EQ.2)) GO TO 421 
        ISEL3 = 0 
        GO TO 420 
 200    FORMAT(////////,T10,'THE FOLLOWING INPUT IS REQUIRED  :') 
 201    FORMAT(//,T10,'1.  RADIAL COORDINATES OF MONITORING PROBES', 
     1         ' IN ',A2) 
 202    FORMAT(/,T10,'2.  VERTICAL COORDINATES OF MONITORING PROBES', 
     1         ' IN ',A2) 
 203    FORMAT(/,T10,'3.  PRESSURE MEASUREMENTS AT EACH PROBE', 
     1         ' LOCATION IN ',A4) 
 204    FORMAT(///,T10,'SELECT  :') 
 205    FORMAT(/,T10,'1.  TO INPUT DATA DIRECTLY FROM DATA FILE') 
 206    FORMAT(/,T10,'2.  TO INPUT DATA INTERACTIVELY') 
 207    FORMAT(///,T10,'PLEASE SELECT NUMBER  1  OR  2  :  ') 
 208    FORMAT(I2) 
C 
C-------INPUT PRESSURE DATA (1st LINE) FOR ISEL3=1 (DIRECT) 
C 
 421    CONTINUE 
        IF (ISEL3.EQ.1) THEN 
         WRITE(IOUT,221) 
         READ(INBAS,222)INFILE 
         OPEN(UNIT=8,FILE=INFILE) 
         REWIND 8 
         READ(8,101,IOSTAT=K1,ERR=422,END=423)RD(1),ZDA(1),U1 
         RD(1)=RD(1)/XU2(1,IU1(1)) 
         ZDA(1)=ZDA(1)/XU2(1,IU1(1)) 
         U1=U1/XU2(4,IU1(4)) 
C--------NOTE : U1 IS ACTUAL PRESSURE MEASUREMENT AT PROBE IN 
C               ATMOSPHERES 
C--------PERFORM HEAD CORRECTION FOR STATIC AIR COLUMN IN TUBE 
         U1=U1*DEXP((WAIR*981.0*ZDA(1))/(RG*TAVE)) 
C--------NORMALIZE CORRECTED PROBE PRESSURE  
         U1=U1/ATM 
C--------SQUARE NORMALIZED PRESSURE 
         PHID(1)=U1*U1 
         IF (K1.EQ.0) GO TO 424 
 422     CALL ERRMES(IOUT,INBAS,INFILE,IER1) 
         IF(IER1.EQ.1) GO TO 421 
 423     CALL ENDMES(IOUT,INBAS,INFILE,IER1) 
         IF(IER1.EQ.1) GO TO 421 
 424     CONTINUE 
 221     FORMAT(//,T10,'ENTER NAME OF FILE WITH PRESSURE DATA  :  ') 
 222     FORMAT(A12) 
        END IF 
C 
C-------INPUT PRESSURE DATA FOR ISEL3=2 (INTERACTIVE) 
C 
 231    FORMAT(F10.0) 
        IF(ISEL3.EQ.2) THEN 
         DO 19 IIN = 1,NPTS 
 432      CONTINUE 
          WRITE(IOUT,232)IU3(1,IU1(1)),IIN 
 232      FORMAT(/,T10,'ENTER RADIAL DISTANCE IN ',A2,' AT ',I2, 
     1          '  : ') 
          READ (INBAS,231,IOSTAT=K1,ERR=432)RD(IIN) 
          RD(IIN)=RD(IIN)/XU2(1,IU1(1)) 
 433      CONTINUE 
          WRITE(IOUT,233)IU3(1,IU1(1)),IIN 
 233      FORMAT(/,T10,'ENTER DEPTH IN ',A2,' AT ',I2,'  : ') 
          READ (INBAS,231,IOSTAT=K1,ERR=433)ZDA(IIN) 
          ZDA(IIN)=ZDA(IIN)/XU2(1,IU1(1)) 
 434      CONTINUE 
          WRITE(IOUT,234)IU3(4,IU1(4)),IIN 
 234      FORMAT(/,T10,'ENTER MEASURED PRESSURE IN ',A4,' AT ',I2, 
     1          '  : ') 
          READ (INBAS,231,IOSTAT=K1,ERR=434)U1 
          U1=U1/XU2(4,IU1(4)) 
C---------NOTE : U1 IS ACTUAL PRESSURE MEASUREMENT AT PROBE IN 
C                ATMOSPHERES 
C---------PERFORM HEAD CORRECTION FOR STATIC AIR COLUMN IN TUBE 
          U1=U1*DEXP((WAIR*981.0*ZDA(IIN))/(RG*TAVE)) 
C---------NORMALIZE CORRECTED PROBE PRESSURE  
          U1=U1/ATM 
C---------SQUARE NORMALIZED PRESSURE 
          PHID(IIN)=U1*U1 
 19      CONTINUE 
         GO TO 451 
        END IF 
       END IF 
C 
C3b2----INPUT DATA FOR IMODE=1 (DIRECT ENTRY) 
C 
       KST = 1 
       IF (ISEL3.EQ.1) THEN 
        KST = 2 
       END IF 
       DO 52 JJ = KST,NPTS 
        READ(8,101,IOSTAT=K1,ERR=442,END=443)RD(JJ), 
     1   ZDA(JJ),U1 
        RD(JJ)=RD(JJ)/XU2(1,IU1(1)) 
        ZDA(JJ)=ZDA(JJ)/XU2(1,IU1(1)) 
        U1=U1/XU2(4,IU1(4)) 
C-------NOTE : U1 IS ACTUAL PRESSURE MEASUREMENT AT PROBE IN 
C              ATMOSPHERES 
C-------PERFORM HEAD CORRECTION FOR STATIC AIR COLUMN IN TUBE 
        U1=U1*DEXP((WAIR*981.0*ZDA(JJ))/(RG*TAVE)) 
C-------NORMALIZE CORRECTED PROBE PRESSURE  
        U1=U1/ATM 
C-------SQUARE NORMALIZED PRESSURE 
        PHID(JJ)=U1*U1 
        IF (K1.EQ.0) GO TO 51 
 442    CALL ERRMES(IOUT,INBAS,INFILE,IER1) 
        IF(IER1.EQ.1) THEN 
         WRITE(IOUT,408)INFILE 
         WRITE(IOUT,409) 
         STOP 
        END IF 
 443    CALL ENDMES(IOUT,INBAS,INFILE,IER1) 
        IF(IER1.EQ.1) THEN 
          WRITE(IOUT,408)INFILE 
          WRITE(IOUT,409) 
          STOP 
        END IF 
 51    CONTINUE 
 52    CONTINUE 
      END IF 
 101  FORMAT(2F10.3,F10.5) 
 408  FORMAT(//////////,T10,'ERROR READING FLOW DATA LINES IN ', 
     1 A12) 
 409  FORMAT(//,T10,'CHECK DATA FILE AND RE-RUN PROGRAM') 
 451  CONTINUE 
C 
C-----OUTPUT COMMENT TO USER 
C 
      IF(I.EQ.1) THEN 
       WRITE(IOUT,410) 
       WRITE(IOUT,411) 
      END IF 
      IF(ISEL1.NE.4) THEN 
       WRITE(IOUT,412)I,NR 
      END IF 
      IF((OPVSR.EQ.' ').OR.(IMODE.EQ.2)) THEN 
       OPVSR = 'PVSR.OUT' 
      END IF 
      IF((OVVSR.EQ.' ').OR.(IMODE.EQ.2)) THEN 
       OVVSR = 'VVSR.OUT' 
      END IF 
      IF((OMVSR.EQ.' ').OR.(IMODE.EQ.2)) THEN 
       OMVSR = 'MVSR.OUT' 
      END IF 
      IF((OMVSR.EQ.' ').OR.(IMODE.EQ.2)) THEN 
       OWELL = 'WELL.OUT' 
      END IF 
      IF(ISEL1.EQ.4) THEN 
       WRITE(IOUT,413)I,NR,OPVSR 
       WRITE(IOUT,414)I,NR,OVVSR 
       WRITE(IOUT,415)I,NR,OMVSR 
       WRITE(IOUT,416)I,NR,OWELL 
      END IF 
 410  FORMAT(////,T10,'**  SIMULATION TAKES SEVERAL MINUTES  **') 
 411  FORMAT(//,T10,'**     PLEASE WAIT FOR OUTPUT MENU    **',/) 
 412  FORMAT(/,T10,'BUSY WITH DATA SET ',I2,' OF ',I2,/) 
 413  FORMAT(///,T10,'PRESSURE FOR DATA SET        :',I2,' OF ',I2, 
     1 ' WRITTEN TO ',A12) 
 414  FORMAT(/,T10,'VOLUMETRIC FLOW FOR DATA SET :',I2,' OF ',I2, 
     1 ' WRITTEN TO ',A12) 
 415  FORMAT(/,T10,'MASS FLOW FOR DATA SET       :',I2,' OF ',I2, 
     1 ' WRITTEN TO ',A12,//) 
 416  FORMAT(/,T10,'PRESSURE AND FLOW AT WELL FOR:',I2,' OF ',I2, 
     1 ' WRITTEN TO ',A12,//) 
C 
C4----DEFINE FLOW PARAMETERS 
C 
C     DINJ = 1 FOR MASS INJECTION 
C     DINJ = -1 FOR MASS WITHDRAWAL 
C 
C     QS IS DEFINED IN PAPER BY BAEHR & HULT AS FLOW 
C        THROUGH WELL SCREEN IN A CONFINED DOMAIN (IE. FROM 
C        HANTUSH LEAKY AQUIFER SOLUTION). 
C 
C-----NEEDED FOR MODEL IN PREDICTIVE MODE (ISEL1=4) 
      QM=QM*DINJ 
      QS=QM*VA*RG*TAVE/WAIR 
C 
C5----DEFINE TERMS USED IN ANALYTICAL SOLUTIONS 
C 
C     NOTES : 
C     1. AIR FLOW MODELS ARE BASED ON EQUATIONS (49) AND (56) 
C         IN WRR PAPER BY BAEHR & HULT 
C     2. F1 & F2 ARE TERMS FROM EQN (49) 
C        F3 COMPRISES TERMS FROM EQN (56) 
C     3. IOP1 = 2 => DOMAIN IS ANISOTROPIC. 
C        IOP2 = 1 => NO CONFINING UNIT BETWEEN WELL & ATM. 
C        IOP2 = 2 => CONFINING UNIT BETWEEN WELL & ATM (RIGOROUS) 
C        IOP2 = 3 => CONFINING UNIT BETWEEN WELL & ATM (HANTUSH). 
C     4. LEAKAGE FUNCTION IS GIVEN BY XK1/B1 FOR A UPPER CONFINING 
C         UNIT. 
C 
C-----TEST GEOMETRY/FLOW PARAMETERS 
C 
      F1=QS/(PI*RW) 
      F2=2.0/(PI*(ZL-ZD)) 
      F3=2.0*QS/(PI*PI*(ZL-ZD)*RW) 
C 
C-----ANISOTROPY/CONFINING UNIT PARAMETERS 
C 
      PAR1=XKR 
      PAR2=XKR 
      IF(IOP1.EQ.2) PAR2=PAR1/AR 
      PAR3=0.0 
      IF((IOP2.EQ.2).OR.(IOP2.EQ.3)) PAR3=XK1/B1 
C-----NEEDED FOR MODEL IN PREDICTIVE MODE (ISEL1=4) 
      IF(ISEL1.EQ.4) GO TO 452 
C 
C-----ESTIMATE SUM OF ERRORS SQUARED 
C 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      CHI0=CHI 
C 
C-----SET UP OPTIMIZATION MODULE SELECTION 
C 
      INDY=0 
C     KY=0 
      IF(IOP2.EQ.1.AND.IOP1.EQ.1) INDY=1 
      IF(IOP2.EQ.1.AND.IOP1.EQ.2) INDY=2 
      IF((IOP2.EQ.2.OR.IOP2.EQ.3).AND.IOP1.EQ.1) INDY=3 
      IF((IOP2.EQ.2.OR.IOP2.EQ.3).AND.IOP1.EQ.2) INDY=4 
      IF(NPTS.EQ.1) INDY=1 
C 
C-----CHECK INPUT LOGIC 
C 
      IF(INDY.EQ.0) THEN 
       WRITE(IOUT,102) 
       STOP 
      END IF 
 102  FORMAT(' YOU MADE A LOGICAL MISTAKE IN SELECTING OPTIONS') 
C 
C-----INITIALIZE MARKERS FOR PRINTOUT 
C 
      IVR1=0 
      IVR2=0 
      IVR3=0 
C 
C-----SELECT APPROPRIATE OPTIMIZATION MODULE 
C 
      IF(INDY.EQ.1) THEN 
       CALL OP1(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,NMAX,ZMAX,PAR1,PAR2, 
     1  PAR3,F1,F2,F3,ATMSQ,PHIB,CHI,CHI0,AVG1,STD1,DINC,DECR,RD, 
     2  ZDA,PHID,IOP2,IVR1,IVR2,IVR3,LENP) 
      END IF 
      IF(INDY.EQ.2) THEN  
       CALL OP2(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,NMAX,ZMAX,AR,PAR1, 
     1  PAR2,PAR3,F1,F2,F3,ATMSQ,PHIB,CHI,CHI0,AVG1,STD1,DINC,DECR, 
     2  RD,ZDA,PHID,IOP2,IVR1,IVR2,IVR3,LENP) 
      END IF 
      IF(INDY.EQ.3) THEN 
       CALL OP3(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,NMAX,ZMAX,PAR1,PAR2, 
     1  PAR3,F1,F2,F3,ATMSQ,PHIB,CHI,CHI0,AVG1,STD1,DINC,DECR,RD, 
     2  ZDA,PHID,IOP2,IVR1,IVR2,IVR3,LENP) 
      END IF 
      IF(INDY.EQ.4) THEN 
       CALL OP4(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,NMAX,ZMAX,AR,PAR1, 
     1  PAR2,PAR3,F1,F2,F3,ATMSQ,PHIB,CHI,CHI0,AVG1,STD1,DINC,DECR, 
     2  RD,ZDA,PHID,IOP2,IVR1,IVR2,IVR3,LENP) 
      END IF 
C 
C7----WRITE OUT PREDICTION P(r)/Patm AT SPECIFIED ELEVATION 
C 
C     UNIT 14 CONTAINS PREDICTIONS P/Patm vs r at specified z 
C 
C-----SKIP IF USER HAS SUPRESSED OPTION 
      IF(IOP5.EQ.0) GO TO 300 
 452  CONTINUE 
C-----SPECIFY NAME OF OUTPUT FILE 
      OPEN(UNIT=14,FILE=OPVSR,STATUS='UNKNOWN') 
      OPEN(UNIT=15,FILE=OVVSR,STATUS='UNKNOWN') 
      OPEN(UNIT=16,FILE=OMVSR,STATUS='UNKNOWN') 
      OPEN(UNIT=17,FILE=OWELL,STATUS='UNKNOWN') 
C-----DETERMINE VOLUMETRIC FLOW AND PRESSURE AT MID-DEPTH OF WELL 
C     AND FILTER-SOIL INTERFACE 
      Z=(ZD+ZL)/2.0 
      R=RW*1.0001 
      CALL PHAA(R,Z,ZD,ZL,ZB,RW,PI,RER,RERF,ZMAX,PAR1,PAR2,PAR3, 
     1 F1,F2,F3,ATMSQ,PHIB,DPDR,DPDZ,IOP2,IOUT) 
C-----NORMALIZED PRESSURE 
C-----TEST TO ENSURE PHIB IS POSITIVE 
      IF (PHIB.LT.0.0) THEN 
       WRITE(IOUT,920) 
       WRITE(IOUT,921) 
       WRITE(IOUT,922) 
       STOP 
      END IF 
 920  FORMAT(///////,T10,'INFEASIBLE COMBINATION OF PRESSURE AND', 
     1       ' PERMEABILITY') 
 921  FORMAT(//,T10,'EITHER, REDUCE MASS FLOW THROUGH WELL (QM)') 
 922  FORMAT(//,T10,'OR,     INCREASE PERMEABILITY OF DOMAIN (XKR)', 
     1       //) 
      U1=DSQRT(PHIB) 
C-----PRESSURE IN ATMOSPHERES 
      U2=U1*ATM 
C-----PRESSURE IN CGS UNITS 
      U3=U2*STDATM 
C-----DENSITY OF AIR (G/CM^3) 
      U4=(U3*1.0*WAIR)/(RG*TAVE) 
C-----VOLUMETRIC FLOW RATE OF AIR (CM^3/SEC) 
      U5=QM/U4 
C-----VOLUMETRIC FLOW RATE OF AIR (L/MIN) 
      U6=U5*60.0/1000.0 
C-----CONVERT BACK TO INPUT UNITS 
      ZO=Z*XU2(1,IU1(1)) 
      RO=R*XU2(1,IU1(1)) 
      U2O=U2*XU2(4,IU1(4)) 
      U5O=U5*XU2(2,IU1(2))/XU2(3,IU1(3)) 
      QO = QM*XU2(6,IU1(6))/XU2(3,IU1(3)) 
C-----OUTPUT DATA TO WELLx.OUT 
      WRITE(17,110) -ZO,IU3(1,IU1(1)) 
      WRITE(17,111) RO,IU3(1,IU1(1)) 
      WRITE(17,112) U2O,IU3(4,IU1(4)) 
      WRITE(17,113) U5O,IU3(2,IU1(2)),IU3(3,IU1(3)) 
      WRITE(17,114) QO,IU3(6,IU1(6)),IU3(3,IU1(3)) 
      WRITE(17,115) 
      WRITE(17,116) 
C-----OUTPUT DESCRIPTON OF UNIT SYSTEM 
      WRITE(17,120) 
      WRITE(17,121)IU3(1,IU1(1)) 
      WRITE(17,122)IU3(2,IU1(2)) 
      WRITE(17,123)IU3(3,IU1(3)) 
      WRITE(17,124)IU3(4,IU1(4)) 
      WRITE(17,125)IU3(5,IU1(5)) 
      WRITE(17,126)IU3(6,IU1(6)) 
      WRITE(17,127)IU3(7,IU1(7)) 
 110  FORMAT(//,T10,'MID-DEPTH OF WELL FROM SURFACE  = ',F8.3, 
     1          ' ',A2) 
 111  FORMAT(//,T10,'RADIUS OF FILTER-SOIL INTERFACE = ',F8.3, 
     1           ' ',A2) 
 112  FORMAT(//,T10,'PRESSURE IN WELL                = ',F8.3, 
     1           ' ',A4) 
 113  FORMAT(//,T10,'VOLUMETRIC FLOW THROUGH WELL    = ',E12.4, 
     1           ' ',A4,'/',A3) 
 114  FORMAT(//,T10,'MASS FLOW THROUGH WELL          = ',F8.3, 
     1           ' ',A2,'/',A3) 
 115  FORMAT(////,T10,'+VE REPRESENTS INJECTION') 
 116  FORMAT(//,T10,'-VE REPRESENTS WITHDRAWAL') 
 120  FORMAT(////,T10,'SUMMARY OF UNITS USED IN SIMULATION') 
 121  FORMAT(//,T10,'LENGTH UNIT SYSTEM       :  ',A4) 
 122  FORMAT(/,T10,'VOLUME UNIT SYSTEM       :  ',A4) 
 123  FORMAT(/,T10,'TIME UNIT SYSTEM         :  ',A4) 
 124  FORMAT(/,T10,'PRESSURE UNIT SYSTEM     :  ',A4) 
 125  FORMAT(/,T10,'TEMPERATURE UNIT SYSTEM  :  ',A4) 
 126  FORMAT(/,T10,'MASS UNIT SYSTEM         :  ',A4) 
 127  FORMAT(/,T10,'PERMEABILITY UNIT SYSTEM :  ',A4) 
C 
C-----DETERMINE FLOW AND PRESSURE ALONG HORIZONTAL LINE (OPTION 1) 
C 
      IF(IOPS.EQ.1) THEN 
       IF(RSTRT.LT.RW) RSTRT = RW 
       R=RSTRT - DELR 
       Z=ZOBS 
       DO 30 I1=1,NMAX 
        R=R + DELR 
        IF(R.GT.RFAR) GO TO 320 
        CALL PHAA(R,Z,ZD,ZL,ZB,RW,PI,RER,RERF,ZMAX,PAR1,PAR2,PAR3, 
     1   F1,F2,F3,ATMSQ,PHIB,DPDR,DPDZ,IOP2,IOUT) 
C-------NORMALIZED PRESSURE 
C-------TEST TO ENSURE PHIB IS POSITIVE 
        IF (PHIB.LT.0.0) THEN 
         WRITE(IOUT,920) 
         WRITE(IOUT,921) 
         WRITE(IOUT,922) 
         STOP 
        END IF 
        U1=DSQRT(PHIB) 
        U2=U1*ATM 
        U3=U2*STDATM 
        U4=1.0/(2.0*VA*U3) 
        U5=WAIR/(2.0*VA*RG*TAVE) 
C-------VOLUMETRIC FLOW RATE IN HORIZONTAL DIRECTION 
        U6=-PAR1*U4*DPDR 
C-------VOLUMETRIC FLOW RATE IN VERTICAL DIRECTION 
        U7=-PAR2*U4*DPDZ 
C-------MASS FLOW RATE IN HORIZONTAL DIRECTION 
        U8=-PAR1*U5*DPDR 
C-------MASS FLOW RATE IN VERTICAL DIRECTION 
        U9=-PAR2*U5*DPDZ 
C-------CONVERT BACK TO INPUT UNITS 
        ZO=Z*XU2(1,IU1(1)) 
        RO=R*XU2(1,IU1(1)) 
        U2O=U2*XU2(4,IU1(4)) 
        U6O=U6*XU2(2,IU1(2))/XU2(3,IU1(3)) 
        U7O=U7*XU2(2,IU1(2))/XU2(3,IU1(3)) 
        U8O=U8*XU2(6,IU1(6))/XU2(3,IU1(3)) 
        U9O=U9*XU2(6,IU1(6))/XU2(3,IU1(3)) 
C-------GENERATE RESULTANT VOLUMETRIC FLOW 
        FCRT   = 1.0 
        IF(U6O.LE.0.0) FCRT=-1.0 
        QVTT   = FCRT*((U6O**2+U7O**2)**0.5) 
C-------GENERATE RESULTANT MASS FLOW 
        FCRT   = 1.0 
        IF(U8O.LE.0.0) FCRT=-1.0 
        QMTT   = FCRT*((U8O**2+U9O**2)**0.5) 
C-------OUTPUT PREDICTED VALUES FOR IOPS=1 
        WRITE(14,104) RO,-ZO,U2O 
        WRITE(15,104) RO,-ZO,U6O,U7O,QVTT 
        WRITE(16,104) RO,-ZO,U8O,U9O,QMTT 
   30  CONTINUE 
 320   CONTINUE 
C------INTEGRATE MASS FLOW OVER HORIZONTAL DISK 
C------DEFINE GEOMETRIC RANGE 
       R1=RSTRT 
       R2=RFAR 
       Z1=ZOBS 
       Z2=ZOBS 
C------OBTAIN INTEGRATED VERTICAL FLOW (Hm) 
       CALL PHAB(R1,R2,Z1,Z2,ZD,ZL,ZB,RW,PI,RERF,ZMAX,PAR1,PAR2, 
     1           PAR3,F1,F2,VHFLO,IOP2,IOPS,IOUT) 
C------MASS FLOW CORRECTION 
       U15=WAIR/(VA*RG*TAVE) 
C------MASS FLOW RATE IN VERTICAL DIRECTION 
       U18=PAR2*U15*VHFLO 
C------PERCENTAGE OF TOTAL MASS FLOW RATE 
       U19=DSQRT((U18/QM)*(U18/QM)) 
C------CONVERT UNITS BACK TO INPUT UNIT SYSTEM 
       RL1 = RSTRT*XU2(1,IU1(1)) 
       RL2 = RFAR*XU2(1,IU1(1)) 
       ZL1 = ZOBS*XU2(1,IU1(1)) 
       ZL2 = ZOBS*XU2(1,IU1(1)) 
       U18O=U18*XU2(6,IU1(6))/XU2(3,IU1(3)) 
       U19O=U19*100.0 
C------OUTPUT VOLUMETRIC FLOW SIGN CONVENTION 
       WRITE(15,141) 
       WRITE(15,142) 
       WRITE(15,153) 
       WRITE(15,154) 
       WRITE(15,155) 
       WRITE(15,156) 
C------OUTPUT MASS FLOW SIGN CONVENTION 
       WRITE(16,151) 
       WRITE(16,152) 
       WRITE(16,153) 
       WRITE(16,154) 
       WRITE(16,155) 
       WRITE(16,156) 
C------OUTPUT MASS FLOW SUMMARY 
       WRITE(16,161) 
       WRITE(16,162) 
       IF(ZOBS.LT.1.0E-05) THEN 
        WRITE(16,172) 
       END IF 
       IF(ZOBS.GE.1.0E-05) THEN 
        WRITE(16,173)ZL1,IU3(1,IU1(1)) 
       END IF 
       WRITE(16,174)RL1,IU3(1,IU1(1)),RL2,IU3(1,IU1(1)) 
       WRITE(16,175)U18O,IU3(6,IU1(6)),IU3(3,IU1(3)) 
       WRITE(16,176)U19O 
C------NO VOLUMETRIC FLOW SUMMARY 
 172   FORMAT(/,T10,'AT THE TOP OF THE DOMAIN, AND,') 
 173   FORMAT(/,T10,'AT DEPTH ',F10.4,' ',A2,' BELOW THE SURFACE, AND') 
 174   FORMAT(/,T10,'BETWEEN RADII',F10.4,' ',A2,' AND',F10.4,' ',A2) 
 175   FORMAT(/,T10,'TOTAL VERTICAL FLOW OVER TWO PI RADIANS = ', 
     1       E15.6,' ',A2,'/',A3) 
 176   FORMAT(/,T10,'WHICH REPRESENTS',F6.2,'% OF FLOW OUT OF WELL') 
      END IF 
C 
C-----DETERMINE FLOW AND PRESSURE ALONG VERTICAL LINE (OPTION 2) 
C 
      IF(IOPS.EQ.2) THEN 
       R=RFAR 
       Z=ZOBS-DELZ 
       IF(ZOBS.LT.0.0) ZOBS = 0.0 
       IF(ZFAR.GT.ZB) ZFAR = ZB 
       DO 31 I1=1,NMAX 
        Z=Z + DELZ 
        IF(Z.GT.ZFAR) GO TO 330 
        CALL PHAA(R,Z,ZD,ZL,ZB,RW,PI,RER,RERF,ZMAX,PAR1,PAR2,PAR3, 
     1   F1,F2,F3,ATMSQ,PHIB,DPDR,DPDZ,IOP2,IOUT) 
C-------NORMALIZED PRESSURE 
C-------TEST TO ENSURE PHIB IS POSITIVE 
        IF (PHIB.LT.0.0) THEN 
         WRITE(IOUT,920) 
         WRITE(IOUT,921) 
         WRITE(IOUT,922) 
         STOP 
        END IF 
        U1=DSQRT(PHIB) 
        U2=U1*ATM 
C-------CORRECTED PRESSURE 
        U3=U2*STDATM 
C-------VOLUMETRIC FLOW CORRECTION 
        U4=1.0/(2.0*VA*U3) 
C-------MASS FLOW CORRECTION 
        U5=WAIR/(2.0*VA*RG*TAVE) 
C-------VOLUMETRIC FLOW RATE IN HORIZONTAL DIRECTION 
        U6=-PAR1*U4*DPDR 
C-------VOLUMETRIC FLOW RATE IN VERTICAL DIRECTION 
        U7=-PAR2*U4*DPDZ 
C-------MASS FLOW RATE IN HORIZONTAL DIRECTION 
        U8=-PAR1*U5*DPDR 
C-------MASS FLOW RATE IN VERTICAL DIRECTION 
        U9=-PAR2*U5*DPDZ 
C-------CONVERT BACK TO INPUT UNITS 
        ZO=Z*XU2(1,IU1(1)) 
        RO=R*XU2(1,IU1(1)) 
        U2O=U2*XU2(4,IU1(4)) 
        U6O=U6*XU2(2,IU1(2))/XU2(3,IU1(3)) 
        U7O=U7*XU2(2,IU1(2))/XU2(3,IU1(3)) 
        U8O=U8*XU2(6,IU1(6))/XU2(3,IU1(3)) 
        U9O=U9*XU2(6,IU1(6))/XU2(3,IU1(3)) 
C-------GENERATE RESULTANT VOLUMETRIC FLOWS 
        FCRT   = 1.0 
        IF(U6O.LE.0.0) FCRT=-1.0 
        QVTT   = FCRT*((U6O**2+U7O**2)**0.5) 
C-------GENERATE RESULTANT MASS FLOWS 
        FCRT   = 1.0 
        IF(U8O.LE.0.0) FCRT=-1.0 
        QMTT   = FCRT*((U8O**2+U9O**2)**0.5) 
C-------OUTPUT PREDICTED VALUES FOR IOPS=2 
        WRITE(14,104) RO,-ZO,U2O 
        WRITE(15,104) RO,-ZO,U6O,U7O,QVTT 
        WRITE(16,104) RO,-ZO,U8O,U9O,QMTT 
   31  CONTINUE 
 330   CONTINUE 
C------INTEGRATE MASS FLOW OVER CYLINDER FACE 
C------DEFINE GEOMETRIC RANGE 
       R1=RFAR 
       R2=RFAR 
       Z1=ZOBS 
       Z2=ZFAR 
C------OBTAIN INTEGRATED HORIZONTAL FLOW (Vm) 
       CALL PHAB(R1,R2,Z1,Z2,ZD,ZL,ZB,RW,PI,RERF,ZMAX,PAR1,PAR2, 
     1           PAR3,F1,F2,VHFLO,IOP2,IOPS,IOUT) 
C------MASS FLOW CORRECTION 
       U15=WAIR/(VA*RG*TAVE) 
C------MASS FLOW RATE IN HORIZONTAL DIRECTION 
       U18=PAR1*U15*VHFLO 
C------PERCENTAGE OF TOTAL MASS FLOW RATE 
       U19=DSQRT((U18/QM)*(U18/QM)) 
C------CONVERT UNITS BACK TO INPUT UNIT SYSTEM 
       RL1 = RFAR*XU2(1,IU1(1)) 
       RL2 = RFAR*XU2(1,IU1(1)) 
       ZL1 = ZOBS*XU2(1,IU1(1)) 
       ZL2 = ZFAR*XU2(1,IU1(1)) 
       U18O=U18*XU2(6,IU1(6))/XU2(3,IU1(3)) 
       U19O=U19*100.0 
C------OUTPUT VOLUMETRIC FLOW SIGN CONVENTION 
       WRITE(15,141) 
       WRITE(15,142) 
       WRITE(15,153) 
       WRITE(15,154) 
       WRITE(15,155) 
       WRITE(15,156) 
C------OUTPUT MASS FLOW SIGN CONVENTION 
       WRITE(16,151) 
       WRITE(16,152) 
       WRITE(16,153) 
       WRITE(16,154) 
       WRITE(16,155) 
       WRITE(16,156) 
C------OUTPUT MASS FLOW SUMMARY 
       WRITE(16,161) 
       WRITE(16,162) 
       WRITE(16,163)RL1,IU3(1,IU1(1)) 
       WRITE(16,164)ZL1,IU3(1,IU1(1)),ZL2,IU3(1,IU1(1)) 
       WRITE(16,165)U18O,IU3(6,IU1(6)),IU3(3,IU1(3)) 
       WRITE(16,166)U19O 
C------NO VOLUMETRIC FLOW SUMMARY 
 141   FORMAT(////,T10,'VOLUMETRIC FLOW SIGN CONVENTION  :') 
 142   FORMAT(T10,'---------- ---- ---- ----------',//) 
 151   FORMAT(////,T10,'MASS FLOW SIGN CONVENTION  :') 
 152   FORMAT(T10,'---- ---- ---- ----------',//) 
 153   FORMAT(/,T10,'NEGATIVE HORIZONTAL FLOW => FLOW TOWARDS WELL') 
 154   FORMAT(/,T10,'POSITIVE HORIZONTAL FLOW => FLOW AWAY FROM WELL') 
 155   FORMAT(//,T10,'NEGATIVE VERTICAL FLOW   => FLOW UPWARDS') 
 156   FORMAT(/,T10,'POSITIVE VERTICAL FLOW   => FLOW DOWNWARDS') 
 161   FORMAT(////,T10,'MASS FLOW SUMMARY  :') 
 162   FORMAT(T10,'---- ---- -------',//) 
 163   FORMAT(/,T10,'AT RADIUS ',F10.4,' ',A2,' FROM THE WELL', 
     1          ' CENTER LINE, AND,') 
 164   FORMAT(/,T10,'BETWEEN DEPTHS ',F10.4,' ',A2,' AND ',F10.4, 
     1          ' ',A2) 
 165   FORMAT(/,T10,'TOTAL HORIZONTAL FLOW OVER TWO PI RADIANS = ', 
     1       E15.6,' ',A2,'/',A3) 
 166   FORMAT(/,T10,'WHICH REPRESENTS ',F6.2,'% OF FLOW OUT OF WELL') 
      END IF 
C 
C-----DETERMINE FLOW AND PRESSURE IN 2-D SECTON (OPTION 3) 
C 
      IF(IOPS.EQ.3) THEN 
C------CONVERSION FOR RADIANS TO DEGREES 
       PIRD   = 57.29578 
C------SPECIFIED ROTATION 
       ASHIFT = 0.0 
C------SURFER ARROW SYMBOL 
C      ISYMBL = 92 
C------INITIALIZE DIRECTION 
       FD1 = 0.0 
       IF(RSTRT.LT.RW) RSTRT = RW 
       IF(ZOBS.LT.0.0) ZOBS = 0.0 
       IF(ZFAR.GT.ZB) ZFAR = ZB 
       Z=ZOBS-DELZ 
       DO 32 I1=1,NMAX 
        Z=Z + DELZ 
        IF(Z.GT.ZFAR) GO TO 300 
        R=RSTRT-DELR 
        DO 33 J1=1,NMAX 
         R=R + DELR 
         IF(R.GT.RFAR) GO TO 301 
         CALL PHAA(R,Z,ZD,ZL,ZB,RW,PI,RER,RERF,ZMAX,PAR1,PAR2,PAR3, 
     1    F1,F2,F3,ATMSQ,PHIB,DPDR,DPDZ,IOP2,IOUT) 
C--------NORMALIZED PRESSURE 
C--------TEST TO ENSURE PHIB IS POSITIVE 
         IF (PHIB.LT.0.0) THEN 
          WRITE(IOUT,920) 
          WRITE(IOUT,921) 
          WRITE(IOUT,922) 
          STOP 
         END IF 
         U1=DSQRT(PHIB) 
         U2=U1*ATM 
         U3=U2*STDATM 
         U4=1.0/(2.0*VA*U3) 
         U5=WAIR/(2.0*VA*RG*TAVE) 
C--------VOLUMETRIC FLOW RATE IN HORIZONTAL DIRECTION 
         U6=-PAR1*U4*DPDR 
C--------VOLUMETRIC FLOW RATE IN VERTICAL DIRECTION 
         U7=-PAR2*U4*DPDZ 
C--------MASS FLOW RATE IN HORIZONTAL DIRECTION 
         U8=-PAR1*U5*DPDR 
C--------MASS FLOW RATE IN VERTICAL DIRECTION 
         U9=-PAR2*U5*DPDZ 
C--------CONVERT BACK TO INPUT UNITS 
         ZO=Z*XU2(1,IU1(1)) 
         RO=R*XU2(1,IU1(1)) 
         U2O=U2*XU2(4,IU1(4)) 
         U6O=U6*XU2(2,IU1(2))/XU2(3,IU1(3)) 
         U7O=U7*XU2(2,IU1(2))/XU2(3,IU1(3)) 
         U8O=U8*XU2(6,IU1(6))/XU2(3,IU1(3)) 
         U9O=U9*XU2(6,IU1(6))/XU2(3,IU1(3)) 
C--------CALCULATE RESULTANT MAGNITUDES 
         QVTT   = (U6O**2+U7O**2)**0.5 
         QMTT   = (U8O**2+U9O**2)**0.5 
C--------CALCULATE RESULTANT DIRECTIONS 
         DO 34 K1 = 1,2 
          IF(K1.EQ.1) THEN 
           FA1 = U6 
           FA2 = U7 
          END IF 
          IF(K1.EQ.2) THEN 
           FDV = FD1 
           FA1 = U8 
           FA2 = U9 
          END IF 
          IF(((FA1.LT.1.0E-10).AND.(FA1.GT.-1.0E-10)).AND. 
     1      ((FA2.LT.1.0E-10).AND.(FA2.GT.-1.0E-10))) THEN 
            FD1 = ASHIFT 
          END IF 
          IF(((FA1.LT.1.0E-10).AND.(FA1.GT.-1.0E-10)).AND. 
     1      (FA2.LT.0.0)) THEN 
            FD1 = ASHIFT + 90.0 
          END IF 
          IF(((FA1.LT.1.0E-10).AND.(FA1.GT.-1.0E-10)).AND. 
     1      (FA2.GT.0.0)) THEN 
            FD1 = ASHIFT + 270.0 
          END IF 
          IF((FA1.GT.0.0).AND.((FA2.LT.1.0E-10).AND. 
     1       (FA2.GT.-1.0E-10))) THEN 
             FD1 = ASHIFT 
          END IF 
          IF((FA1.LT.0.0).AND.((FA2.LT.1.0E-10).AND. 
     1       (FA2.GT.-1.0E-10))) THEN 
             FD1 = ASHIFT + 180.0 
          END IF 
C---------FIRST QUADRANT 
          IF((FA1.GT.0.0).AND.(FA2.LT.0.0)) THEN 
            FD1 = ASHIFT + PIRD*ABS(ATAN(FA2/FA1)) 
          END IF 
C---------SECOND QUADRANT 
          IF((FA1.LT.0.0).AND.(FA2.LT.0.0)) THEN 
            FD1 = ASHIFT + 180 - PIRD*ATAN(FA2/FA1) 
          END IF 
C---------THIRD QUADRANT 
          IF((FA1.LT.0.0).AND.(FA2.GT.0.0)) THEN 
            FD1 = ASHIFT + 180 + PIRD*ABS(ATAN(FA2/FA1)) 
          END IF 
C---------FORTH QUADRANT 
           IF((FA1.GT.0.0).AND.(FA2.GT.0.0)) THEN 
           FD1 = ASHIFT + 360 - PIRD*ATAN(FA2/FA1) 
          END IF 
          FDM = FD1 
 34      CONTINUE 
C--------OUTPUT PREDICTED VALUES 
         WRITE(14,105) RO,-ZO,U2O 
         WRITE(15,105) RO,-ZO,U6O,U7O,QVTT,FDV,ISYMBL 
         WRITE(16,105) RO,-ZO,U8O,U9O,QMTT,FDM,ISYMBL 
 33     CONTINUE 
 301    CONTINUE 
 32    CONTINUE 
      END IF 
 300  CONTINUE 
 103  FORMAT(2F10.2,E20.10) 
 104  FORMAT(2F10.2,3E15.6) 
 105  FORMAT(2F10.2,3E15.6,F10.2,I5) 
      RETURN 
      END 
C     *************** 
      SUBROUTINE CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2, 
C     *************** 
     1 PAR3,F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2, 
     1 IOUT,LENP) 
C 
C1----SPECIFICATION 
C 
C     PARAMETER(NDATA=50) 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      DIMENSION RD(LENP),ZDA(LENP),PHID(LENP) 
C 
C2----INVOKE ANALYTICAL SOLUTION SUBROUTINES 
C 
      CHI  = 0.0 
      SUM1 = 0.0 
      SUM2 = 0.0 
      ANUM = 0.0 
      DO 10 I=1,NPTS 
       R = RD(I) 
       Z = ZDA(I) 
       CALL PHEE(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1   F1,F2,F3,ATMSQ,PHIB,IOP2,IOUT) 
       UD1 = (PHIB-PHID(I)) 
C------RANDOM VARIABLE IS NORMALIZED ERROR 
       UD2 = UD1/PHID(I) 
       CHI = CHI + UD1*UD1 
       SUM1= SUM1 + UD2 
       SUM2= SUM2 + UD2*UD2 
       ANUM= ANUM + 1.0 
 10   CONTINUE 
      IF(NPTS.GT.1) THEN 
       AVG1 = SUM1/ANUM 
       UD3  = SUM2 - (SUM1*SUM1/ANUM) 
       UD4  = 1.0 
       IF(UD3.LT.0.0) THEN 
        UD4 = -1.0 
        UD3 = -UD3 
       END IF 
       STD1 = DSQRT(UD3/(ANUM-1.0))*UD4 
      END IF 
      RETURN 
      END 
C 
C     *************** 
      SUBROUTINE PHEE(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
C     *************** 
     1 F1,F2,F3,ATMSQ,PHIB,IOP2,IOUT) 
C 
C1----NOTES : 
C     1. SPECIFIES SOLUTION FOR CALIBRATION RUNS DEPENDING ON 
C        VALUE OF IOP2 : 
C        FOR IOP2 = 1 -> USE MODEL FOR DOMAIN OPEN TO ATMOSPHERE 
C        FOR IOP2 = 2 -> USE MODEL FOR DOMAIN SEPARATED FROM 
C                        ATMOSPHERE BY CONFINING UNIT (RIGOROUS SOLN) 
C        FOR IOP2 = 3 -> USE MODEL FOR DOMAIN SEPARATED FROM 
C                        ATMOSPHERE BY CONFINING UNIT (HANTUSH SOLN) 
C 
C 
C2----SPECIFICATION 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C 
C3----UNCONFINED UNIT 
C 
      IF(IOP2.EQ.1) CALL FSIN(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2, 
     1 F3,ATMSQ,PHIB,IOUT) 
C 
C4----CONFINED UNIT (RIGOROUS BOUNDARY CONDITION) 
C 
      IF(IOP2.EQ.2) CALL FTAN(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2, 
     1 PAR3,F1,ATMSQ,PHIB,IOUT) 
C 
C5----CONFINED UNIT (HANTUSH APPROXIMATION) 
C 
      IF(IOP2.EQ.3) CALL FCOS(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2, 
     1 PAR3,F1,F2,ATMSQ,PHIB,IOUT) 
      RETURN 
      END 
C 
C     *************** 
      SUBROUTINE PHAA(R,Z,ZD,ZL,ZB,RW,PI,RER,RERF,ZMAX,PAR1,PAR2, 
C     *************** 
     1 PAR3,F1,F2,F3,ATMSQ,PHIB,DPDR,DPDZ,IOP2,IOUT) 
C 
C1----NOTES : 
C     1. SPECIFIES SOLUTION FOR PREDICTIVE RUNS DEPENDING ON 
C        VALUE OF IOP2 : 
C 
C        FOR IOP2 = 1 -> USE MODEL FOR DOMAIN OPEN TO ATMOSPHERE 
C        FOR IOP2 = 2 -> USE MODEL FOR DOMAIN SEPARATED FROM 
C                        ATMOSPHERE BY CONFINING UNIT (RIGOROUS) 
C        FOR IOP2 = 3 -> USE MODEL FOR DOMAIN SEPARATED FROM 
C                        ATMOSPHERE BY CONFINING UNIT (HANTUSH SOLN) 
C 
C 
C2----SPECIFICATION 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C 
C3----UNCONFINED UNIT 
C 
      IF(IOP2.EQ.1) THEN 
C------PRESSURE DISTRIBUTION 
       CALL FSIN(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,F3,ATMSQ, 
     1      PHIB,IOUT) 
C------FLOW RATES 
       CALL DFSIN(R,Z,ZD,ZL,ZB,RW,PI,RERF,ZMAX,PAR1,PAR2,F1,F2, 
     1      DPDR,DPDZ,IOUT) 
      END IF 
C 
C4----CONFINED UNIT (RIGOROUS BOUNDARY CONDITION) 
C 
      IF(IOP2.EQ.2) THEN 
C------PRESSURE DISTRIBUTION 
       CALL FTAN(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3,F1, 
     1      ATMSQ,PHIB,IOUT) 
C------FLOW RATES 
       CALL DFTAN(R,Z,ZD,ZL,ZB,RW,PI,RERF,ZMAX,PAR1,PAR2,PAR3,F1, 
     1      DPDR,DPDZ,IOUT) 
      END IF 
C 
C5----CONFINED UNIT (HANTUSH APPROXIMATION) 
C 
      IF(IOP2.EQ.3) THEN 
C------PRESSURE DISTRIBUTION 
       CALL FCOS(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1      F1,F2,ATMSQ,PHIB,IOUT) 
C------FLOW RATES 
       CALL DFCOS(R,Z,ZD,ZL,ZB,RW,PI,RERF,ZMAX,PAR1,PAR2,PAR3, 
     1      F1,F2,DPDR,DPDZ,IOUT) 
      END IF 
      RETURN 
      END 
C 
C     *************** 
      SUBROUTINE PHAB(R1,R2,Z1,Z2,ZD,ZL,ZB,RW,PI,RERF,ZMAX, 
C     *************** 
     1 PAR1,PAR2,PAR3,F1,F2,VHFLO,IOP2,IOPS,IOUT) 
C 
C1----NOTES : 
C     1. SPECIFIES SOLUTION FOR INTEGRATED FLOWS DEPENDING ON 
C        VALUE OF IOP2 : 
C 
C        FOR IOP2 = 1 -> USE MODEL FOR DOMAIN OPEN TO ATMOSPHERE 
C        FOR IOP2 = 2 -> USE MODEL FOR DOMAIN SEPARATED FROM 
C                        ATMOSPHERE BY CONFINING UNIT (RIGOROUS SOLN) 
C        FOR IOP2 = 3 -> USE MODEL FOR DOMAIN SEPARATED FROM 
C                        ATMOSPHERE BY CONFINING UNIT (HANTUSH SOLN) 
C 
C 
C2----SPECIFICATION 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C 
C3----UNCONFINED UNIT 
C 
      IF(IOP2.EQ.1) THEN 
C------INTEGRATED FLOW FOR DOMAIN OPEN TO ATMOSPHERE 
       CALL DISIN(R1,R2,Z1,Z2,ZD,ZL,ZB,RW,PI,RERF,ZMAX,PAR1,PAR2, 
     1      F1,F2,VHFLO,IOPS,IOUT) 
      END IF 
C 
C4----CONFINED UNIT (RIGOUROUS BOUNDARY CONDITION) 
C 
      IF(IOP2.EQ.2) THEN 
C------INTEGRATED FLOW FOR DOMAIN SEPARATED FROM ATMOSPHERE 
       CALL DITAN(R1,R2,Z1,Z2,ZD,ZL,ZB,RW,PI,RERF,ZMAX,PAR1,PAR2, 
     1      PAR3,F1,VHFLO,IOPS,IOUT) 
      END IF 
C 
C5----CONFINED UNIT (HANTUSH APPROXIMATION) 
C 
      IF(IOP2.EQ.3) THEN 
C------INTEGRATED FLOW FOR DOMAIN SEPARATED FROM ATMOSPHERE 
       CALL DICOS(R1,R2,Z1,Z2,ZD,ZL,ZB,RW,PI,RERF,ZMAX,PAR1,PAR2, 
     1      PAR3,F1,F2,VHFLO,IOPS,IOUT) 
      END IF 
      RETURN 
      END 
C     *************** 
      SUBROUTINE FSIN(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2, 
C     *************** 
     1 F3,ATMSQ,PHIB,IOUT) 
C 
C1----NOTES : 
C 
C     1. THIS MODULE EVALUATES THE PRESSURE DISTRIBUTION IN A  
C         DOMAIN OPEN TO THE ATMOSPHERE USING THE MODEL 
C         PRESENTED IN THE PAPER BY BAEHR & HULT, 1991. 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      CHARACTER*4 IU3 
C 
C3----ANALYTICAL SOLUTION 
C 
      U1=PI*ZD/ZB 
      U2=PI*ZL/ZB 
      U4=(PI/ZB)*(PI/ZB) 
      U5=PI*Z/ZB 
      U6=DSQRT(PAR1/PAR2) 
      U7=R/U6 
      U8=RW/U6 
      SUMS=0.0 
      E1=1.0 
      DO 300 ZN=1.0,ZMAX,1.0 
       XM=ZN-0.5 
       XBM=DSQRT(XM*XM*U4) 
       V1=DCOS(XM*U1)-DCOS(XM*U2) 
       UK1=XBM*U7 
       VK0=DBSK0(UK1) 
       UK1=XBM*U8 
       VK1=DBSK1(UK1)*XBM*XM 
       V2=DSIN(XM*U5) 
       PRE=SUMS 
       SUMS=SUMS + V1*VK0*V2/VK1 
       IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 300 
       E1=DABS((SUMS-PRE)/SUMS) 
       IF(E1.LT.RER) GO TO 301 
 300  CONTINUE 
 301  CONTINUE 
      IF(E1.GT.RER) THEN 
       WRITE(IOUT,100) 
       WRITE(IOUT,101)R*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                Z*XU2(1,IU1(1)),IU3(1,IU1(1)) 
       WRITE(IOUT,102)E1 
       WRITE(IOUT,103)RER 
       NT=IDNINT(ZN) 
       WRITE(IOUT,104)NT 
       WRITE(IOUT,105) 
 100   FORMAT(//,T5,'PRESSURE DID NOT ACHIEVE SPECIFIED CONVERGENCE') 
 101   FORMAT(/,T5,'AT R = ',F10.2,' ',A4,'  AND  Z = ',F10.2, 
     1               ' ',A4) 
 102   FORMAT(/,T10,'RELATIVE ERROR ACHIEVED    = ',E10.3) 
 103   FORMAT(T10,'RELATIVE ERROR SPECIFIED   = ',E10.3) 
 104   FORMAT(T10,'NUMBER OF ITERATIONS       = ',I7) 
 105   FORMAT(//) 
      END IF 
      V4=(F3*U6)/(PAR1*ATMSQ) 
C-----THIS IS EQN (56) IN WRR PAPER BY BAEHR & HULT 
      PHIB=1.0 + V4*SUMS 
      RETURN 
      END 
C     *************** 
      SUBROUTINE FCOS(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
C     *************** 
     1 F1,F2,ATMSQ,PHIB,IOUT) 
C 
C1----NOTES 
C 
C     1. THIS MODULE EVALUATES THE PRESSURE DISTRIBUTION IN A  
C         DOMAIN SEPARATED FROM THE ATMOSPHERE BY A CONFINING 
C         UNIT USING THE HANTUSH ASSUMPTION WITH UNIFORM  
C         LEAKAGE ACROSS DOMAIN (PRESENTED IN PAPER BY BAEHR 
C         AND HULT, 1991). 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      CHARACTER*4 IU3 
C 
C3----ANALYTICAL SOLUTION 
C 
      U1=PI*ZD/ZB 
      U2=PI*ZL/ZB 
      U3=PAR3/(PAR2*ZB) 
      U4=(PI/ZB)*(PI/ZB) 
      U5=PI*Z/ZB 
      U6=DSQRT(PAR1/PAR2) 
      U7=R/U6 
      U8=RW/U6 
      SUMC=0.0 
      E1=1.0 
      DO 300 ZN=1.0,ZMAX,1.0 
       XN=ZN 
       XBN=DSQRT(XN*XN*U4+U3) 
       V1=DSIN(XN*U2)-DSIN(XN*U1) 
       UK1=XBN*U7 
       VK0=DBSK0(UK1) 
       UK1=XBN*U8 
       VK1=DBSK1(UK1)*XBN*XN 
       V2=DCOS(XN*U5) 
       PRE=SUMC 
       SUMC=SUMC + V1*VK0*V2/VK1 
       IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 300 
       E1=DABS((SUMC-PRE)/SUMC) 
       IF(E1.LT.RER) GO TO 301 
 300  CONTINUE 
 301  CONTINUE 
      IF(E1.GT.RER) THEN 
       WRITE(IOUT,100) 
       WRITE(IOUT,101)R*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                Z*XU2(1,IU1(1)),IU3(1,IU1(1)) 
       WRITE(IOUT,102)E1 
       WRITE(IOUT,103)RER 
       NT=IDNINT(ZN) 
       WRITE(IOUT,104)NT 
       WRITE(IOUT,105) 
 100   FORMAT(//,T5,'PRESSURE DID NOT ACHIEVE SPECIFIED CONVERGENCE') 
 101   FORMAT(/,T5,'AT R = ',F10.2,' ',A4,'  AND  Z = ',F10.2, 
     1               ' ',A4) 
 102   FORMAT(/,T10,'RELATIVE ERROR ACHIEVED    = ',E10.3) 
 103   FORMAT(T10,'RELATIVE ERROR SPECIFIED   = ',E10.3) 
 104   FORMAT(T10,'NUMBER OF ITERATIONS       = ',I7) 
 105   FORMAT(//) 
      END IF 
      XBM0=DSQRT(U3) 
      V5=(F1*U6)/(PAR1*ATMSQ) 
      UK1=XBM0*U7 
      VK1=DBSK0(UK1) 
      UK2=XBM0*U8 
      VK2=DBSK1(UK2)*ZB*XBM0 
      V6=VK1/VK2 
C-----THIS IS EQN (49) IN PAPER BY BAEHR & HULT 
      PHIB=1.0 + V5*(V6+F2*SUMC) 
      RETURN 
      END 
C 
C     *************** 
      SUBROUTINE FTAN(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
C     *************** 
     1 F1,ATMSQ,PHIB,IOUT) 
C 
C1----NOTES 
C 
C     1. THIS MODULE EVALUATES THE PRESSURE DISTRIBUTION IN A  
C         DOMAIN SEPARATED FROM THE ATMOSPHERE BY A CONFINING 
C         UNIT USING THE RIGOROUS BOUNDARY CONDITION WITH LEAKAGE  
C         INTO DOMAIN MODELED AS A THIRD KIND BC (NOT PRESENTED 
C         IN PAPER BY BAEHR AND HULT, 1991). 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      CHARACTER*4 IU3 
C 
C3----ANALYTICAL SOLUTION 
C 
      UH=PAR3*ZB/PAR2 
      U6=DSQRT(PAR1/PAR2) 
C     U1=UH*U6*ZB 
      U2=(ZB-ZD)/ZB 
      U3=(ZB-ZL)/ZB 
      SUMT=0.0 
      E1=1.0 
      DO 300 ZN=1.0,ZMAX,1.0 
C 
C------GET COEFFICIENT FOR SERIES SOLUTION 
C      USING NEWTON RAPSON METHOD 
C 
       QN0=PI*(ZN-0.75) 
       DO 299 NEWT=1,1000000 
        UU1=DCOS(QN0) 
        UU2=DSIN(QN0) 
        UU3=QN0*QN0 
        UU4=UU1*UU1 
        UU =(UU3*UU2*UU1-UH*QN0*UU4)/(UU3+UH*UU4) 
        QN=QN0-UU 
        IF(DABS((QN-QN0)/QN).LT.RER) GO TO 200 
        QN0=QN 
 299   CONTINUE 
 200   CONTINUE 
       V1=DSIN(QN*U2)-DSIN(QN*U3) 
       UK1=(QN*R)/(U6*ZB) 
       VK0=DBSK0(UK1) 
       UK1=(QN*RW)/(U6*ZB) 
       VK1=DBSK1(UK1) 
       V2=DCOS(QN*((ZB-Z)/ZB)) 
       V3=QN*QN*(UH+DSIN(QN)*DSIN(QN)) 
       PRE=SUMT 
       SUMT=SUMT + (V1*VK0*V2)/(VK1*V3) 
       IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 300 
       E1=DABS((SUMT-PRE)/SUMT) 
       IF(E1.LT.RER) GO TO 301 
 300  CONTINUE 
 301  CONTINUE 
      IF(E1.GT.RER) THEN 
       WRITE(IOUT,100) 
       WRITE(IOUT,101)R*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                Z*XU2(1,IU1(1)),IU3(1,IU1(1)) 
       WRITE(IOUT,102)E1 
       WRITE(IOUT,103)RER 
       NT=IDNINT(ZN) 
       WRITE(IOUT,104)NT 
       WRITE(IOUT,105) 
 100   FORMAT(//,T5,'PRESSURE DID NOT ACHIEVE SPECIFIED CONVERGENCE') 
 101   FORMAT(/,T5,'AT R = ',F10.2,' ',A4,'  AND  Z = ',F10.2, 
     1               ' ',A4) 
 102   FORMAT(/,T10,'RELATIVE ERROR ACHIEVED    = ',E10.3) 
 103   FORMAT(T10,'RELATIVE ERROR SPECIFIED   = ',E10.3) 
 104   FORMAT(T10,'NUMBER OF ITERATIONS       = ',I7) 
 105   FORMAT(//) 
      END IF 
      V5=(2.0*UH*F1*U6*ZB)/(PAR1*(ZL-ZD)*ATMSQ) 
C 
C-----THIS IS EQN FOR THIRD KIND SOLUTION 
C      NOT IN PAPER BY BAEHR & HULT 
      PHIB=1.0 + V5*SUMT 
      RETURN 
      END 
C     **************** 
      SUBROUTINE DFSIN(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,F1,F2, 
C     **************** 
     1 DPDR,DPDZ,IOUT) 
C 
C1----NOTES : 
C 
C     1. THIS MODULE EVALUATES THE PRESSURE DERIVATIVES (d(PHI)/dr) 
C         AND (d(PHI)/dz) IN A DOMAIN OPEN TO THE ATMOSPHERE USING 
C         THE MODEL PRESENTED IN THE PAPER BY BAEHR & HULT, 1991. 
C     2. DERIVATIVES ARE THEN USED TO DETERMINE VOLUMETRIC AND 
C         MASS FLOW RATES IN THE DOMAIN USING DARCY'S LAW. 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      CHARACTER*4 IU3 
C-----ASSIGN OVER FLOW VARIABLES 
      XLOF = XU2(1,9) 
      XUOF = XU2(1,10) 
C 
C3----ANALYTICAL SOLUTION 
C 
      U1=PI*ZD/ZB 
      U2=PI*ZL/ZB 
      U4=(PI/ZB)*(PI/ZB) 
      U5=PI*Z/ZB 
      U6=DSQRT(PAR1/PAR2) 
      U7=R/U6 
      U8=RW/U6 
      AK=F1*F2*U6/PAR1 
C 
C-----SUM TO GET R DERIVATIVE 
C 
      SUMR=0.0 
      E1=1.0 
      DO 300 ZN=1.0,ZMAX,1.0 
       XM=ZN-0.5 
       XBM=DSQRT(XM*XM*U4) 
       V1=DCOS(XM*U1)-DCOS(XM*U2) 
       UK1=XBM*U8 
       VK1=DBSK1(UK1) 
       ALPM=V1/(XBM*VK1*XM) 
       UK1=XBM*U7 
       VK1=DBSK1(UK1) 
       V2=DSIN(XM*U5) 
       PRE=SUMR 
       SUMR=SUMR + XBM*ALPM*V2*VK1 
       IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 300 
       E1=DABS((SUMR-PRE)/SUMR) 
       E2=DABS(ALPM) 
       IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 301 
 300  CONTINUE 
 301  CONTINUE 
      IF(E1.GT.RER) THEN 
       WRITE(IOUT,100) 
       WRITE(IOUT,101)R*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                Z*XU2(1,IU1(1)),IU3(1,IU1(1)) 
       WRITE(IOUT,102)E1 
       WRITE(IOUT,103)RER 
       NT=IDNINT(ZN) 
       WRITE(IOUT,104)NT 
       WRITE(IOUT,105) 
 100   FORMAT(//,T5,'HORIZONTAL SPECIFIC DISCHARGE DID NOT', 
     1               ' ACHIEVE SPECIFIED CONVERGENCE') 
 101   FORMAT(/,T5,'AT R = ',F10.2,' ',A4,'  AND  Z = ',F10.2, 
     1               ' ',A4) 
 102   FORMAT(/,T10,'RELATIVE ERROR ACHIEVED    = ',E10.3) 
 103   FORMAT(T10,'RELATIVE ERROR SPECIFIED   = ',E10.3) 
 104   FORMAT(T10,'NUMBER OF ITERATIONS       = ',I7) 
 105   FORMAT(//) 
      END IF 
C-----THIS IS DIFFERENTIAL OF EQN (56) IN WRR PAPER BY BAEHR & HULT 
      DPDR=-(AK/U6)*SUMR 
C 
C-----SUM TO GET Z DERIVATIVE 
C 
      SUMZ=0.0 
      E1=1.0 
      DO 310 ZN=1.0,ZMAX,1.0 
       XM=ZN-0.5 
       XBM=DSQRT(XM*XM*U4) 
       V1=DCOS(XM*U1)-DCOS(XM*U2) 
       UK1=XBM*U8 
       VK1=DBSK1(UK1) 
       ALPM=V1/(XBM*VK1*XM) 
       UK1=XBM*U7 
       VK0=DBSK0(UK1) 
       V2=DCOS(XM*U5) 
       PRE=SUMZ 
       SUMZ=SUMZ + XM*ALPM*V2*VK0 
       IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 310 
       E1=DABS((SUMZ-PRE)/SUMZ) 
       E2=DABS(ALPM) 
       IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 311 
 310  CONTINUE 
 311  CONTINUE 
      IF(E1.GT.RER) THEN 
       WRITE(IOUT,106) 
       WRITE(IOUT,101)R*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                Z*XU2(1,IU1(1)),IU3(1,IU1(1)) 
       WRITE(IOUT,102)E1 
       WRITE(IOUT,103)RER 
       NT=IDNINT(ZN) 
       WRITE(IOUT,104)NT 
       WRITE(IOUT,105) 
 106   FORMAT(//,T5,'VERTICAL SPECIFIC DISCHARGE DID NOT', 
     1               ' ACHIEVE SPECIFIED CONVERGENCE') 
      END IF 
C-----THIS IS DIFFERENTIAL OF EQN (56) IN WRR PAPER BY BAEHR & HULT 
      DPDZ=(AK*PI/ZB)*SUMZ 
      RETURN 
      END 
C     *************** 
      SUBROUTINE DFCOS(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
C     *************** 
     1 F1,F2,DPDR,DPDZ,IOUT) 
C 
C1----NOTES 
C 
C     1. THIS MODULE EVALUATES THE PRESSURE DERIVATIVES (d(PHI)/dr) 
C         AND (d(PHI)/dz) IN A DOMAIN SEPARATED FROM THE ATMOSPHERE 
C         BY A CONFINING UNIT USING THE HANTUSH ASSUMPTION WITH 
C         UNIFORM LEAKAGE ACROSS DOMAIN (PRESENTED IN PAPER BY 
C         BAEHR AND HULT, 1991). 
C     2. DERIVATIVES ARE THEN USED TO DETERMINE VOLUMETRIC AND 
C         MASS FLOW RATES IN THE DOMAIN USING DARCY'S LAW. 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      CHARACTER*4 IU3 
C-----ASSIGN OVER FLOW VARIABLES 
      XLOF = XU2(1,9) 
      XUOF = XU2(1,10) 
C 
C3----ANALYTICAL SOLUTION 
C 
      U1=PI*ZD/ZB 
      U2=PI*ZL/ZB 
      U3=PAR3/(PAR2*ZB) 
      U4=(PI/ZB)*(PI/ZB) 
      U5=PI*Z/ZB 
      U6=DSQRT(PAR1/PAR2) 
      U7=R/U6 
      U8=RW/U6 
      A1=F1*U6/PAR1 
      XBM0=DSQRT(U3) 
      UK1=XBM0*U8 
      VK1=DBSK1(UK1) 
      A2=ZB*XBM0*VK1 
      A3=F2 
C 
C-----SUM TO GET R DERIVATIVE 
C 
      SUMR=0.0 
      E1=1.0 
      DO 300 ZN=1.0,ZMAX,1.0 
       XN=ZN 
       XBN=DSQRT(XN*XN*U4+U3) 
       V1=DSIN(XN*U2)-DSIN(XN*U1) 
       UK1=XBN*U8 
       VK1=DBSK1(UK1) 
       V2=XBN*VK1 
       ALPN=(V1/V2)/XN 
       V3=DCOS(XN*U5) 
       UK1=XBN*U7 
       VK1=DBSK1(UK1) 
       V4=VK1 
       PRE=SUMR 
       SUMR=SUMR + XBN*ALPN*V3*V4 
       IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 300 
       E1=DABS((SUMR-PRE)/SUMR) 
       E2=DABS(ALPN) 
       IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 301 
 300  CONTINUE 
 301  CONTINUE 
      IF(E1.GT.RER) THEN 
       WRITE(IOUT,100) 
       WRITE(IOUT,101)R*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                Z*XU2(1,IU1(1)),IU3(1,IU1(1)) 
       WRITE(IOUT,102)E1 
       WRITE(IOUT,103)RER 
       NT=IDNINT(ZN) 
       WRITE(IOUT,104)NT 
       WRITE(IOUT,105) 
 100   FORMAT(//,T5,'HORIZONTAL SPECIFIC DISCHARGE DID NOT', 
     1               ' ACHIEVE SPECIFIED CONVERGENCE') 
 101   FORMAT(/,T5,'AT R = ',F10.2,' ',A4,'  AND  Z = ',F10.2, 
     1               ' ',A4) 
 102   FORMAT(/,T10,'RELATIVE ERROR ACHIEVED    = ',E10.3) 
 103   FORMAT(T10,'RELATIVE ERROR SPECIFIED   = ',E10.3) 
 104   FORMAT(T10,'NUMBER OF ITERATIONS       = ',I7) 
 105   FORMAT(//) 
      END IF 
C-----THIS IS DIFFERENTIAL OF EQN (49) IN WRR PAPER BY BAEHR & HULT 
      DPDR=(-A3/U6)*SUMR 
      UK1=XBM0*U7 
      VK1=DBSK1(UK1) 
      DPDR=DPDR-(XBM0/(U6*A2))*VK1 
      DPDR=A1*DPDR 
C 
C-----SUM TO GET Z DERIVATIVE 
C 
      SUMZ=0.0 
      E1=1.0 
      DO 310 ZN=1.0,ZMAX,1.0 
       XN=ZN 
       XBN=DSQRT(XN*XN*U4+U3) 
       V1=DSIN(XN*U2)-DSIN(XN*U1) 
       UK1=XBN*U8 
       VK1=DBSK1(UK1) 
       V2=XBN*VK1 
       ALPN=(V1/V2)/XN 
       V3=DSIN(XN*U5) 
       UK1=XBN*U7 
       VK0=DBSK0(UK1) 
       V4=VK0 
       PRE=SUMZ 
       SUMZ=SUMZ + XN*ALPN*V3*V4 
       IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 310 
       E1=DABS((SUMZ-PRE)/SUMZ) 
       E2=DABS(ALPN) 
       IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 311 
 310  CONTINUE 
 311  CONTINUE 
      IF(E1.GT.RER) THEN 
       WRITE(IOUT,106) 
       WRITE(IOUT,101)R*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                Z*XU2(1,IU1(1)),IU3(1,IU1(1)) 
       WRITE(IOUT,102)E1 
       WRITE(IOUT,103)RER 
       NT=IDNINT(ZN) 
       WRITE(IOUT,104)NT 
       WRITE(IOUT,105) 
 106   FORMAT(//,T5,'VERTICAL SPECIFIC DISCHARGE DID NOT', 
     1               ' ACHIEVE SPECIFIED CONVERGENCE') 
      END IF 
C-----THIS IS DIFFERENTIAL OF EQN (49) IN WRR PAPER BY BAEHR & HULT 
      DPDZ=-(A1*A3*PI/ZB)*SUMZ 
      RETURN 
      END 
C     **************** 
      SUBROUTINE DFTAN(R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
C     **************** 
     1 F1,DPDR,DPDZ,IOUT) 
C 
C1----NOTES 
C 
C     1. THIS MODULE EVALUATES THE PRESSURE DERIVATIVES (d(PHI)/dr) 
C         AND (d(PHI)/dz) IN A DOMAIN SEPARATED FROM THE ATMOSPHERE 
C         BY A CONFINING UNIT USING THE RIGOROUS BOUNDARY CONDITION 
C         WITH LEAKAGE INTO DOMAIN MODELED AS A THIRD KIND BC (NOT  
C         PRESENTED IN PAPER BY BAEHR AND HULT, 1991). 
C     2. DERIVATIVES ARE THEN USED TO DETERMINE VOLUMETRIC AND 
C         MASS FLOW RATES IN THE DOMAIN USING DARCY'S LAW. 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      CHARACTER*4 IU3 
C-----ASSIGN OVER FLOW VARIABLES 
      XLOF = XU2(1,9) 
      XUOF = XU2(1,10) 
C 
C3----ANALYTICAL SOLUTION 
C 
      UH=PAR3*ZB/PAR2 
      U6=DSQRT(PAR1/PAR2) 
      U1=UH*U6*ZB 
      U2=(ZB-ZD)/ZB 
      U3=(ZB-ZL)/ZB 
      U4=(ZB-Z)/ZB 
      AK=(2.0*U1*F1)/((ZL-ZD)*PAR1) 
C 
C-----SUM TO GET R DERIVATIVE 
C 
      SUMR=0.0 
      E1=1.0 
      DO 300 ZN=1.0,ZMAX,1.0 
C 
C------GET COEFFICIENT FOR SERIES SOLUTION 
C      USING NEWTON RAPSON METHOD 
C 
       QN0=PI*(ZN-0.75) 
       DO 299 NEWT=1,1000000 
        UU1=DCOS(QN0) 
        UU2=DSIN(QN0) 
        UU3=QN0*QN0 
        UU4=UU1*UU1 
        UU =(UU3*UU2*UU1-UH*QN0*UU4)/(UU3+UH*UU4) 
        QN=QN0-UU 
        IF(DABS((QN-QN0)/QN).LT.RER) GO TO 200 
        QN0=QN 
 299   CONTINUE 
 200   CONTINUE 
       V1=DSIN(QN*U2)-DSIN(QN*U3) 
       UK1=(QN/ZB)*(RW/U6) 
       VK1=DBSK1(UK1) 
       V2=UH+DSIN(QN)*DSIN(QN) 
       V3=QN*QN 
       ALPN=V1/(V3*VK1*V2) 
       V4=DCOS(QN*U4) 
       UK1=(QN*R)/(U6*ZB) 
       VK1=DBSK1(UK1) 
       PRE=SUMR 
       SUMR=SUMR + (QN*ALPN*V4*VK1) 
       IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 300 
       E1=DABS((SUMR-PRE)/SUMR) 
       E2=DABS(ALPN) 
       IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 301 
 300  CONTINUE 
 301  CONTINUE 
      IF(E1.GT.RER) THEN 
       WRITE(IOUT,100) 
       WRITE(IOUT,101)R*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                Z*XU2(1,IU1(1)),IU3(1,IU1(1)) 
       WRITE(IOUT,102)E1 
       WRITE(IOUT,103)RER 
       NT=IDNINT(ZN) 
       WRITE(IOUT,104)NT 
       WRITE(IOUT,105) 
 100   FORMAT(//,T5,'HORIZONTAL SPECIFIC DISCHARGE DID NOT', 
     1               ' ACHIEVE SPECIFIED CONVERGENCE') 
 101   FORMAT(/,T5,'AT R = ',F10.2,' ',A4,'  AND  Z = ',F10.2, 
     1               ' ',A4) 
 102   FORMAT(/,T10,'RELATIVE ERROR ACHIEVED    = ',E10.3) 
 103   FORMAT(T10,'RELATIVE ERROR SPECIFIED   = ',E10.3) 
 104   FORMAT(T10,'NUMBER OF ITERATIONS       = ',I7) 
 105   FORMAT(//) 
      END IF 
C-----SOLUTION NOT IN PAPER BY BAEHR & HULT 
      DPDR=-(AK/(U6*ZB))*SUMR 
C 
C-----SUM TO GET Z DERIVATIVE 
C 
      SUMZ=0.0 
      E1=1.0 
      DO 310 ZN=1.0,ZMAX,1.0 
C 
C------GET COEFFICIENT FOR SERIES SOLUTION 
C      USING NEWTON RAPSON METHOD 
C 
       QN0=PI*(ZN-0.75) 
       DO 298 NEWT=1,1000000 
        UU1=DCOS(QN0) 
        UU2=DSIN(QN0) 
        UU3=QN0*QN0 
        UU4=UU1*UU1 
        UU =(UU3*UU2*UU1-UH*QN0*UU4)/(UU3+UH*UU4) 
        QN=QN0-UU 
        IF(DABS((QN-QN0)/QN).LT.RER) GO TO 201 
        QN0=QN 
 298   CONTINUE 
 201   CONTINUE 
       V1=DSIN(QN*U2)-DSIN(QN*U3) 
       UK1=(QN/ZB)*(RW/U6) 
       VK1=DBSK1(UK1) 
       V2=UH+DSIN(QN)*DSIN(QN) 
       V3=QN*QN 
       ALPN=V1/(V3*VK1*V2) 
       V4=DSIN(QN*U4) 
       UK1=(QN*R)/(U6*ZB) 
       VK0=DBSK0(UK1) 
       PRE=SUMZ 
       SUMZ=SUMZ + (QN*ALPN*V4*VK0) 
       IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 310 
       E1=DABS((SUMZ-PRE)/SUMZ) 
       E2=DABS(ALPN) 
       IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 311 
 310  CONTINUE 
 311  CONTINUE 
      IF(E1.GT.RER) THEN 
       WRITE(IOUT,106) 
       WRITE(IOUT,101)R*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                Z*XU2(1,IU1(1)),IU3(1,IU1(1)) 
       WRITE(IOUT,102)E1 
       WRITE(IOUT,103)RER 
       NT=IDNINT(ZN) 
       WRITE(IOUT,104)NT 
       WRITE(IOUT,105) 
 106   FORMAT(//,T5,'VERTICAL SPECIFIC DISCHARGE DID NOT', 
     1               ' ACHIEVE SPECIFIED CONVERGENCE') 
      END IF 
C-----SOLUTION NOT IN PAPER BY BAEHR & HULT 
      DPDZ=(AK/ZB)*SUMZ 
      RETURN 
      END 
C     **************** 
      SUBROUTINE DISIN(R1,R2,Z1,Z2,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1, 
C     **************** 
     1  PAR2,F1,F2,VHFLO,IOPS,IOUT) 
C 
C1----NOTES : 
C 
C     1. THIS MODULE EVALUATES FLOW OVER A SURFACE IN A DOMAIN 
C         OPEN TO THE ATMOSPHERE USING THE MODEL PRESENTED IN 
C         THE PAPER BY BAEHR & HULT, 1991. 
C     2. FOR IOPS=1 (IE HORIZONTAL LINE), THE OUTPUT VALUE 
C         REPRESENTS THE TOTAL FLOW THROUGH A HORIZONTAL DISK 
C         AT DEPTH Z1, EXTENDING FROM RADIUS R1 TO R2. 
C     3. FOR IOPS=2 (IE VERTICAL LINE), THE OUTPUT VALUE 
C         REPRESENTS THE TOTAL FLOW THROUGH THE FACE OF A VERTICAL 
C         CYLINDER WITH RADIUS R1, EXTENDING FROM DEPTH Z1 TO Z2. 
C     4. ALL OUTPUT VALUES ARE FOR 360 degrees. 
C 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      CHARACTER*4 IU3 
C-----ASSIGN OVER FLOW VARIABLES 
      XLOF = XU2(1,9) 
      XUOF = XU2(1,10) 
C 
C3----ANALYTICAL SOLUTION 
C 
      U1=PI*ZD/ZB 
      U2=PI*ZL/ZB 
      U4=(PI/ZB)*(PI/ZB) 
      U5A=PI*Z1/ZB 
      U5B=PI*Z2/ZB 
      U6=DSQRT(PAR1/PAR2) 
      U7A=R1/U6 
      U7B=R2/U6 
      U8=RW/U6 
      AK=F1*F2*U6/PAR1 
C 
C-----SUM TO GET R COMPONENT (Vm) IF IOPS=2 
C 
      IF(IOPS.EQ.2) THEN 
       E1=1.0 
       SUMR=0.0 
       DO 300 ZN=1.0,ZMAX,1.0 
        XM=ZN-0.5 
        XBM=DSQRT(XM*XM*U4) 
        V1=DCOS(XM*U1)-DCOS(XM*U2) 
        UK1=XBM*U8 
        VK1=DBSK1(UK1) 
        ALPM=V1/(XBM*VK1*XM) 
        UK1=XBM*U7A 
        VK1=DBSK1(UK1) 
        V2=DCOS(XM*U5A)-DCOS(XM*U5B) 
        PRE=SUMR 
        SUMR=SUMR + (XBM*ALPM*VK1*V2)/XM 
        IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 300 
        E1=DABS((SUMR-PRE)/SUMR) 
        E2=DABS(ALPM) 
        IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 301 
 300   CONTINUE 
 301   CONTINUE 
       IF(E1.GT.RER) THEN 
        WRITE(IOUT,100) 
        WRITE(IOUT,101)Z1*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                 Z2*XU2(1,IU1(1)),IU3(1,IU1(1)) 
        WRITE(IOUT,102)E1 
        WRITE(IOUT,103)RER 
        NT=IDNINT(ZN) 
        WRITE(IOUT,104)NT 
        WRITE(IOUT,105) 
 100    FORMAT(//,T5,'HORIZONTAL FLOW DID NOT ACHIEVE SPECIFIED', 
     1               ' CONVERGENCE') 
 101   FORMAT(T5,'BETWEEN  Z1 = ',F10.2,' ',A4,'  AND  Z2 = ', 
     1               F10.2,' ',A4) 
 102    FORMAT(/,T10,'RELATIVE ERROR ACHIEVED    = ',E10.3) 
 103    FORMAT(T10,'RELATIVE ERROR SPECIFIED   = ',E10.3) 
 104    FORMAT(T10,'NUMBER OF ITERATIONS       = ',I7) 
 105    FORMAT(//) 
      END IF 
C------THIS IS PART OF THE EXPRESSION FOR HORIZONTAL FLOW THROUGH 
C      A VERTICAL CYLINDER FACE 
       VHFLO=R1*AK*ZB*SUMR/U6 
      END IF 
C 
C-----SUM TO GET Z COMPONENT (Hm) IF IOPS=1 
C 
      IF(IOPS.EQ.1) THEN 
       SUMZ=0.0 
       E1=1.0 
       DO 310 ZN=1.0,ZMAX,1.0 
        XM=ZN-0.5 
        XBM=DSQRT(XM*XM*U4) 
        V1=DCOS(XM*U1)-DCOS(XM*U2) 
        UK1=XBM*U8 
        VK1=DBSK1(UK1) 
        ALPM=V1/(XBM*VK1*XM) 
        UK2=XBM*U7B 
        VK2=DBSK1(UK2)*R2 
        UK3=XBM*U7A 
        VK3=DBSK1(UK3)*R1 
        VK0=VK2-VK3 
        V2=DCOS(XM*U5A) 
        PRE=SUMZ 
        SUMZ=SUMZ + (XM*ALPM*VK0*V2)/XBM 
        IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 310 
        E1=DABS((SUMZ-PRE)/SUMZ) 
        E2=DABS(ALPM) 
        IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 311 
 310   CONTINUE 
 311   CONTINUE 
       IF(E1.GT.RER) THEN 
        IF(UK2.GT.UK1) UK1=UK2 
        WRITE(IOUT,106) 
        WRITE(IOUT,107)R1*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                 R2*XU2(1,IU1(1)),IU3(1,IU1(1)) 
        WRITE(IOUT,102)E1 
        WRITE(IOUT,103)RER 
        NT=IDNINT(ZN) 
        WRITE(IOUT,104)NT 
        WRITE(IOUT,105) 
 106    FORMAT(//,T5,'VERTICAL FLOW DID NOT ACHIEVE SPECIFIED', 
     1               ' CONVERGENCE') 
 107   FORMAT(T5,'BETWEEN  R1 = ',F10.2,' ',A4,'  AND  R2 = ', 
     1               F10.2,' ',A4) 
       END IF 
C------THIS IS PART OF THE EXPRESSION FOR VERTICAL FLOW THROUGH 
C      A HORIZONTAL DISK 
       VHFLO=-(PI**2)*AK*U6*SUMZ/ZB 
      END IF 
      RETURN 
      END 
C     *************** 
      SUBROUTINE DICOS(R1,R2,Z1,Z2,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2, 
C     *************** 
     1      PAR3,F1,F2,VHFLO,IOPS,IOUT) 
C 
C1----NOTES : 
C 
C     1. THIS MODULE EVALUATES FLOW OVER A SURFACE IN A DOMAIN 
C         SEPARATED FROM THE ATMOSPHERE USING THE HANTUSH MODEL 
C         PRESENTED IN THE PAPER BY BAEHR & HULT, 1991. 
C     2. FOR IOPS=1 (IE HORIZONTAL LINE), THE OUTPUT VALUE 
C         REPRESENTS THE TOTAL FLOW THROUGH A HORIZONTAL DISK 
C         AT DEPTH Z1, EXTENDING FROM RADIUS R1 TO R2. 
C     3. FOR IOPS=2 (IE VERTICAL LINE), THE OUTPUT VALUE 
C         REPRESENTS THE TOTAL FLOW THROUGH THE FACE OF A VERTICAL 
C         CYLINDER WITH RADIUS R1, EXTENDING FROM DEPTH Z1 TO Z2. 
C     4. ALL OUTPUT VALUES ARE FOR 360 degrees. 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      CHARACTER*4 IU3 
C-----ASSIGN OVER FLOW VARIABLES 
      XLOF = XU2(1,9) 
      XUOF = XU2(1,10) 
C 
C3----ANALYTICAL SOLUTION 
C 
      U1=PI*ZD/ZB 
      U2=PI*ZL/ZB 
      U3=PAR3/(PAR2*ZB) 
      U4=(PI/ZB)*(PI/ZB) 
      U5A=PI*Z1/ZB 
      U5B=PI*Z2/ZB 
      U6=DSQRT(PAR1/PAR2) 
      U7A=R1/U6 
      U7B=R2/U6 
      U8=RW/U6 
      A1=F1*U6/PAR1 
      XBM0=DSQRT(U3) 
      UK1=XBM0*U8 
      VK1=DBSK1(UK1) 
      A2=ZB*XBM0*VK1 
      A3=F2 
C 
C-----SUM TO GET R COMPONENT (Vm) IF IOPS=2 
C 
      IF(IOPS.EQ.2) THEN 
       SUMR=0.0 
       E1=1.0 
       DO 300 ZN=1.0,ZMAX,1.0 
        XN=ZN 
        XBN=DSQRT(XN*XN*U4+U3) 
        V1=DSIN(XN*U2)-DSIN(XN*U1) 
        UK1=XBN*U8 
        VK1=DBSK1(UK1) 
        V2=XBN*VK1 
        ALPN=V1/(V2*XN) 
        UK1=XBN*U7A 
        VK1=DBSK1(UK1) 
        V3=DSIN(XN*U5B)-DSIN(XN*U5A) 
        PRE=SUMR 
        SUMR=SUMR + (XBN*ALPN*VK1*V3)/XN 
        IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 300 
        E1=DABS((SUMR-PRE)/SUMR) 
        E2=DABS(ALPN) 
        IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 301 
 300   CONTINUE 
 301   CONTINUE 
       IF(E1.GT.RER) THEN 
        WRITE(IOUT,100) 
        WRITE(IOUT,101)Z1*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                 Z2*XU2(1,IU1(1)),IU3(1,IU1(1)) 
        WRITE(IOUT,102)E1 
        WRITE(IOUT,103)RER 
        NT=IDNINT(ZN) 
        WRITE(IOUT,104)NT 
        WRITE(IOUT,105) 
 100    FORMAT(//,T5,'HORIZONTAL FLOW DID NOT ACHIEVE SPECIFIED', 
     1               ' CONVERGENCE') 
 101   FORMAT(T5,'BETWEEN  Z1 = ',F10.2,' ',A4,'  AND  Z2 = ', 
     1               F10.2,' ',A4) 
 102    FORMAT(/,T10,'RELATIVE ERROR ACHIEVED    = ',E10.3) 
 103    FORMAT(T10,'RELATIVE ERROR SPECIFIED   = ',E10.3) 
 104    FORMAT(T10,'NUMBER OF ITERATIONS       = ',I7) 
 105    FORMAT(//) 
       END IF 
C------THIS IS PART OF THE EXPRESSION FOR HORIZONTAL FLOW THROUGH 
C      A VERTICAL CYLINDER FACE 
C 
       V1=-A3*ZB*SUMR/PI 
       UK1=XBM0*U7A 
       VK1=DBSK1(UK1) 
       V2=-XBM0*VK1*(Z2-Z1)/A2 
       VHFLO=A1*PI*R1*(V1+V2)/U6 
      END IF 
C 
C-----SUM TO GET Z COMPONENT (Hm) IF IOPS=1 
C 
      IF(IOPS.EQ.1) THEN 
       SUMZ=0.0 
       E1=1.0 
       DO 310 ZN=1.0,ZMAX,1.0 
        XN=ZN 
        XBN=DSQRT(XN*XN*U4+U3) 
        V1=DSIN(XN*U2)-DSIN(XN*U1) 
        UK1=XBN*U8 
        VK1=DBSK1(UK1) 
        V2=XBN*VK1 
        ALPN=(V1/V2)/XN 
        V3=DSIN(XN*U5A) 
        UK2=XBN*U7B 
        VK2=DBSK1(UK2)*R2 
        UK3=XBN*U7A 
        VK3=DBSK1(UK3)*R1 
        VK1=VK2-VK3 
        PRE=SUMZ 
        SUMZ=SUMZ + (XN*ALPN*V3*VK1)/XBN 
        IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 310 
        E1=DABS((SUMZ-PRE)/SUMZ) 
        E2=DABS(ALPN) 
        IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 311 
 310   CONTINUE 
 311   CONTINUE 
       IF(E1.GT.RER) THEN 
        IF(UK2.GT.UK1) UK1=UK2 
        WRITE(IOUT,106) 
        WRITE(IOUT,107)R1*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                 R2*XU2(1,IU1(1)),IU3(1,IU1(1)) 
        WRITE(IOUT,102)E1 
        WRITE(IOUT,103)RER 
        NT=IDNINT(ZN) 
        WRITE(IOUT,104)NT 
        WRITE(IOUT,105) 
 106    FORMAT(//,T5,'VERTICAL FLOW DID NOT ACHIEVE SPECIFIED', 
     1               ' CONVERGENCE') 
 107    FORMAT(T5,'BETWEEN  R1 = ',F10.2,' ',A4,'  AND  R2 = ', 
     1               F10.2,' ',A4) 
       END IF 
C------THIS IS PART OF THE EXPRESSION FOR VERTICAL FLOW THROUGH 
C      A HORIZONTAL DISK 
       VHFLO=PI*PI*A1*A3*U6*SUMZ/ZB 
      END IF 
      RETURN 
      END 
C     **************** 
      SUBROUTINE DITAN(R1,R2,Z1,Z2,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1, 
C     **************** 
     1      PAR2,PAR3,F1,VHFLO,IOPS,IOUT) 
C 
C1----NOTES 
C 
C     1. THIS MODULE EVALUATES FLOW OVER A SURFACE IN A DOMAIN 
C         SEPARATED FROM THE ATMOSPHERE USING THE RIGOROUS MODEL 
C     2. FOR IOPS=1 (IE HORIZONTAL LINE), THE OUTPUT VALUE 
C         REPRESENTS THE TOTAL FLOW THROUGH A HORIZONTAL DISK 
C         AT DEPTH Z1, EXTENDING FROM RADIUS R1 TO R2. 
C     3. FOR IOPS=2 (IE VERTICAL LINE), THE OUTPUT VALUE 
C         REPRESENTS THE TOTAL FLOW THROUGH THE FACE OF A VERTICAL 
C         CYLINDER WITH RADIUS R1, EXTENDING FROM DEPTH Z1 TO Z2. 
C     4. ALL OUTPUT VALUES ARE FOR 360 degrees. 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      CHARACTER*4 IU3 
C-----ASSIGN OVER FLOW VARIABLES 
      XLOF = XU2(1,9) 
      XUOF = XU2(1,10) 
C 
C3----ANALYTICAL SOLUTION 
C 
      UH=PAR3*ZB/PAR2 
      U6=DSQRT(PAR1/PAR2) 
      U1=UH*U6*ZB 
      U2=(ZB-ZD)/ZB 
      U3=(ZB-ZL)/ZB 
      U4A=(ZB-Z1)/ZB 
      U4B=(ZB-Z2)/ZB 
      AK=(2.0*U1*F1)/((ZL-ZD)*PAR1) 
C 
C-----SUM TO GET R COMPONENT (Vm) IF IOPS=2 
C 
      IF(IOPS.EQ.2) THEN 
       SUMR=0.0 
       E1=1.0 
       DO 300 ZN=1.0,ZMAX,1.0 
C 
C-------GET COEFFICIENT FOR SERIES SOLUTION 
C       USING NEWTON RAPSON METHOD 
C 
        QN0=PI*(ZN-0.75) 
        DO 299 NEWT=1,1000000 
         UU1=DCOS(QN0) 
         UU2=DSIN(QN0) 
         UU3=QN0*QN0 
         UU4=UU1*UU1 
         UU =(UU3*UU2*UU1-UH*QN0*UU4)/(UU3+UH*UU4) 
         QN=QN0-UU 
         IF(DABS((QN-QN0)/QN).LT.RER) GO TO 200 
         QN0=QN 
 299    CONTINUE 
 200    CONTINUE 
        V1=DSIN(QN*U2)-DSIN(QN*U3) 
        UK1=(QN/ZB)*(RW/U6) 
        VK1=DBSK1(UK1) 
        V2=UH+DSIN(QN)*DSIN(QN) 
        V3=QN*QN 
        ALPN=V1/(V3*VK1*V2) 
        UK1=(QN*R1)/(U6*ZB) 
        VK1=DBSK1(UK1) 
        V4=DSIN(QN*U4A)-DSIN(QN*U4B) 
        PRE=SUMR 
        SUMR=SUMR + (ALPN*VK1*V4) 
        IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 300 
        E1=DABS((SUMR-PRE)/SUMR) 
        E2=DABS(ALPN) 
        IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 301 
 300   CONTINUE 
 301   CONTINUE 
       IF(E1.GT.RER) THEN 
        WRITE(IOUT,100) 
        WRITE(IOUT,101)Z1*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                 Z2*XU2(1,IU1(1)),IU3(1,IU1(1)) 
        WRITE(IOUT,102)E1 
        WRITE(IOUT,103)RER 
        NT=IDNINT(ZN) 
        WRITE(IOUT,104)NT 
        WRITE(IOUT,105) 
 100    FORMAT(//,T5,'HORIZONTAL FLOW DID NOT ACHIEVE SPECIFIED', 
     1               ' CONVERGENCE') 
 101   FORMAT(T5,'BETWEEN  Z1 = ',F10.2,' ',A4,'  AND  Z2 = ', 
     1               F10.2,' ',A4) 
 102    FORMAT(/,T10,'RELATIVE ERROR ACHIEVED    = ',E10.3) 
 103    FORMAT(T10,'RELATIVE ERROR SPECIFIED   = ',E10.3) 
 104    FORMAT(T10,'NUMBER OF ITERATIONS       = ',I7) 
 105    FORMAT(//) 
       END IF 
C------THIS IS PART OF THE EXPRESSION FOR HORIZONTAL FLOW THROUGH 
C      A VERTICAL CYLINDER FACE 
       VHFLO=PI*R1*AK*SUMR/U6 
      END IF 
C 
C-----SUM TO GET Z COMPONENT (Hm) IF IOPS=1 
C 
      IF(IOPS.EQ.1) THEN 
       SUMZ=0.0 
       E1=1.0 
       DO 310 ZN=1.0,ZMAX,1.0 
C 
C-------GET COEFFICIENT FOR SERIES SOLUTION 
C       USING NEWTON RAPSON METHOD 
C 
        QN0=PI*(ZN-0.75) 
        DO 298 NEWT=1,1000000 
         UU1=DCOS(QN0) 
         UU2=DSIN(QN0) 
         UU3=QN0*QN0 
         UU4=UU1*UU1 
         UU =(UU3*UU2*UU1-UH*QN0*UU4)/(UU3+UH*UU4) 
         QN=QN0-UU 
         IF(DABS((QN-QN0)/QN).LT.RER) GO TO 201 
         QN0=QN 
 298    CONTINUE 
 201    CONTINUE 
        V1=DSIN(QN*U2)-DSIN(QN*U3) 
        UK1=(QN/ZB)*(RW/U6) 
        VK1=DBSK1(UK1) 
        V2=UH+DSIN(QN)*DSIN(QN) 
        V3=QN*QN 
        ALPN=V1/(V3*VK1*V2) 
        V4=DSIN(QN*U4A) 
        UK2=(QN*R2)/(U6*ZB) 
        VK2=DBSK1(UK2)*R2 
        UK3=(QN*R1)/(U6*ZB) 
        VK3=DBSK1(UK3)*R1 
        VK1=VK2-VK3 
        PRE=SUMZ 
        SUMZ=SUMZ + (ALPN*V4*VK1) 
        IF((ZN.GT.0.999).AND.(ZN.LT.1.001)) GO TO 310 
        E1=DABS((SUMZ-PRE)/SUMZ) 
        E2=DABS(ALPN) 
        IF((E1.LT.RER).OR.(E2.LE.XLOF).OR.(E2.GE.XUOF)) GO TO 311 
 310   CONTINUE 
 311   CONTINUE 
       IF(E1.GT.RER) THEN 
        IF(UK2.GT.UK1) UK1=UK2 
        WRITE(IOUT,106) 
        WRITE(IOUT,107)R1*XU2(1,IU1(1)),IU3(1,IU1(1)), 
     1                 R2*XU2(1,IU1(1)),IU3(1,IU1(1)) 
        WRITE(IOUT,102)E1 
        WRITE(IOUT,103)RER 
        NT=IDNINT(ZN) 
        WRITE(IOUT,104)NT 
        WRITE(IOUT,105) 
 106    FORMAT(//,T5,'VERTICAL FLOW DID NOT ACHIEVE SPECIFIED', 
     1               ' CONVERGENCE') 
 107    FORMAT(T5,'BETWEEN  R1 = ',F10.2,' ',A4,'  AND  R2 = ', 
     1               F10.2,' ',A4) 
       END IF 
C------SOLUTION NOT IN PAPER BY BAEHR & HULT 
       VHFLO=-U6*PI*AK*SUMZ 
      END IF 
      RETURN 
      END 
C 
C     ************** 
      SUBROUTINE OP1(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,NMAX,ZMAX,PAR1,PAR2, 
C     ************** 
     1 PAR3,F1,F2,F3,ATMSQ,PHIB,CHI,CHI0,AVG1,STD1,DINC,DECR,RD,ZDA, 
     2 PHID,IOP2,IVR1,IVR2,IVR3,LENP) 
C 
C1----NOTES : 
C     1. THIS SUBROUTINE IMPLEMENTS THE HILL DESCENDING ALGORITHM 
C         FOR THE FOLLOWING CONDITIONS  : 
C 
C          - ISOTROPIC DOMAIN         (IOP1 = 1) 
C          - NO UPPER CONFINING UNIT  (IOP2 = 1) 
C 
C2----SPECIFICATIONS 
C 
C     PARAMETER(NDATA=50) 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      DIMENSION RD(LENP),ZDA(LENP),PHID(LENP) 
C 
C3----IMPLEMENT ALGORITHM 
C 
      L=0 
      CHI00=CHI0 
      KOUNT=0 
      DD=DINC 
      PAR1=DD*PAR1 
      PAR2=PAR1 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) DD=DECR 
   11 IF(KOUNT.GT.0.AND.CHI.GT.(CHI00-1.0E-30)) L=1 
      IF(L.EQ.1) GO TO 12 
      CHI0=CHI 
      PAR1=DD*PAR1 
      PAR2=PAR1 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      KOUNT=KOUNT+1 
      IF(CHI.GT.CHI0) GO TO 12 
      IF(KOUNT.GT.NMAX) L=2 
      IF(L.EQ.2) GO TO 12 
      IF(CHI.LT.(CHI0+1.0E-30)) GO TO 11 
   12 IVR1=1 
      IF(L.EQ.1) IVR2=1 
      IF(L.EQ.2) IVR3=1 
      RETURN 
      END 
C 
C     ************** 
      SUBROUTINE OP2(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,NMAX,ZMAX,AR,PAR1, 
C     ************** 
     1 PAR2,PAR3,F1,F2,F3,ATMSQ,PHIB,CHI,CHI0,AVG1,STD1,DINC,DECR, 
     2 RD,ZDA,PHID,IOP2,IVR1,IVR2,IVR3,LENP) 
C 
C1----NOTES : 
C     1. THIS SUBROUTINE IMPLEMENTS THE HILL DESCENDING ALGORITHM 
C         FOR THE FOLLOWING CONDITIONS  : 
C 
C          - ANISOTROPIC DOMAIN       (IOP1 = 2) 
C          - NO UPPER CONFINING UNIT  (IOP2 = 1) 
C 
C2----SPECIFICATIONS 
C 
C     PARAMETER(NDATA=50) 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      DIMENSION RD(LENP),ZDA(LENP),PHID(LENP) 
C 
C3----IMPLEMENT ALGORITHM 
C 
      CHI000=CHI0 
      DO 11 I1=1,NMAX 
      CHI00=CHI0 
      DD=DINC 
      PAR1=DD*PAR1 
      PAR2=PAR1/AR 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1 F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2 LENP) 
      IF(CHI.GT.CHI0) DD=DECR 
   12 CHI0=CHI 
      PAR1=DD*PAR1 
      PAR2=PAR1/AR 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) GO TO 13 
      IF(CHI.LT.(CHI0 + 1.0E-30)) GO TO 12 
   13 CHI0=CHI 
      DD=DINC 
      PAR1=PAR1 
      PAR2=PAR2*DD 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1 F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) DD=DECR 
   15 CHI0=CHI 
      PAR2=PAR2*DD 
      AR=PAR1/PAR2 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) GO TO 14 
      IF(CHI.LT.(CHI0+1.0E-30)) GO TO 15 
   14 CONTINUE 
      IF(CHI.GT.(CHI00-1.0E-30)) GO TO 16 
   11 CONTINUE 
   16 IVR1 = 1 
      IF(I1.GE.NMAX) IVR3 = 1 
      IF(CHI0.GT.(CHI000-1.0E-30)) IVR2 = 1 
      RETURN 
      END 
C 
C     ************** 
      SUBROUTINE OP3(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,NMAX,ZMAX,PAR1, 
C     ************** 
     1 PAR2,PAR3,F1,F2,F3,ATMSQ,PHIB,CHI,CHI0,AVG1,STD1,DINC,DECR, 
     2 RD,ZDA,PHID,IOP2,IVR1,IVR2,IVR3,LENP) 
C 
C1----NOTES : 
C     1. THIS SUBROUTINE IMPLEMENTS THE HILL DESCENDING ALGORITHM 
C         FOR THE FOLLOWING CONDITIONS  : 
C 
C          - ISOTROPIC DOMAIN              (IOP1 = 1) 
C          - UPPER CONFINING UNIT          (IOP2 = 2 OR 3) 
C 
C2----SPECIFICATIONS 
C 
C     PARAMETER(NDATA=50) 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      DIMENSION RD(LENP),ZDA(LENP),PHID(LENP) 
C 
C3----IMPLEMENT ALGORITHM 
C 
      CHI000=CHI0 
      DO 11 I1=1,NMAX 
      CHI00=CHI0 
      DD=DINC 
      PAR1=PAR1 
      PAR2=PAR1 
      PAR3=PAR3*DD 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) DD=DECR 
   12 CHI0=CHI 
      PAR1=PAR1 
      PAR2=PAR1 
      PAR3=PAR3*DD 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) GO TO 13 
      IF(CHI.LT.(CHI0+1.0E-30)) GO TO 12 
   13 CHI0=CHI 
      DD=DINC 
      PAR1=PAR1*DD 
      PAR2=PAR1 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) DD=DECR 
   15 CHI0=CHI 
      PAR1=PAR1*DD 
      PAR2=PAR1 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) GO TO 14 
      IF(CHI.LT.(CHI0+1.0E-30)) GO TO 15 
   14 CONTINUE 
      IF(CHI.GT.(CHI00-1.0E-30)) GO TO 16 
   11 CONTINUE 
   16 IVR1=1 
      IF(I1.GE.NMAX) IVR3=1 
      IF(CHI0.GT.(CHI000-1.0E-30)) IVR2=1 
      RETURN 
      END 
C 
C     ************** 
      SUBROUTINE OP4(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,NMAX,ZMAX,AR,PAR1, 
C     ************** 
     1 PAR2,PAR3,F1,F2,F3,ATMSQ,PHIB,CHI,CHI0,AVG1,STD1,DINC,DECR, 
     2 RD,ZDA,PHID,IOP2,IVR1,IVR2,IVR3,LENP) 
C 
C1----NOTES : 
C     1. THIS SUBROUTINE IMPLEMENTS THE HILL DESCENDING ALGORITHM 
C         FOR THE FOLLOWING CONDITIONS  : 
C 
C          - ANISOTROPIC DOMAIN            (IOP1 = 2) 
C          - UPPER CONFINING UNIT          (IOP2 = 2 OR 3) 
C 
C2----SPECIFICATIONS 
C 
C     PARAMETER(NDATA=50) 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      DIMENSION RD(LENP),ZDA(LENP),PHID(LENP) 
C 
C3----IMPLEMENT ALGORITHM 
C 
      CHI000=CHI0 
      DO 11 I1=1,NMAX 
      CHI00=CHI0 
      DD=DINC 
      PAR1=PAR1 
      PAR2=PAR1/AR 
      PAR3=PAR3*DD 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) DD=DECR 
   12 CHI0=CHI 
      PAR1=PAR1 
      PAR2=PAR1/AR 
      PAR3=PAR3*DD 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) GO TO 13 
      IF(CHI.LT.(CHI0+1.0E-30)) GO TO 12 
   13 CHI0=CHI 
      DD=DINC 
      PAR1=PAR1*DD 
      PAR2=PAR1/AR 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) DD=DECR 
   15 CHI0=CHI 
      PAR1=PAR1*DD 
      PAR2=PAR1/AR 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) GO TO 14 
      IF(CHI.LT.(CHI0+1.0E-30)) GO TO 15 
   14 CHI0=CHI 
      DD=DINC 
      PAR1=PAR1 
      PAR2=PAR2*DD 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) DD=DECR 
   16 CHI0=CHI 
      PAR2=PAR2*DD 
      AR=PAR1/PAR2 
      CALL CHIY(NPTS,R,Z,ZD,ZL,ZB,RW,PI,RER,ZMAX,PAR1,PAR2,PAR3, 
     1  F1,F2,F3,ATMSQ,PHIB,CHI,AVG1,STD1,RD,ZDA,PHID,IOP2,IOUT, 
     2  LENP) 
      IF(CHI.GT.CHI0) GO TO 17 
      IF(CHI.LT.(CHI0+1.0E-30)) GO TO 16 
   17 CONTINUE 
      IF(CHI.GT.(CHI00-1.0E-30)) GO TO 18 
   11 CONTINUE 
   18 IVR1 = 1 
      IF(I1.GE.NMAX) IVR3 = 1 
      IF(CHI0.GT.(CHI000-1.0E-30)) IVR2 = 1 
      RETURN 
      END 
C 
C     ***************** 
      SUBROUTINE DATSTR(I,TAIR,TSOIL,ATM,ATMP,P3P,AFLOW,AF1, 
C     ***************** 
     1  Q4P,Q4Q,Q4,QM,RE,FRIK,PWP,WWW,WWA,PAR1,PAR2,PAR3,CHI0,AVG1, 
     2  STD1,IVR1,IVR2,IVR3,STOR,STORA,LENS,IQMV) 
C 
C1----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      DIMENSION STOR(LENS,23),STORA(LENS,1) 
      CHARACTER*12 STORA,AFLOW,AF1,IU3*4 
C 
C2----STORAGE OF OUTPUT DATA 
C 
C-----CONVERT TEMPERATURES BACK TO INPUT UNITS 
      TC1 = TAIR-273.15 
      STOR(I,1) = TC1*XU2(5,(IU1(5)+5))+XU2(5,IU1(5)) 
      TC2 = TSOIL-273.15 
      STOR(I,2) = TC2*XU2(5,(IU1(5)+5))+XU2(5,IU1(5)) 
      STOR(I,3) = ATMP*XU2(4,IU1(4)) 
      STOR(I,4) = P3P*XU2(4,IU1(4)) 
      IF (AFLOW.NE.'NONE') THEN 
       STORA(I,1) = AF1 
      END IF 
      IF (AFLOW.EQ.'NONE') THEN 
       STORA(I,1) = 'NONE' 
      END IF 
C-----CONVERT FLOWS BACK TO INPUT UNITS 
C-----FLOW METER SCALE READING 
      STOR(I,6) = Q4P 
      IF(IQMV.EQ.0) THEN 
C------UNCORRECTED VOLUMETRIC FLOW 
       STOR(I,7) = Q4Q*XU2(2,IU1(2))/XU2(3,IU1(3)) 
C------CORRECTED VOLUMETRIC FLOW 
       STOR(I,8) = Q4*XU2(2,IU1(2))/XU2(3,IU1(3)) 
      END IF 
      IF(IQMV.EQ.1) THEN 
C------DEFAULT TO INPUT MASS FLOW 
       STOR(I,7) = DABS(QM)*XU2(6,IU1(6))/XU2(3,IU1(3)) 
C------DEFAULT OT INPUT MASS FLOW 
       STOR(I,8) = DABS(QM)*XU2(6,IU1(6))/XU2(3,IU1(3)) 
      END IF 
      STOR(I,9)  = DABS(QM)*XU2(6,IU1(6))/XU2(3,IU1(3)) 
      STOR(I,10) = RE 
      STOR(I,11) = FRIK 
      STOR(I,12) = PWP 
C-----CONVERT PROBE PRESSURE BACK TO INPUT UNITS 
      STOR(I,13) = WWW*ATM*XU2(4,IU1(4)) 
      STOR(I,14) = WWA*ATM*XU2(4,IU1(4)) 
C-----CONVERT PERMEABILITY BACK TO INPUT UNITS 
      STOR(I,15) = PAR1*XU2(7,IU1(7)) 
      STOR(I,16) = PAR2*XU2(7,IU1(7)) 
C-----CONVERT LEAKAGE RATIO BACK TO INPUT UNITS 
      STOR(I,17) = PAR3*XU2(7,IU1(7))/XU2(1,IU1(1)) 
      STOR(I,18) = CHI0 
      STOR(I,19) = AVG1 
      STOR(I,20) = STD1 
      STOR(I,21) = 0.0 
      STOR(I,22) = 0.0 
      STOR(I,23) = 0.0 
      IF(IVR1.GT.0) THEN 
       STOR(I,21) = 1.0 
      END IF 
      IF(IVR2.GT.0) THEN 
       STOR(I,22) = 1.0 
      END IF 
      IF(IVR3.GT.0) THEN 
       STOR(I,23) = 1.0 
      END IF 
      RETURN 
      END 
C 
C     ***************** 
      SUBROUTINE DATOUT(INBAS,IOUT,ISEL1,ISEL2,PROJECT, 
C     ***************** 
     1 DATE,WELLNUM,AKS,NR,IOP1,IOP2,AR1,XKR,B1,XK1,ZD,ZL,ZB,RW, 
     2 DINJ,STOR,STORA,AOUT,XMAX,D1,LENS,IQMV) 
C 
C1A---SPECIFICATIONS : 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      COMMON/UNITS/XU2(7,10)
      COMMON/IUNIT/IU1(7),IU3(7,10)  
      DIMENSION STOR(LENS,23),STORA(LENS,1) 
      CHARACTER*40 PROJECT 
      CHARACTER*12 DATE,WELLNUM,STORA,AOUT,AVAR,IU3*4,AV1*2 
      AV1='--' 
C 
C1B---UNIT CONVERSIONS : 
C 
      XKRO=XKR*XU2(7,IU1(7)) 
      B1O =B1*XU2(1,IU1(1)) 
      XK1O=XK1*XU2(7,IU1(7)) 
      ZDO =ZD*XU2(1,IU1(1)) 
      ZLO =ZL*XU2(1,IU1(1)) 
      ZBO =ZB*XU2(1,IU1(1)) 
      RWO =RW*XU2(1,IU1(1)) 
      XMAXO=XMAX*XU2(1,IU1(1)) 
      D1O =D1*XU2(1,IU1(1)) 
C 
C2----SELECT LOCATION OF OUTPUT (1 -> OUTPUT FILE, 2 -> SCREEN) 
C 
      IVAR = 0 
C-----IF NO OUTPUT FILE NAME HAS BEEN SPECIFIED YET 
      IF (AOUT.EQ.' ') THEN 
       WRITE(IOUT,195) 
       WRITE(IOUT,196) 
       WRITE(IOUT,197) 
       WRITE(IOUT,198) 
       WRITE(IOUT,199) 
 400   CONTINUE 
       WRITE(IOUT,200) 
       READ(INBAS,202,ERR=400) IVAR 
      END IF 
C 
C3----IF SELECTED, SPECIFY FILE & OPEN NAME FOR DATA OUTPUT 
C 
      IF (IVAR.EQ.1) THEN 
       WRITE(IOUT,203) 
       READ(INBAS,204)AOUT 
      END IF 
      IF (AOUT.NE.' ') THEN 
       OPEN(UNIT=18,FILE=AOUT) 
       IOUTS = 18 
      END IF 
C 
C4----IF SELECTED, SPECIFY SCREEN FOR DATA OUTPUT 
C 
      IF (AOUT.EQ.' ') THEN 
       IOUTS = IOUT 
      END IF 
C 
C5----OUTPUT DATA TO SPECIFIED LOCATION 
C 
 74   CONTINUE 
      WRITE(IOUTS,209) PROJECT 
      WRITE(IOUTS,210) 
      IF (ISEL1.EQ.1) THEN 
       WRITE(IOUTS,211) 
      END IF 
      IF (ISEL1.EQ.2) THEN 
       WRITE(IOUTS,212) 
      END IF 
      IF ((ISEL1.EQ.3).AND.(ISEL2.EQ.2)) THEN 
       WRITE(IOUTS,205) 
      END IF 
      WRITE(IOUTS,213) DATE 
      IF (ISEL1.NE.3) THEN 
       WRITE(IOUTS,214) WELLNUM 
      END IF 
      IF (ISEL1.EQ.3) THEN 
       WRITE(IOUTS,206) WELLNUM 
       WRITE(IOUTS,208) XMAXO,IU3(1,IU1(1)) 
       WRITE(IOUTS,201) D1O,IU3(1,IU1(1)) 
      END IF 
      IF (ISEL2.EQ.3) THEN 
       WRITE(IOUTS,207)AKS 
      END IF 
      IF (ISEL1.NE.3) THEN 
       WRITE(IOUTS,215) 
       WRITE(IOUTS,216) 
C 
C-----THICKNESS OF DOMAIN 
C 
       WRITE(IOUTS,219)ZBO,IU3(1,IU1(1)) 
C 
C-----ISOTROPIC DOMAIN 
C 
       IF (IOP1.EQ.1) THEN 
        WRITE(IOUTS,218)XKRO,IU3(7,IU1(7)) 
        WRITE(IOUTS,220)AR1 
       END IF 
C 
C-----ANISOTROPIC DOMAIN 
C 
       IF (IOP1.EQ.2) THEN 
        WRITE(IOUTS,221)XKRO,IU3(7,IU1(7)) 
        WRITE(IOUTS,220)AR1 
       END IF 
C 
C-----UPPER CONFINING UNIT 
C 
       IF ((IOP2.EQ.2).OR.(IOP2.EQ.3)) THEN 
        WRITE(IOUTS,236)B1O,IU3(1,IU1(1)) 
        WRITE(IOUTS,237)XK1O,IU3(7,IU1(7)) 
       END IF 
C 
C-----WELL DIMENSIONS FOR FULL-SCALE PERMEABILITY TEST 
C 
       IF (ISEL1.EQ.1) THEN 
        WRITE(IOUTS,225)ZDO,IU3(1,IU1(1)) 
        WRITE(IOUTS,226)ZLO,IU3(1,IU1(1)) 
        WRITE(IOUTS,228)RWO,IU3(1,IU1(1)) 
       END IF 
C 
C-----PROBE DIMENSIONS FOR MINI-PERMEABILITY TEST 
C 
       IF (ISEL1.EQ.2) THEN 
        WRITE(IOUTS,223)ZDO,IU3(1,IU1(1)) 
        WRITE(IOUTS,224)ZLO,IU3(1,IU1(1)) 
        WRITE(IOUTS,228)RWO,IU3(1,IU1(1)) 
        WRITE(IOUTS,227)D1O,IU3(1,IU1(1)) 
       END IF 
C 
C-----INJECTION OR EXTRACTION 
C 
       IF (DINJ.LT.0) WRITE(IOUTS,230) 
       IF (DINJ.GT.0) WRITE(IOUTS,231) 
C 
C------OUTPUT SUMMARY 
C 
       WRITE(IOUTS,232)2 
       WRITE(IOUTS,233) 
      END IF 
C 
C-----OUTPUT FOR FRICTION FACTOR EVALUATIONS 
C 
      IF (ISEL1.EQ.3) THEN 
       IF ((DINJ.LT.0).AND.(ISEL2.EQ.2)) WRITE(IOUTS,230) 
       IF ((DINJ.GT.0).AND.(ISEL2.EQ.2)) WRITE(IOUTS,231) 
       WRITE(IOUTS,232)1 
       WRITE(IOUTS,233) 
       WRITE(IOUTS,250)  
       WRITE(IOUTS,251) 
       WRITE(IOUTS,252) 
C------FLOW METER NAME HAS BEEN SPECIFIED 
C------VOLUMETRIC FLOW RATE 
       IF (IQMV.NE.1) THEN 
        WRITE(IOUTS,253)IU3(5,IU1(5)),IU3(4,IU1(4)),IU3(4,IU1(4)), 
     1        AV1,IU3(2,IU1(2)),IU3(3,IU1(3)),IU3(2,IU1(2)), 
     2        IU3(3,IU1(3)) 
       END IF 
C------MASS FLOW RATE 
       IF (IQMV.EQ.1) THEN 
        WRITE(IOUTS,254)IU3(5,IU1(5)),IU3(4,IU1(4)),IU3(4,IU1(4)), 
     1        AV1,IU3(6,IU1(6)),IU3(3,IU1(3)),IU3(6,IU1(6)),
     2        IU3(3,IU1(3)) 
      END IF 
       WRITE(IOUTS,250) 
       DO 31 I = 1,NR 
       IF (STORA(I,1).NE.'NONE') THEN 
        WRITE(IOUTS,255) STOR(I,1),STOR(I,3),STOR(I,4),STORA(I,1), 
     1   STOR(I,6),STOR(I,7),STOR(I,8) 
       END IF 
       IF (STORA(I,1).EQ.'NONE') THEN 
        WRITE(IOUTS,245) STOR(I,1),STOR(I,3),STOR(I,4),STORA(I,1), 
     1   AV1,AV1,STOR(I,8) 
       END IF 
 31    CONTINUE 
       WRITE(IOUTS,250) 
      END IF 
C 
C-----FLOW DATA OUTPUT 
C 
      IF (ISEL1.NE.3) THEN 
       WRITE(IOUTS,240) 
       WRITE(IOUTS,241) 
       WRITE(IOUTS,242) 
C------FLOW METER NAME HAS BEEN SPECIFIED 
C------VOLUMETRIC FLOW RATE 
       IF (IQMV.NE.1) THEN 
        WRITE(IOUTS,243)IU3(5,IU1(5)),IU3(5,IU1(5)),IU3(4,IU1(4)), 
     1        IU3(4,IU1(4)),AV1,IU3(2,IU1(2)),IU3(3,IU1(3)), 
     2        IU3(2,IU1(2)),IU3(3,IU1(3)) 
       END IF 
C------MASS FLOW RATE 
       IF (IQMV.EQ.1) THEN 
        WRITE(IOUTS,244)IU3(5,IU1(5)),IU3(5,IU1(5)),IU3(4,IU1(4)), 
     1        IU3(4,IU1(4)),AV1,IU3(6,IU1(6)),IU3(3,IU1(3)), 
     2        IU3(6,IU1(6)),IU3(3,IU1(3)) 
       END IF 
       WRITE(IOUTS,240) 
       DO 25 I = 1,NR 
       IF (STORA(I,1).NE.'NONE') THEN 
        WRITE(IOUTS,246) STOR(I,1),STOR(I,2),STOR(I,3),STOR(I,4), 
     1   STORA(I,1),STOR(I,6),STOR(I,7),STOR(I,8) 
       END IF 
       IF (STORA(I,1).EQ.'NONE') THEN 
        WRITE(IOUTS,245) STOR(I,1),STOR(I,2),STOR(I,3),STOR(I,4), 
     1   STORA(I,1),AV1,AV1,STOR(I,8) 
       END IF 
 25    CONTINUE 
       WRITE(IOUTS,240) 
      END IF
C 
C-----PAUSE OUTPUT DISPLAY ON SCREEN 
C 
      IF (IOUTS.EQ.IOUT) THEN 
       WRITE(IOUTS,247) 
       READ(INBAS,204) AVAR
      END IF 
C 
C-----OUTPUT FOR FULL-SCALE PERMEABILITY TEST 
C 
      IF (ISEL1.EQ.1) THEN 
       WRITE(IOUTS,260) 
       WRITE(IOUTS,281) 
       WRITE(IOUTS,282) 
       WRITE(IOUTS,283)IU3(6,IU1(6)),IU3(3,IU1(3)),IU3(7,IU1(7)), 
     1       IU3(7,IU1(7)),IU3(7,IU1(7)),IU3(1,IU1(1)) 
       WRITE(IOUTS,260) 
       DO 27 I =1,NR 
        WRITE(IOUTS,284)  STOR(I,9),STOR(I,15),STOR(I,16), 
     1   STOR(I,17),STOR(I,15)/STOR(I,16),STOR(I,19),STOR(I,20) 
 27    CONTINUE 
       WRITE(IOUTS,260) 
       DO 127 I =1,NR 
        IF (STOR(I,22).GT.0) THEN 
         WRITE(IOUTS,291)I 
        END IF 
        IF (STOR(I,23).GT.0) THEN 
         WRITE(IOUTS,292)I 
        END IF 
 127   CONTINUE 
      END IF 
C 
C-----OUTPUT FOR MINI-PERMEABILITY TEST 
C 
      IF (ISEL1.EQ.2) THEN 
       WRITE(IOUTS,280) 
       WRITE(IOUTS,261) 
       WRITE(IOUTS,262) 
       WRITE(IOUTS,263)IU3(6,IU1(6)),IU3(3,IU1(3)),IU3(4,IU1(4)), 
     1       IU3(7,IU1(7)) 
       WRITE(IOUTS,280) 
       DO 26 I =1,NR 
        WRITE(IOUTS,264) STOR(I,9),STOR(I,10),STOR(I,11), 
     1   STOR(I,14),STOR(I,15),STOR(I,18) 
 26    CONTINUE 
       WRITE(IOUTS,280) 
       DO 126 I =1,NR 
        IF (STOR(I,22).GT.0) THEN 
         WRITE(IOUTS,291)I 
        END IF 
        IF (STOR(I,23).GT.0) THEN 
         WRITE(IOUTS,292)I 
        END IF 
 126   CONTINUE 
      END IF 
C 
C-----OUTPUT FOR FRICTION FACTOR EVALUATION 
C 
      IF (ISEL1.EQ.3) THEN 
       WRITE(IOUTS,270) 
       WRITE(IOUTS,271) 
       WRITE(IOUTS,272) 
       WRITE(IOUTS,273)IU3(6,IU1(6)),IU3(3,IU1(3)) 
       WRITE(IOUTS,270) 
       DO 28 I =1,NR 
        WRITE(IOUTS,274)  STOR(I,9),STOR(I,10),STOR(I,11), 
     1   64.0/STOR(I,10) 
 28    CONTINUE 
       WRITE(IOUTS,270) 
      END IF 
C 
C-----PAUSE OUTPUT DISPLAY ON SCREEN 
C 
      IF (IOUTS.EQ.IOUT) THEN 
       WRITE(IOUTS,247) 
       READ(INBAS,204) AVAR 
      END IF
      AVAR='0'
C 
C 
C6----PRINT OUTPUT TO SCREEN FOR SAVE OPTION 
C 
      IF (IOUTS.EQ.IOUT) GO TO 402 
      IF (AOUT.NE.' ') THEN 
       IOUTS = IOUT 
       GO TO 74 
      END IF 
 195  FORMAT(//////////////,T25,'OUTPUT SELECTION') 
 196  FORMAT(T25,'====== =========') 
 197  FORMAT(//////,T10,'SELECT  :') 
 198  FORMAT(/,T10,'1.  TO VIEW AND SAVE OUTPUT') 
 199  FORMAT(/,T10,'2.  TO VIEW OUTPUT ONLY') 
 200  FORMAT(////////,T10,'PLEASE SELECT NUMBER  1  OR  2  :  ') 
 202  FORMAT(I3) 
 203  FORMAT(///,T10,'ENTER NAME OF DATA OUTPUT FILE :  ') 
 204  FORMAT(A12) 
 209  FORMAT(T15,'PROJECT        : ',A40) 
 210  FORMAT(T15,'=======') 
 211  FORMAT(//,T15,'SCOPE          : RESULTS OF FULL-SCALE ', 
     1 'PERMEABILITY TESTS') 
 212  FORMAT(/,T15,'SCOPE          : RESULTS OF MINI-PERMEABILITY ', 
     1 'TESTS') 
 205  FORMAT(//,T15,'SCOPE          : FRICTION FACTOR USING', 
     1 ' EXPERIMENTAL METHODS') 
 213  FORMAT(T15,'TEST DATE      : ',A12) 
 214  FORMAT(T15,'WELL NUMBER    : ',A12) 
 206  FORMAT(T15,'PIPE ID NUMBER : ',A12) 
 208  FORMAT(T15,'PIPE LENGTH    :',F10.3,' ',A2) 
 201  FORMAT(T15,'PIPE DIAMETER  :',F10.3,' ',A2) 
 207  FORMAT(T15,'PIPE ROUGHNESS :',F10.6) 
 215  FORMAT(/,T5,'1. MODEL INPUT SUMMARY') 
 216  FORMAT(T5,  '   ----- ----- -------') 
 218  FORMAT(T30,': ESTIMATED PERMEABILITY =',E10.3,' ',A4) 
 219  FORMAT(T5,'MODEL DOMAIN             : THICKNESS =',F8.3,' ',A2) 
 220  FORMAT(T30,': ESTIMATED ANISOTROPY RATIO =',F7.2) 
 221  FORMAT(T30,': ESTIMATED HORIZONTAL PERMEABILITY =',E8.3,' ',A4) 
 236  FORMAT(T5,'UPPER CONFINING UNIT     : THICKNESS =',F8.3,' ',A2) 
 237  FORMAT(T30,': ESTIMATED PERMEABILITY =',E8.3,' ',A4) 
 223  FORMAT(T5,'PROBE DEPTH (HANTUSH d)  : TOP OF PROBE =', 
     1 F8.2,' ',A2) 
 224  FORMAT(T5,'PROBE DEPTH (HANTUSH l)  : BOTTOM OF PROBE =', 
     1 F8.2,' ',A2) 
 225  FORMAT(T5,'WELL DEPTH (HANTUSH d)   : TOP OF SCREEN =', 
     1 F8.2,' ',A2) 
 226  FORMAT(T5,'WELL DEPTH (HANTUSH l)   : BOTTOM OF SCREEN =', 
     1 F8.2,' ',A2) 
 227  FORMAT(T5,'PIPE DIAMETER            : DIAMETER =', 
     1 F8.3,' ',A2) 
 228  FORMAT(T5,'WELL RADIUS              : EFFECTIVE RADIUS =', 
     1 F8.2,' ',A2) 
 230  FORMAT(T5,'AIR FLOW DIRECTION       : VAPOR EXTRACTION') 
 231  FORMAT(T5,'AIR FLOW DIRECTION       : VAPOR INJECTION') 
 232  FORMAT(/,T5,I1,'. MODEL OUTPUT SUMMARY') 
 233  FORMAT(T5,'   ----- ------ -------') 
 240  FORMAT(/,78('*'),/) 
 241  FORMAT(T3,'AIR',T10,'SOIL',T21,'ATMOS.',T31,'SYSTEM',T40, 
     1 'FLOW',T50,'SCALE',T60,'PREVAIL.',T71,'ACTUAL') 
 242  FORMAT(T3,'TEMP',T10,'TEMP',T21,'PRESS.',T31,'PRESS.',T40, 
     1 'METER',T49,'READING',T61,'FLOW',T71,'FLOW') 
 243  FORMAT(T3,A4,T10,A4,T21,A4,T31,A4,T40,'TYPE',T51,A2,T59, 
     1 A4,'/',A3,T70,A4,'/',A3) 
 244  FORMAT(T3,A4,T10,A4,T21,A4,T31,A4,T40,'TYPE',T51,A2,T61, 
     1 A2,'/',A3,T71,A2,'/',A3) 
 245  FORMAT(T2,F6.2,T9,F6.2,T20,F7.3,T30,F7.3,T40,A8,T51,A2, 
     1 T63,A2,T66,F10.3) 
 246  FORMAT(T2,F6.2,T9,F6.2,T20,F7.3,T30,F7.3,T40,A8,T48,F7.2, 
     1 T56,F10.3,T66,F10.3) 
 247  FORMAT(/,T5,'Press  ENTER  to Continue') 
 248  FORMAT(A12) 
 250  FORMAT(/,69('*'),/) 
 251  FORMAT(T3,'AIR',T12,'ATMOS.',T22,'SYSTEM',T31, 
     1 'FLOW',T41,'SCALE',T51,'PREVAIL.',T62,'ACTUAL') 
 252  FORMAT(T3,'TEMP',T12,'PRESS.',T22,'PRESS.',T31, 
     1 'METER',T41,'READING',T52,'FLOW',T62,'FLOW') 
 253  FORMAT(T3,A4,T12,A4,T22,A4,T31,'TYPE',T42,A2,T50, 
     1 A4,'/',A3,T61,A4,'/',A3) 
 254  FORMAT(T3,A4,T12,A4,T22,A4,T31,'TYPE',T42,A2,T52, 
     1 A2,'/',A3,T62,A2,'/',A3) 
 255  FORMAT(T2,F6.2,T11,F7.3,T21,F7.3,T31,A8,T39,F7.2, 
     1 T47,F10.3,T57,F10.3) 
 260  FORMAT(/,78('*'),/) 
 261  FORMAT(T5,'MASS',T13,'REYNOLD',T23,'FRIC.',T33,'PROBE',T45, 
     1 'AIR',T57,'SUM OF') 
 262  FORMAT(T5,'FLOW',T13,'  NO.',T23,'FACTOR',T33,'PRESS.',T41, 
     1 ' PERMEABILITY',T58,'ERROR') 
 263  FORMAT(T4,A2,'/',A3,T13,'  -- ',T23,' -- ',T33,A4,T44,A4,T57, 
     1 'SQUARED') 
 264  FORMAT(F9.4,T12,F7.1,T22,F7.4,T31,F8.4,T40,E12.4,T53,E12.4) 
 270  FORMAT(/,38('*'),/) 
 271  FORMAT(T2,'MASS',T10,'REYNOLD',T20,'FRIC.',T30,'FRIC.') 
 272  FORMAT(T2,'FLOW',T10,'  NO.',T20,'FACTOR',T30,'FACTOR') 
 273  FORMAT(T1,A2,'/',A3,T10,' --',T20,'(Calc)',T30,'(Laminar)') 
 274  FORMAT(F7.4,T9,F7.1,T19,F7.4,T29,F7.4) 
 280  FORMAT(/,66('*'),/) 
 281  FORMAT(T4,'MASS',T14,'HORIZON.',T25,'VERTICAL',T36, 
     1 'LEAKAGE',T48,'ANISOTPY',T58,'MEAN OF',T70,'STD DEV') 
 282  FORMAT(T4,'FLOW',T14,'PERM.',T25,'PERM.',T35, 
     1 'RATIO(k/b)',T48,'RATIO',T58,'ERROR IN',T70,'OF ERROR') 
 283  FORMAT(T3,A2,'/',A3,T14,A4,T25,A4,T36,A4,'/',A2,T48,'(kr/kz)', 
     1  T58,'PRESS.',T70,'IN PRESS.') 
 284  FORMAT(F9.3,T11,E10.3,T22,E10.3,T33,E10.3,T46,F7.3, 
     1 T55,E10.3,T67,E10.3) 
 291  FORMAT(//,T10,'NO IMPROVEMENT ON PERMEABILITY ESTIMATE FOR', 
     1      ' SET ',I2) 
 292  FORMAT(//,T10,'EXCEEDED MAXIMUM NUMBER OF ITERATIONS FOR', 
     1      ' SET ',I2) 
C 
 402  CONTINUE 
C 
      RETURN 
      END 
C 
C     ***************** 
      SUBROUTINE ERRMES(IOUT,INBAS,AERROR,IER1) 
C     ***************** 
C 
C1----NOTES : 
C 
C     1. THIS SUBROUTINE PRINTS OUT MESSAGE TO USER THAT 
C         AN INPUT ERROR HAS OCCURED. 
C     2. THE USER MAY THEN RENAME THE DATA FILE OR END THE 
C         PROGRAM. 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      CHARACTER*12 AERROR 
C 
C3----MENU SELECTION 
C 
      WRITE(IOUT,100) 
      WRITE(IOUT,101) 
      WRITE(IOUT,102) 
      WRITE(IOUT,103)AERROR 
      WRITE(IOUT,104) 
      WRITE(IOUT,105) 
      WRITE(IOUT,106) 
      WRITE(IOUT,107) 
      WRITE(IOUT,108) 
      READ(INBAS,109)IER1 
      IF(IER1.NE.1) THEN 
       STOP 
      END IF 
 100  FORMAT(///////////////,T25,'FORMAT ERROR MESSAGE') 
 101  FORMAT(T25,'====== ===== =======') 
 102  FORMAT(///,T10,'THE DATA BEING INPUT FROM THE DATA') 
 103  FORMAT(T10,'FILE ',A12,'IS NOT COMPATIBLE WITH THE') 
 104  FORMAT(T10,'PROGRAM FORMAT STATEMENTS.') 
 105  FORMAT(////,T10,'SELECT  :') 
 106  FORMAT(/,T10,'1.  TO SPECIFY ANOTHER FILE NAME') 
 107  FORMAT(/,T10,'2.  TO END PROGRAM') 
 108  FORMAT(////,T10,'PLEASE SELECT NUMBER  1  OR  2  :  ') 
 109  FORMAT(I1) 
      RETURN 
      END 
C 
C     ***************** 
      SUBROUTINE ENDMES(IOUT,INBAS,AERROR,IER1) 
C     ***************** 
C 
C1----NOTES : 
C 
C     1. THIS SUBROUTINE PRINTS OUT MESSAGE TO USER THAT 
C         AN UNEXPECTED END OF THE INPUT FILE HAS BEEN 
C         ENCOUTERED. 
C     2. THE USER MAY THEN RENAME THE DATA FILE OR END THE 
C         PROGRAM. 
C 
C2----SPECIFICATIONS 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      CHARACTER*12 AERROR 
C 
C3----MENU SELECTION 
C 
      WRITE(IOUT,100) 
      WRITE(IOUT,101) 
      WRITE(IOUT,102) 
      WRITE(IOUT,103)AERROR 
      WRITE(IOUT,104) 
      WRITE(IOUT,105) 
      WRITE(IOUT,106) 
      WRITE(IOUT,107) 
      WRITE(IOUT,108) 
      WRITE(IOUT,109) 
      WRITE(IOUT,110) 
      READ(INBAS,111)IER1 
      IF(IER1.NE.1) THEN 
       STOP 
      END IF 
 100  FORMAT(///////////////,T25,'END OF FILE ERROR MESSAGE') 
 101  FORMAT(T25,'=== == ==== ===== =======') 
 102  FORMAT(///,T10,'THE PROGRAM HAS ENCOUNTERED AN UNEXPECTED') 
 103  FORMAT(T10,'END OF FILE WHILE READING THE FILE ',A12) 
 104  FORMAT(/,T10,'THIS ERROR MAY BE CAUSED BY   :') 
 105  FORMAT(T10,'  -  AN INCORRECT FILE NAME') 
 106  FORMAT(T10,'  -  INSUFFICIENT OR INCORRECT DATA IN THE ', 
     1 'SPECIFIED FILE') 
 107  FORMAT(///,T10,'SELECT  :') 
 108  FORMAT(/,T10,'1.  TO SPECIFY ANOTHER FILE NAME') 
 109  FORMAT(/,T10,'2.  TO END PROGRAM') 
 110  FORMAT(////,T10,'PLEASE SELECT NUMBER  1  OR  2  :  ') 
 111  FORMAT(I1) 
      RETURN 
      END 
C 
C     ***************** 
      FUNCTION DBSK0(X) 
C     ***************** 
C 
C 
C1---SPECIFICATION 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C 
C2---BESSEL FUNCTION OF THE THIRD KIND OF ORDER ZERO 
C 
      REAL*8 Y,P1,P2,P3,P4,P5,P6,P7, 
     *    Q1,Q2,Q3,Q4,Q5,Q6,Q7 
      DATA P1,P2,P3,P4,P5,P6,P7/-0.57721566D0,0.42278420D0,0.23069756D0, 
     *    0.3488590D-1,0.262698D-2,0.10750D-3,0.74D-5/ 
      DATA Q1,Q2,Q3,Q4,Q5,Q6,Q7/1.25331414D0,-0.7832358D-1,0.2189568D-1, 
     *    -0.1062446D-1,0.587872D-2,-0.251540D-2,0.53208D-3/ 
      IF (X.LE.2.0) THEN 
        Y=X*X/4.0 
        DBSK0=(-DLOG(X/2.0)*DBSI0(X))+(P1+Y*(P2+Y*(P3+ 
     *        Y*(P4+Y*(P5+Y*(P6+Y*P7)))))) 
      ELSE 
        Y=(2.0/X) 
        DBSK0=(DEXP(-X)/DSQRT(X))*(Q1+Y*(Q2+Y*(Q3+ 
     *        Y*(Q4+Y*(Q5+Y*(Q6+Y*Q7)))))) 
      END IF 
      RETURN 
      END 
C     ***************** 
      FUNCTION DBSK1(X) 
C     ***************** 
C 
C1---SPECIFICATION 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C 
C2---BESSEL FUNCTION OF THE THIRD KIND OF ORDER ONE 
C 
      REAL*8 Y,P1,P2,P3,P4,P5,P6,P7, 
     *    Q1,Q2,Q3,Q4,Q5,Q6,Q7 
      DATA P1,P2,P3,P4,P5,P6,P7/1.0D0,0.15443144D0,-0.67278579D0, 
     *    -0.18156897D0,-0.1919402D-1,-0.110404D-2,-0.4686D-4/ 
      DATA Q1,Q2,Q3,Q4,Q5,Q6,Q7/1.25331414D0,0.23498619D0,-0.3655620D-1, 
     *    0.1504268D-1,-0.780353D-2,0.325614D-2,-0.68245D-3/ 
      IF (X.LE.2.0) THEN 
        Y=X*X/4.0 
        DBSK1=(DLOG(X/2.0)*DBSI1(X))+(1.0/X)*(P1+Y*(P2+ 
     *      Y*(P3+Y*(P4+Y*(P5+Y*(P6+Y*P7)))))) 
      ELSE 
        Y=2.0/X 
        DBSK1=(DEXP(-X)/DSQRT(X))*(Q1+Y*(Q2+Y*(Q3+ 
     *      Y*(Q4+Y*(Q5+Y*(Q6+Y*Q7)))))) 
      END IF 
      RETURN 
      END 
C     ***************** 
      FUNCTION DBSI0(X) 
C     ***************** 
C 
C1---SPECIFICATION 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C 
C2---MODIFIED BESSEL FUNCTION OF THE FIRST KIND OF ORDER ZERO 
C 
      REAL*8 Y,P1,P2,P3,P4,P5,P6,P7, 
     *    Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9 
      DATA P1,P2,P3,P4,P5,P6,P7/1.0D0,3.5156229D0,3.0899424D0,1.2067492D 
     *0, 
     *    0.2659732D0,0.360768D-1,0.45813D-2/ 
      DATA Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9/0.39894228D0,0.1328592D-1, 
     *    0.225319D-2,-0.157565D-2,0.916281D-2,-0.2057706D-1, 
     *    0.2635537D-1,-0.1647633D-1,0.392377D-2/ 
      IF (DABS(X).LT.3.75) THEN 
        Y=(X/3.75)**2 
        DBSI0=P1+Y*(P2+Y*(P3+Y*(P4+Y*(P5+Y*(P6+Y*P7))))) 
      ELSE 
        AX=DABS(X) 
        Y=3.75/AX 
        DBSI0=(DEXP(AX)/DSQRT(AX))*(Q1+Y*(Q2+Y*(Q3+Y*(Q4 
     *      +Y*(Q5+Y*(Q6+Y*(Q7+Y*(Q8+Y*Q9)))))))) 
      END IF 
      RETURN 
      END 
C     ***************** 
      FUNCTION DBSI1(X) 
C    ****************** 
C 
C1---SPECIFICATION 
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C 
C2---MODIFIED BESSEL FUNCTION OF THE FIRST KIND OF ORDER ONE 
C 
      REAL*8 Y,P1,P2,P3,P4,P5,P6,P7, 
     *    Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9 
      DATA P1,P2,P3,P4,P5,P6,P7/0.5D0,0.87890594D0,0.51498869D0, 
     *    0.15084934D0,0.2658733D-1,0.301532D-2,0.32411D-3/ 
      DATA Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9/0.39894228D0,-0.3988024D-1, 
     *    -0.362018D-2,0.163801D-2,-0.1031555D-1,0.2282967D-1, 
     *    -0.2895312D-1,0.1787654D-1,-0.420059D-2/ 
      IF (DABS(X).LT.3.75) THEN 
        Y=(X/3.75)**2 
        DBSI1=X*(P1+Y*(P2+Y*(P3+Y*(P4+Y*(P5+Y*(P6+Y*P7)))))) 
      ELSE 
        AX=DABS(X) 
        Y=3.75/AX 
        DBSI1=(DEXP(AX)/DSQRT(AX))*(Q1+Y*(Q2+Y*(Q3+Y*(Q4+ 
     *      Y*(Q5+Y*(Q6+Y*(Q7+Y*(Q8+Y*Q9)))))))) 
        IF(X.LT.0.0) DBSI1=-DBSI1 
      END IF 
      RETURN 
      END 
 